/* Copyright 2023 Esri
 *
 * Licensed under the Apache License Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package esriPBuffer.graph;
option java_package = "com.esri.arcgis.protobuf.graph";
option optimize_for = LITE_RUNTIME;
option cc_enable_arenas = true;

import "esriPBuffer/EsriTypes.proto";

// packed array types
message FloatArray { repeated float value = 1 [packed=true]; }
message DoubleArray { repeated double value = 1 [packed=true]; }
message Int32Array { repeated sint32 value = 1 [packed=true]; }
message Int64Array { repeated sint64 value = 1 [packed=true]; }
message BoolArray { repeated bool value = 1 [packed=true]; }
message DateTimeArray { repeated int64 value = 1 [packed=true]; } // UTC UNIX timestamp in milliseconds.

message NullArray {
	sint64 length = 1;
}

message StringArray {
	repeated string value = 1;
}

message BlobArray {
	repeated bytes value = 1;
}

message GeometryValue {

	message EsriDefaultGeometry {
		bool hasZ = 1;
		bool hasM = 2;
		repeated uint32 lengths = 3 [packed = true]; // coordinate structure in lengths
		repeated sint64 coords = 4 [packed = true];  // delta-encoded integer values
	}

	EsriTypes.GeometryType geometryType = 1;
	oneof compressed_geometry {
		EsriDefaultGeometry geometry = 2;
		bytes compressedShapeBuffer = 3;
	}
}

message QuantizationParameters {
	enum QuantizeMode {
		view = 0;
		edit = 1;
	}

	EsriTypes.Envelope extent = 1;
	QuantizeMode mode = 2;
	double tolerance = 3;
}

message Transform {
	EsriTypes.Scale scale = 1;
	EsriTypes.Translate translate = 2;
}

message GeometryArray {
	repeated GeometryValue value = 1;
}

message TimestampOffsetArray {
	repeated TimestampOffsetValue value = 1;
}

message TimeOnlyArray {
	repeated TimeOnlyValue value = 1;
}

message DateOnlyArray {
	repeated DateOnlyValue value = 1;
}

message DurationArray {
	repeated DurationValue value = 1;
}

message TimeZone {
	// IANA Time Zone Database TZ identifier
	//  i.e. Europe/Zurich, America/Los_Angeles, etc
	string tz_id = 1;
}

message DateTimeComponents {
	// Year of date. Must be in the range [0, 9999].
	int32 year = 1;

	// Month of year. Must be in the range [1, 12].
	int32 month = 2;

	// Day of month. Must be in the range [1, 31].
	int32 day = 3;

	// Hours of day in 24 hour format. Must be in the range [0,23].
	int32 hours = 4;

	// Minutes of hour of day. Must be in the range [0, 59].
	int32 minutes = 5;

	// Seconds of minute. Must be in the range [0, 59].
	int32 seconds = 6;

	// milliseconds of second. Must be in the range [0, 999].
	int32 milliseconds = 7;
}

// `DateTimeOffset` represents a civil time encoded as components of date, time & time offset.
// The date is relative to the proleptic Gregorian calendar.
//
message DateTimeOffset {
	oneof local_date_time {
		// A time-zone-independent representation of time with exactly 24-hour days, 60-minute hours, and 60-second minutes.
		// Represents a count of milliseconds relative to midnight on January 1, 1970, ignoring any timezone or offset component.
		//
		// The `local_epoch_ms` range is restricted to 0000-01-01T00:00:00.000 (-62167219200000) to 9999-12:31T23:59:59.999 (253402300799999).
		// This restriction is in place to support conversion to and from ISO8601 date format strings.
		//
		// All minutes are 60 seconds long. The leap second is spread equally over the last 1000 seconds of the day,
		// maintaining the appearance of exactly 86,400 seconds per day.
		sint64 local_epoch_ms = 1;

		// Time-zone-independent civil date time represented as individual components.
		DateTimeComponents date_time_components = 2;
	}

	// If `time_offset` is not set, UTC time zone of +0:00 is assumed.
	oneof time_offset {
		// UTC offset in whole seconds between -18 hours and +18 hours.
		// A UTC offset of -8:00 would be represented as -28800.
		sint32 utc_offset = 8;
	}
}

message TimestampOffsetValue {
	oneof date_time_format {
		DateTimeOffset date_time_offset = 1;
		string iso8601_date_format = 2;
	}
}

message DateOnlyComponents {
	// Year of date. Must be in the range [0, 9999].
	int32 year = 1;

	// Month of year. Must be in the range [1, 12].
	int32 month = 2;

	// Day of month. Must be in the range [1, 31].
	int32 day = 3;
}

message DateOnlyValue {
	oneof date_only_format {
		// Days since UNIX epoch.
		// The `epoch_days` values are restricted from 0000-01-01 (-719528) to 9999-12-31 (2932896) to support conversion
		// to and from ISO 8601 Date strings.
		sint32 epoch_days = 1;
		DateOnlyComponents date_only_components = 2;
		string iso8601_date_only_format = 3;
	}
}

message TimeOnlyComponents {
	// Hours of day in 24 hour format. Must be in the range [0,23].
	int32 hours = 1;

	// Minutes of hour of day. Must be in the range [0, 59].
	int32 minutes = 2;

	// Seconds of minute. Must be in the range [0, 59].
	int32 seconds = 3;

	// milliseconds of second. Must be in the range [0, 999].
	int32 milliseconds = 4;
}

message TimeOnlyValue {
	oneof time_only_format {
		// `milliseconds_of_day` values are restricted from 00:00:00 (0) representing midnight to 23:59:59 (86399999).
		uint32 milliseconds_of_day = 1;
		TimeOnlyComponents time_only_components = 2;
		string iso8601_time_only_format = 3;
	}
}

message DurationComponents {
	// The count of months spanning the duration.
	sint64 months = 1;

	// The count of days spanning the duration.
	sint64 days = 2;

	// The count of seconds spanning the duration.
	sint64 seconds = 3;

	// The count of milliseconds spanning the duration.
	sint64 milliseconds = 4;
}

// A `DurationValue` represents a signed span of time.
// It is related to `TimeOnlyValue`, `TimestampOffsetValue`, `DateOnlyValue` & `datetime_value`
// in that the difference between 2 temporal instants is a `DurationValue`, and it can be
// added / subtracted from a temporal instant.
message DurationValue {
	oneof duration_format {
		DurationComponents duration_components = 1;
		string iso8601_duration_format = 2;
	}
}

message PrimitiveValue {
	oneof value_type {
		// Exactly one of these values must be present in a valid message
		// Note that this list does not include `int64` as opposed to `FeatureCollection`

		string string_value = 1;

		float  float_value = 2;
		sint32 float_compressed_as_int32 = 3; // Only use when `float((int32_t)val) == val && -1048576 <= val <= 1048575`

		double double_value = 4;
		float double_compressed_as_float = 5; // Only use when `double((float)val) == val`
		// If `double_value` can be compressed as float and int, only compress as int when `-1048576 <= val <= 1048575`
		sint64 double_compressed_as_int64 = 6; // Only use when `double((int64_t)val) == val && -281474976710656 <= val <= 281474976710655`

		sint64 sint64_value = 7;
		bool bool_value = 8;
		bytes uuid_value = 9; // 16-byte RFC4122 UUID
		bytes blob_value = 10;
		GeometryValue geometry_value = 11;

		bool null_tag = 12; // MUST ALWAYS be set to `false`
		int64 datetime_value = 13; // UTC UNIX timestamp in milliseconds.
		TimestampOffsetValue timestamp_offset_value = 14;
		DateOnlyValue date_only_value = 15;
		TimeOnlyValue time_only_value = 16;
		DurationValue duration_value = 17;
	}
}

// Order preserving `KeyValuePair`
message KeyValuePair {
	string key = 1;
	AnyValue value = 2;
}

message ObjectValue {
	reserved 1; // Used prior to 11.1 for map-based `KeyValuePair` representation.

	repeated KeyValuePair properties = 2;
}

message EntityValue {
	reserved 2; // Used prior to 11.1 for map-based `KeyValuePair` representation.

	string label = 1;
	AnyValue id = 3;
	repeated KeyValuePair properties = 4;
}

message RelationshipValue {
	reserved 2; // Used prior to 11.1 for map-based `KeyValuePair` representation.

	string type = 1;
	AnyValue id = 3;
	AnyValue origin_id = 4;
	AnyValue dest_id = 5;
	repeated KeyValuePair properties = 6;
}

message PathValue {
	repeated EntityValue entities = 1;
	repeated RelationshipValue relationships = 2;
}

message AnyValueArray {
	repeated AnyValue values = 1;
}

message ArrayValue {
	reserved 1;
	reserved "values";

	oneof array_type {
		// Heterogeneous array type
		AnyValueArray any_value_array = 2;

		//
		// Homogeneous array types.
		//   Smaller payload than `ArrayValue` because the element type is known upfront and it
		//   doesn't vary.
		//
		// packed array types (only works for primitive numeric types)
		FloatArray float_array = 3;
		Int32Array float_compressed_as_int32_array = 4; // see usage info in `PrimitiveValue`
		DoubleArray double_array = 5;
		FloatArray double_compressed_as_float_array = 6; // see usage info in `PrimitiveValue`
		Int64Array double_compressed_as_int64_array = 7; // see usage info in `PrimitiveValue`

		Int64Array sint64_array = 8;
		BoolArray bool_array = 9;
		NullArray null_array = 10;

		// `uuid_array` is a concatenation of 1..N RFC4122 UUIDs. Size must be multiple of 16.
		bytes uuid_array = 11;

		DateTimeArray date_array = 12; // UTC UNIX timestamp in milliseconds.

		// unpacked array types
		StringArray string_array = 13;
		BlobArray blob_array = 14;
		GeometryArray geometry_array = 15;
		TimestampOffsetArray timestamp_offset_array = 16;
		TimeOnlyArray time_only_array = 17;
		DateOnlyArray date_only_array = 18;
		DurationArray duration_array = 19;
	}
}

message AnyValue {
	reserved 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19;
	reserved
			"float_array",
			"float_compressed_as_int32_array",
			"double_array",
			"double_compressed_as_float_array",
			"double_compressed_as_int64_array",
			"sint64_array",
			"bool_array",
			"null_array",
			"uuid_array",
			"string_array",
			"blob_array",
			"geometry_array",
			"date_array";

	oneof any_value_type {
		PrimitiveValue primitive_value = 1;
		ArrayValue array_value = 2;
		ObjectValue object_value = 3;
		EntityValue entity_value = 4;
		RelationshipValue relationship_value = 5;
		PathValue path_value = 6;
		AnyValue unknown_value = 20;
	}
}

message Error {
	sint64 error_code = 1;
	string error_message = 2;
}

enum esriNamedTypeCategory {
	option allow_alias = true;

	esriType_UNSPECIFIED = 0;
	esriTypeEntity = 1;
	esriTypeRelationship = 2;
	esriTypeBothEntityRelationship = 3;  // alias for `esriTypeBoth`.
	esriTypeBoth = 3;                    // alias for `esriTypeBothEntityRelationship`.
	esriTypeMetaEntityProvenance = 4;
}
