/* Copyright 2021 Esri
 *
 * Licensed under the Apache License Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
syntax = "proto3";
package esriPBuffer.graph;
option java_package = "com.esri.arcgis.protobuf.graph";
option optimize_for = LITE_RUNTIME;
option cc_enable_arenas = true;

import "esriPBuffer/EsriTypes.proto";
import "esriPBuffer/graph/EsriGraphTypes.proto";

message GraphSearchRequest {

	enum esriNamedTypeCategory {
		esriType_UNSPECIFIED = 0;
		esriTypeEntity = 1;
		esriTypeRelationship = 2;
		esriTypeBoth = 3;
	}

	// Search Query Parameters
	string search_query = 1;                                    // The query string (Lucene query syntax)
	bytes globalid_array = 2;                                   // `globalid_array` is a concatenation of 1..N RFC4122 UUIDs. Size must be multiple of 16. Used as a search filter.
	repeated string named_type_filter = 3;                      // Search execution is limited to specified named types.
	esriNamedTypeCategory type_category_filter = 4;             // Limit search results to entity types, relationship types or both. Check service definition for capabilities of underlying drivers.

	// codes 5 - 8 are reserved
	
	// Output Geometry Parameters
	bool return_geometry = 9;                                   // A flag to indicate whether the search results include geometry.

	// codes 10 - 14 are reserved

	// Search Result Set Options
	sint32 start_index = 15;                                    // The index of the first result to return.
	sint32 max_num_results = 16;                                // The maximum number results to return.
	bool return_search_context = 17;                            // Include search context fields: propertyNames, scores & highlights in the result set. Ignores the cypher_clause, and returns exactly the tuple { id(doc), [propertyName1, ..., propertyNameN], [score1,..., scoreN], [highlight1, ..., highlightN]} for each document
}
