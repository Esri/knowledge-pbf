// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/QueryResponse.proto

#include "esriPBuffer/graph/QueryResponse.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fQueryResponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphQueryRow_esriPBuffer_2fgraph_2fQueryResponse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transform_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
namespace esriPBuffer {
namespace graph {
class GraphQueryResultHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphQueryResultHeader> _instance;
} _GraphQueryResultHeader_default_instance_;
class GraphQueryRowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphQueryRow> _instance;
} _GraphQueryRow_default_instance_;
class GraphQueryResultFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphQueryResultFrame> _instance;
} _GraphQueryResultFrame_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
static void InitDefaultsscc_info_GraphQueryResultFrame_esriPBuffer_2fgraph_2fQueryResponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphQueryResultFrame_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphQueryResultFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GraphQueryResultFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GraphQueryResultFrame_esriPBuffer_2fgraph_2fQueryResponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GraphQueryResultFrame_esriPBuffer_2fgraph_2fQueryResponse_2eproto}, {
      &scc_info_Error_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,
      &scc_info_GraphQueryRow_esriPBuffer_2fgraph_2fQueryResponse_2eproto.base,}};

static void InitDefaultsscc_info_GraphQueryResultHeader_esriPBuffer_2fgraph_2fQueryResponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphQueryResultHeader_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphQueryResultHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GraphQueryResultHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GraphQueryResultHeader_esriPBuffer_2fgraph_2fQueryResponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GraphQueryResultHeader_esriPBuffer_2fgraph_2fQueryResponse_2eproto}, {
      &scc_info_Transform_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,
      &scc_info_Error_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,}};

static void InitDefaultsscc_info_GraphQueryRow_esriPBuffer_2fgraph_2fQueryResponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphQueryRow_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphQueryRow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GraphQueryRow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphQueryRow_esriPBuffer_2fgraph_2fQueryResponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphQueryRow_esriPBuffer_2fgraph_2fQueryResponse_2eproto}, {
      &scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,}};

namespace esriPBuffer {
namespace graph {

// ===================================================================

void GraphQueryResultHeader::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_GraphQueryResultHeader_default_instance_._instance.get_mutable()->transform_ = const_cast< ::esriPBuffer::graph::Transform*>(
      ::esriPBuffer::graph::Transform::internal_default_instance());
  ::esriPBuffer::graph::_GraphQueryResultHeader_default_instance_._instance.get_mutable()->error_ = const_cast< ::esriPBuffer::graph::Error*>(
      ::esriPBuffer::graph::Error::internal_default_instance());
}
class GraphQueryResultHeader::_Internal {
 public:
  static const ::esriPBuffer::graph::Transform& transform(const GraphQueryResultHeader* msg);
  static const ::esriPBuffer::graph::Error& error(const GraphQueryResultHeader* msg);
};

const ::esriPBuffer::graph::Transform&
GraphQueryResultHeader::_Internal::transform(const GraphQueryResultHeader* msg) {
  return *msg->transform_;
}
const ::esriPBuffer::graph::Error&
GraphQueryResultHeader::_Internal::error(const GraphQueryResultHeader* msg) {
  return *msg->error_;
}
void GraphQueryResultHeader::clear_transform() {
  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
void GraphQueryResultHeader::clear_error() {
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
GraphQueryResultHeader::GraphQueryResultHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  field_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GraphQueryResultHeader)
}
GraphQueryResultHeader::GraphQueryResultHeader(const GraphQueryResultHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      field_names_(from.field_names_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_transform()) {
    transform_ = new ::esriPBuffer::graph::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  if (from._internal_has_error()) {
    error_ = new ::esriPBuffer::graph::Error(*from.error_);
  } else {
    error_ = nullptr;
  }
  ::memcpy(&data_model_timestamp_, &from.data_model_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&compressed_frames_) -
    reinterpret_cast<char*>(&data_model_timestamp_)) + sizeof(compressed_frames_));
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GraphQueryResultHeader)
}

void GraphQueryResultHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphQueryResultHeader_esriPBuffer_2fgraph_2fQueryResponse_2eproto.base);
  ::memset(&transform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compressed_frames_) -
      reinterpret_cast<char*>(&transform_)) + sizeof(compressed_frames_));
}

GraphQueryResultHeader::~GraphQueryResultHeader() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GraphQueryResultHeader)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GraphQueryResultHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transform_;
  if (this != internal_default_instance()) delete error_;
}

void GraphQueryResultHeader::ArenaDtor(void* object) {
  GraphQueryResultHeader* _this = reinterpret_cast< GraphQueryResultHeader* >(object);
  (void)_this;
}
void GraphQueryResultHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphQueryResultHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphQueryResultHeader& GraphQueryResultHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphQueryResultHeader_esriPBuffer_2fgraph_2fQueryResponse_2eproto.base);
  return *internal_default_instance();
}


void GraphQueryResultHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GraphQueryResultHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_names_.Clear();
  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  ::memset(&data_model_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compressed_frames_) -
      reinterpret_cast<char*>(&data_model_timestamp_)) + sizeof(compressed_frames_));
  _internal_metadata_.Clear<std::string>();
}

const char* GraphQueryResultHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 data_model_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_model_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.Transform transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.Error error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string field_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bool compressed_frames = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          compressed_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphQueryResultHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GraphQueryResultHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 data_model_timestamp = 1;
  if (this->data_model_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_data_model_timestamp(), target);
  }

  // .esriPBuffer.graph.Transform transform = 2;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transform(this), target, stream);
  }

  // .esriPBuffer.graph.Error error = 3;
  if (this->has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::error(this), target, stream);
  }

  // repeated string field_names = 4;
  for (int i = 0, n = this->_internal_field_names_size(); i < n; i++) {
    const auto& s = this->_internal_field_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.GraphQueryResultHeader.field_names");
    target = stream->WriteString(4, s, target);
  }

  // bool compressed_frames = 5;
  if (this->compressed_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_compressed_frames(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GraphQueryResultHeader)
  return target;
}

size_t GraphQueryResultHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GraphQueryResultHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string field_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_names_.size());
  for (int i = 0, n = field_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      field_names_.Get(i));
  }

  // .esriPBuffer.graph.Transform transform = 2;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // .esriPBuffer.graph.Error error = 3;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // uint64 data_model_timestamp = 1;
  if (this->data_model_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data_model_timestamp());
  }

  // bool compressed_frames = 5;
  if (this->compressed_frames() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphQueryResultHeader::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphQueryResultHeader*>(
      &from));
}

void GraphQueryResultHeader::MergeFrom(const GraphQueryResultHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GraphQueryResultHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_names_.MergeFrom(from.field_names_);
  if (from.has_transform()) {
    _internal_mutable_transform()->::esriPBuffer::graph::Transform::MergeFrom(from._internal_transform());
  }
  if (from.has_error()) {
    _internal_mutable_error()->::esriPBuffer::graph::Error::MergeFrom(from._internal_error());
  }
  if (from.data_model_timestamp() != 0) {
    _internal_set_data_model_timestamp(from._internal_data_model_timestamp());
  }
  if (from.compressed_frames() != 0) {
    _internal_set_compressed_frames(from._internal_compressed_frames());
  }
}

void GraphQueryResultHeader::CopyFrom(const GraphQueryResultHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GraphQueryResultHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphQueryResultHeader::IsInitialized() const {
  return true;
}

void GraphQueryResultHeader::InternalSwap(GraphQueryResultHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  field_names_.InternalSwap(&other->field_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphQueryResultHeader, compressed_frames_)
      + sizeof(GraphQueryResultHeader::compressed_frames_)
      - PROTOBUF_FIELD_OFFSET(GraphQueryResultHeader, transform_)>(
          reinterpret_cast<char*>(&transform_),
          reinterpret_cast<char*>(&other->transform_));
}

std::string GraphQueryResultHeader::GetTypeName() const {
  return "esriPBuffer.graph.GraphQueryResultHeader";
}


// ===================================================================

void GraphQueryRow::InitAsDefaultInstance() {
}
class GraphQueryRow::_Internal {
 public:
};

void GraphQueryRow::clear_values() {
  values_.Clear();
}
GraphQueryRow::GraphQueryRow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GraphQueryRow)
}
GraphQueryRow::GraphQueryRow(const GraphQueryRow& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GraphQueryRow)
}

void GraphQueryRow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphQueryRow_esriPBuffer_2fgraph_2fQueryResponse_2eproto.base);
}

GraphQueryRow::~GraphQueryRow() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GraphQueryRow)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GraphQueryRow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GraphQueryRow::ArenaDtor(void* object) {
  GraphQueryRow* _this = reinterpret_cast< GraphQueryRow* >(object);
  (void)_this;
}
void GraphQueryRow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphQueryRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphQueryRow& GraphQueryRow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphQueryRow_esriPBuffer_2fgraph_2fQueryResponse_2eproto.base);
  return *internal_default_instance();
}


void GraphQueryRow::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GraphQueryRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GraphQueryRow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .esriPBuffer.graph.AnyValue values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphQueryRow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GraphQueryRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .esriPBuffer.graph.AnyValue values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GraphQueryRow)
  return target;
}

size_t GraphQueryRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GraphQueryRow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .esriPBuffer.graph.AnyValue values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphQueryRow::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphQueryRow*>(
      &from));
}

void GraphQueryRow::MergeFrom(const GraphQueryRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GraphQueryRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void GraphQueryRow::CopyFrom(const GraphQueryRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GraphQueryRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphQueryRow::IsInitialized() const {
  return true;
}

void GraphQueryRow::InternalSwap(GraphQueryRow* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

std::string GraphQueryRow::GetTypeName() const {
  return "esriPBuffer.graph.GraphQueryRow";
}


// ===================================================================

void GraphQueryResultFrame::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_GraphQueryResultFrame_default_instance_._instance.get_mutable()->error_ = const_cast< ::esriPBuffer::graph::Error*>(
      ::esriPBuffer::graph::Error::internal_default_instance());
}
class GraphQueryResultFrame::_Internal {
 public:
  static const ::esriPBuffer::graph::Error& error(const GraphQueryResultFrame* msg);
};

const ::esriPBuffer::graph::Error&
GraphQueryResultFrame::_Internal::error(const GraphQueryResultFrame* msg) {
  return *msg->error_;
}
void GraphQueryResultFrame::clear_error() {
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
GraphQueryResultFrame::GraphQueryResultFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  rows_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GraphQueryResultFrame)
}
GraphQueryResultFrame::GraphQueryResultFrame(const GraphQueryResultFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      rows_(from.rows_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_error()) {
    error_ = new ::esriPBuffer::graph::Error(*from.error_);
  } else {
    error_ = nullptr;
  }
  exceeded_transfer_limit_ = from.exceeded_transfer_limit_;
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GraphQueryResultFrame)
}

void GraphQueryResultFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphQueryResultFrame_esriPBuffer_2fgraph_2fQueryResponse_2eproto.base);
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exceeded_transfer_limit_) -
      reinterpret_cast<char*>(&error_)) + sizeof(exceeded_transfer_limit_));
}

GraphQueryResultFrame::~GraphQueryResultFrame() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GraphQueryResultFrame)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GraphQueryResultFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete error_;
}

void GraphQueryResultFrame::ArenaDtor(void* object) {
  GraphQueryResultFrame* _this = reinterpret_cast< GraphQueryResultFrame* >(object);
  (void)_this;
}
void GraphQueryResultFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphQueryResultFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphQueryResultFrame& GraphQueryResultFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphQueryResultFrame_esriPBuffer_2fgraph_2fQueryResponse_2eproto.base);
  return *internal_default_instance();
}


void GraphQueryResultFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GraphQueryResultFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rows_.Clear();
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  exceeded_transfer_limit_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* GraphQueryResultFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.graph.Error error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .esriPBuffer.graph.GraphQueryRow rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool exceeded_transfer_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exceeded_transfer_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphQueryResultFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GraphQueryResultFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.graph.Error error = 1;
  if (this->has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::error(this), target, stream);
  }

  // repeated .esriPBuffer.graph.GraphQueryRow rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rows(i), target, stream);
  }

  // bool exceeded_transfer_limit = 3;
  if (this->exceeded_transfer_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_exceeded_transfer_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GraphQueryResultFrame)
  return target;
}

size_t GraphQueryResultFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GraphQueryResultFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .esriPBuffer.graph.GraphQueryRow rows = 2;
  total_size += 1UL * this->_internal_rows_size();
  for (const auto& msg : this->rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .esriPBuffer.graph.Error error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // bool exceeded_transfer_limit = 3;
  if (this->exceeded_transfer_limit() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphQueryResultFrame::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphQueryResultFrame*>(
      &from));
}

void GraphQueryResultFrame::MergeFrom(const GraphQueryResultFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GraphQueryResultFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rows_.MergeFrom(from.rows_);
  if (from.has_error()) {
    _internal_mutable_error()->::esriPBuffer::graph::Error::MergeFrom(from._internal_error());
  }
  if (from.exceeded_transfer_limit() != 0) {
    _internal_set_exceeded_transfer_limit(from._internal_exceeded_transfer_limit());
  }
}

void GraphQueryResultFrame::CopyFrom(const GraphQueryResultFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GraphQueryResultFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphQueryResultFrame::IsInitialized() const {
  return true;
}

void GraphQueryResultFrame::InternalSwap(GraphQueryResultFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  rows_.InternalSwap(&other->rows_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphQueryResultFrame, exceeded_transfer_limit_)
      + sizeof(GraphQueryResultFrame::exceeded_transfer_limit_)
      - PROTOBUF_FIELD_OFFSET(GraphQueryResultFrame, error_)>(
          reinterpret_cast<char*>(&error_),
          reinterpret_cast<char*>(&other->error_));
}

std::string GraphQueryResultFrame::GetTypeName() const {
  return "esriPBuffer.graph.GraphQueryResultFrame";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphQueryResultHeader* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphQueryResultHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphQueryResultHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphQueryRow* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphQueryRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphQueryRow >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphQueryResultFrame* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphQueryResultFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphQueryResultFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
