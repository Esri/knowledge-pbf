// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/ApplyEditsRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
#include "esriPBuffer/ObjectIdentifierSet.pb.h"
#include "esriPBuffer/EsriTypes.pb.h"
#include "esriPBuffer/graph/EsriGraphTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace esriPBuffer {
namespace graph {
class Adds;
class AddsDefaultTypeInternal;
extern AddsDefaultTypeInternal _Adds_default_instance_;
class Adds_EntitiesEntry_DoNotUse;
class Adds_EntitiesEntry_DoNotUseDefaultTypeInternal;
extern Adds_EntitiesEntry_DoNotUseDefaultTypeInternal _Adds_EntitiesEntry_DoNotUse_default_instance_;
class Adds_RelationshipsEntry_DoNotUse;
class Adds_RelationshipsEntry_DoNotUseDefaultTypeInternal;
extern Adds_RelationshipsEntry_DoNotUseDefaultTypeInternal _Adds_RelationshipsEntry_DoNotUse_default_instance_;
class Deletes;
class DeletesDefaultTypeInternal;
extern DeletesDefaultTypeInternal _Deletes_default_instance_;
class Deletes_DeletedEntityIdsEntry_DoNotUse;
class Deletes_DeletedEntityIdsEntry_DoNotUseDefaultTypeInternal;
extern Deletes_DeletedEntityIdsEntry_DoNotUseDefaultTypeInternal _Deletes_DeletedEntityIdsEntry_DoNotUse_default_instance_;
class Deletes_DeletedRelationshipIdsEntry_DoNotUse;
class Deletes_DeletedRelationshipIdsEntry_DoNotUseDefaultTypeInternal;
extern Deletes_DeletedRelationshipIdsEntry_DoNotUseDefaultTypeInternal _Deletes_DeletedRelationshipIdsEntry_DoNotUse_default_instance_;
class GraphApplyEditsFrame;
class GraphApplyEditsFrameDefaultTypeInternal;
extern GraphApplyEditsFrameDefaultTypeInternal _GraphApplyEditsFrame_default_instance_;
class GraphApplyEditsHeader;
class GraphApplyEditsHeaderDefaultTypeInternal;
extern GraphApplyEditsHeaderDefaultTypeInternal _GraphApplyEditsHeader_default_instance_;
class NamedObjectAdd;
class NamedObjectAddDefaultTypeInternal;
extern NamedObjectAddDefaultTypeInternal _NamedObjectAdd_default_instance_;
class NamedObjectAdd_PropertiesEntry_DoNotUse;
class NamedObjectAdd_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern NamedObjectAdd_PropertiesEntry_DoNotUseDefaultTypeInternal _NamedObjectAdd_PropertiesEntry_DoNotUse_default_instance_;
class NamedObjectAdds;
class NamedObjectAddsDefaultTypeInternal;
extern NamedObjectAddsDefaultTypeInternal _NamedObjectAdds_default_instance_;
class NamedObjectUpdate;
class NamedObjectUpdateDefaultTypeInternal;
extern NamedObjectUpdateDefaultTypeInternal _NamedObjectUpdate_default_instance_;
class NamedObjectUpdate_PropertiesEntry_DoNotUse;
class NamedObjectUpdate_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern NamedObjectUpdate_PropertiesEntry_DoNotUseDefaultTypeInternal _NamedObjectUpdate_PropertiesEntry_DoNotUse_default_instance_;
class NamedObjectUpdates;
class NamedObjectUpdatesDefaultTypeInternal;
extern NamedObjectUpdatesDefaultTypeInternal _NamedObjectUpdates_default_instance_;
class Updates;
class UpdatesDefaultTypeInternal;
extern UpdatesDefaultTypeInternal _Updates_default_instance_;
class Updates_EntitiesEntry_DoNotUse;
class Updates_EntitiesEntry_DoNotUseDefaultTypeInternal;
extern Updates_EntitiesEntry_DoNotUseDefaultTypeInternal _Updates_EntitiesEntry_DoNotUse_default_instance_;
class Updates_RelationshipsEntry_DoNotUse;
class Updates_RelationshipsEntry_DoNotUseDefaultTypeInternal;
extern Updates_RelationshipsEntry_DoNotUseDefaultTypeInternal _Updates_RelationshipsEntry_DoNotUse_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> ::esriPBuffer::graph::Adds* Arena::CreateMaybeMessage<::esriPBuffer::graph::Adds>(Arena*);
template<> ::esriPBuffer::graph::Adds_EntitiesEntry_DoNotUse* Arena::CreateMaybeMessage<::esriPBuffer::graph::Adds_EntitiesEntry_DoNotUse>(Arena*);
template<> ::esriPBuffer::graph::Adds_RelationshipsEntry_DoNotUse* Arena::CreateMaybeMessage<::esriPBuffer::graph::Adds_RelationshipsEntry_DoNotUse>(Arena*);
template<> ::esriPBuffer::graph::Deletes* Arena::CreateMaybeMessage<::esriPBuffer::graph::Deletes>(Arena*);
template<> ::esriPBuffer::graph::Deletes_DeletedEntityIdsEntry_DoNotUse* Arena::CreateMaybeMessage<::esriPBuffer::graph::Deletes_DeletedEntityIdsEntry_DoNotUse>(Arena*);
template<> ::esriPBuffer::graph::Deletes_DeletedRelationshipIdsEntry_DoNotUse* Arena::CreateMaybeMessage<::esriPBuffer::graph::Deletes_DeletedRelationshipIdsEntry_DoNotUse>(Arena*);
template<> ::esriPBuffer::graph::GraphApplyEditsFrame* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphApplyEditsFrame>(Arena*);
template<> ::esriPBuffer::graph::GraphApplyEditsHeader* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphApplyEditsHeader>(Arena*);
template<> ::esriPBuffer::graph::NamedObjectAdd* Arena::CreateMaybeMessage<::esriPBuffer::graph::NamedObjectAdd>(Arena*);
template<> ::esriPBuffer::graph::NamedObjectAdd_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::esriPBuffer::graph::NamedObjectAdd_PropertiesEntry_DoNotUse>(Arena*);
template<> ::esriPBuffer::graph::NamedObjectAdds* Arena::CreateMaybeMessage<::esriPBuffer::graph::NamedObjectAdds>(Arena*);
template<> ::esriPBuffer::graph::NamedObjectUpdate* Arena::CreateMaybeMessage<::esriPBuffer::graph::NamedObjectUpdate>(Arena*);
template<> ::esriPBuffer::graph::NamedObjectUpdate_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::esriPBuffer::graph::NamedObjectUpdate_PropertiesEntry_DoNotUse>(Arena*);
template<> ::esriPBuffer::graph::NamedObjectUpdates* Arena::CreateMaybeMessage<::esriPBuffer::graph::NamedObjectUpdates>(Arena*);
template<> ::esriPBuffer::graph::Updates* Arena::CreateMaybeMessage<::esriPBuffer::graph::Updates>(Arena*);
template<> ::esriPBuffer::graph::Updates_EntitiesEntry_DoNotUse* Arena::CreateMaybeMessage<::esriPBuffer::graph::Updates_EntitiesEntry_DoNotUse>(Arena*);
template<> ::esriPBuffer::graph::Updates_RelationshipsEntry_DoNotUse* Arena::CreateMaybeMessage<::esriPBuffer::graph::Updates_RelationshipsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esriPBuffer {
namespace graph {

// ===================================================================

class NamedObjectAdd_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<NamedObjectAdd_PropertiesEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::AnyValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<NamedObjectAdd_PropertiesEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::AnyValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  NamedObjectAdd_PropertiesEntry_DoNotUse();
  explicit NamedObjectAdd_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NamedObjectAdd_PropertiesEntry_DoNotUse& other);
  static const NamedObjectAdd_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NamedObjectAdd_PropertiesEntry_DoNotUse*>(&_NamedObjectAdd_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "esriPBuffer.graph.NamedObjectAdd.PropertiesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class NamedObjectAdd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.NamedObjectAdd) */ {
 public:
  inline NamedObjectAdd() : NamedObjectAdd(nullptr) {}
  virtual ~NamedObjectAdd();

  NamedObjectAdd(const NamedObjectAdd& from);
  NamedObjectAdd(NamedObjectAdd&& from) noexcept
    : NamedObjectAdd() {
    *this = ::std::move(from);
  }

  inline NamedObjectAdd& operator=(const NamedObjectAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedObjectAdd& operator=(NamedObjectAdd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const NamedObjectAdd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedObjectAdd* internal_default_instance() {
    return reinterpret_cast<const NamedObjectAdd*>(
               &_NamedObjectAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NamedObjectAdd& a, NamedObjectAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedObjectAdd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedObjectAdd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamedObjectAdd* New() const final {
    return CreateMaybeMessage<NamedObjectAdd>(nullptr);
  }

  NamedObjectAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamedObjectAdd>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NamedObjectAdd& from);
  void MergeFrom(const NamedObjectAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NamedObjectAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.NamedObjectAdd";
  }
  protected:
  explicit NamedObjectAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 1,
  };
  // map<string, .esriPBuffer.graph.AnyValue> properties = 1;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
      mutable_properties();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.NamedObjectAdd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      NamedObjectAdd_PropertiesEntry_DoNotUse,
      std::string, ::esriPBuffer::graph::AnyValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
};
// -------------------------------------------------------------------

class NamedObjectAdds PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.NamedObjectAdds) */ {
 public:
  inline NamedObjectAdds() : NamedObjectAdds(nullptr) {}
  virtual ~NamedObjectAdds();

  NamedObjectAdds(const NamedObjectAdds& from);
  NamedObjectAdds(NamedObjectAdds&& from) noexcept
    : NamedObjectAdds() {
    *this = ::std::move(from);
  }

  inline NamedObjectAdds& operator=(const NamedObjectAdds& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedObjectAdds& operator=(NamedObjectAdds&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const NamedObjectAdds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedObjectAdds* internal_default_instance() {
    return reinterpret_cast<const NamedObjectAdds*>(
               &_NamedObjectAdds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NamedObjectAdds& a, NamedObjectAdds& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedObjectAdds* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedObjectAdds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamedObjectAdds* New() const final {
    return CreateMaybeMessage<NamedObjectAdds>(nullptr);
  }

  NamedObjectAdds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamedObjectAdds>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NamedObjectAdds& from);
  void MergeFrom(const NamedObjectAdds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NamedObjectAdds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.NamedObjectAdds";
  }
  protected:
  explicit NamedObjectAdds(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamedObjectAddsFieldNumber = 1,
  };
  // repeated .esriPBuffer.graph.NamedObjectAdd namedObjectAdds = 1;
  int namedobjectadds_size() const;
  private:
  int _internal_namedobjectadds_size() const;
  public:
  void clear_namedobjectadds();
  ::esriPBuffer::graph::NamedObjectAdd* mutable_namedobjectadds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::NamedObjectAdd >*
      mutable_namedobjectadds();
  private:
  const ::esriPBuffer::graph::NamedObjectAdd& _internal_namedobjectadds(int index) const;
  ::esriPBuffer::graph::NamedObjectAdd* _internal_add_namedobjectadds();
  public:
  const ::esriPBuffer::graph::NamedObjectAdd& namedobjectadds(int index) const;
  ::esriPBuffer::graph::NamedObjectAdd* add_namedobjectadds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::NamedObjectAdd >&
      namedobjectadds() const;

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.NamedObjectAdds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::NamedObjectAdd > namedobjectadds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
};
// -------------------------------------------------------------------

class Adds_EntitiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Adds_EntitiesEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::NamedObjectAdds,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Adds_EntitiesEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::NamedObjectAdds,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Adds_EntitiesEntry_DoNotUse();
  explicit Adds_EntitiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Adds_EntitiesEntry_DoNotUse& other);
  static const Adds_EntitiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Adds_EntitiesEntry_DoNotUse*>(&_Adds_EntitiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "esriPBuffer.graph.Adds.EntitiesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class Adds_RelationshipsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Adds_RelationshipsEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::NamedObjectAdds,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Adds_RelationshipsEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::NamedObjectAdds,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Adds_RelationshipsEntry_DoNotUse();
  explicit Adds_RelationshipsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Adds_RelationshipsEntry_DoNotUse& other);
  static const Adds_RelationshipsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Adds_RelationshipsEntry_DoNotUse*>(&_Adds_RelationshipsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "esriPBuffer.graph.Adds.RelationshipsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class Adds PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.Adds) */ {
 public:
  inline Adds() : Adds(nullptr) {}
  virtual ~Adds();

  Adds(const Adds& from);
  Adds(Adds&& from) noexcept
    : Adds() {
    *this = ::std::move(from);
  }

  inline Adds& operator=(const Adds& from) {
    CopyFrom(from);
    return *this;
  }
  inline Adds& operator=(Adds&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Adds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Adds* internal_default_instance() {
    return reinterpret_cast<const Adds*>(
               &_Adds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Adds& a, Adds& b) {
    a.Swap(&b);
  }
  inline void Swap(Adds* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Adds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Adds* New() const final {
    return CreateMaybeMessage<Adds>(nullptr);
  }

  Adds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Adds>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Adds& from);
  void MergeFrom(const Adds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Adds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.Adds";
  }
  protected:
  explicit Adds(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 1,
    kRelationshipsFieldNumber = 2,
  };
  // map<string, .esriPBuffer.graph.NamedObjectAdds> entities = 1;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >&
      _internal_entities() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >*
      _internal_mutable_entities();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >&
      entities() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >*
      mutable_entities();

  // map<string, .esriPBuffer.graph.NamedObjectAdds> relationships = 2;
  int relationships_size() const;
  private:
  int _internal_relationships_size() const;
  public:
  void clear_relationships();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >&
      _internal_relationships() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >*
      _internal_mutable_relationships();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >&
      relationships() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >*
      mutable_relationships();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.Adds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      Adds_EntitiesEntry_DoNotUse,
      std::string, ::esriPBuffer::graph::NamedObjectAdds,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > entities_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      Adds_RelationshipsEntry_DoNotUse,
      std::string, ::esriPBuffer::graph::NamedObjectAdds,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > relationships_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
};
// -------------------------------------------------------------------

class NamedObjectUpdate_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<NamedObjectUpdate_PropertiesEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::AnyValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<NamedObjectUpdate_PropertiesEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::AnyValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  NamedObjectUpdate_PropertiesEntry_DoNotUse();
  explicit NamedObjectUpdate_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NamedObjectUpdate_PropertiesEntry_DoNotUse& other);
  static const NamedObjectUpdate_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NamedObjectUpdate_PropertiesEntry_DoNotUse*>(&_NamedObjectUpdate_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "esriPBuffer.graph.NamedObjectUpdate.PropertiesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class NamedObjectUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.NamedObjectUpdate) */ {
 public:
  inline NamedObjectUpdate() : NamedObjectUpdate(nullptr) {}
  virtual ~NamedObjectUpdate();

  NamedObjectUpdate(const NamedObjectUpdate& from);
  NamedObjectUpdate(NamedObjectUpdate&& from) noexcept
    : NamedObjectUpdate() {
    *this = ::std::move(from);
  }

  inline NamedObjectUpdate& operator=(const NamedObjectUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedObjectUpdate& operator=(NamedObjectUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const NamedObjectUpdate& default_instance();

  enum IdCase {
    kOid = 1,
    kGlobalid = 2,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedObjectUpdate* internal_default_instance() {
    return reinterpret_cast<const NamedObjectUpdate*>(
               &_NamedObjectUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NamedObjectUpdate& a, NamedObjectUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedObjectUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedObjectUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamedObjectUpdate* New() const final {
    return CreateMaybeMessage<NamedObjectUpdate>(nullptr);
  }

  NamedObjectUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamedObjectUpdate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NamedObjectUpdate& from);
  void MergeFrom(const NamedObjectUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NamedObjectUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.NamedObjectUpdate";
  }
  protected:
  explicit NamedObjectUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 3,
    kOidFieldNumber = 1,
    kGlobalidFieldNumber = 2,
  };
  // map<string, .esriPBuffer.graph.AnyValue> properties = 3;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
      mutable_properties();

  // sint64 oid = 1;
  private:
  bool _internal_has_oid() const;
  public:
  void clear_oid();
  ::PROTOBUF_NAMESPACE_ID::int64 oid() const;
  void set_oid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_oid() const;
  void _internal_set_oid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bytes globalid = 2;
  private:
  bool _internal_has_globalid() const;
  public:
  void clear_globalid();
  const std::string& globalid() const;
  void set_globalid(const std::string& value);
  void set_globalid(std::string&& value);
  void set_globalid(const char* value);
  void set_globalid(const void* value, size_t size);
  std::string* mutable_globalid();
  std::string* release_globalid();
  void set_allocated_globalid(std::string* globalid);
  private:
  const std::string& _internal_globalid() const;
  void _internal_set_globalid(const std::string& value);
  std::string* _internal_mutable_globalid();
  public:

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.NamedObjectUpdate)
 private:
  class _Internal;
  void set_has_oid();
  void set_has_globalid();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      NamedObjectUpdate_PropertiesEntry_DoNotUse,
      std::string, ::esriPBuffer::graph::AnyValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > properties_;
  union IdUnion {
    IdUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 oid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr globalid_;
  } id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
};
// -------------------------------------------------------------------

class NamedObjectUpdates PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.NamedObjectUpdates) */ {
 public:
  inline NamedObjectUpdates() : NamedObjectUpdates(nullptr) {}
  virtual ~NamedObjectUpdates();

  NamedObjectUpdates(const NamedObjectUpdates& from);
  NamedObjectUpdates(NamedObjectUpdates&& from) noexcept
    : NamedObjectUpdates() {
    *this = ::std::move(from);
  }

  inline NamedObjectUpdates& operator=(const NamedObjectUpdates& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedObjectUpdates& operator=(NamedObjectUpdates&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const NamedObjectUpdates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedObjectUpdates* internal_default_instance() {
    return reinterpret_cast<const NamedObjectUpdates*>(
               &_NamedObjectUpdates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NamedObjectUpdates& a, NamedObjectUpdates& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedObjectUpdates* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedObjectUpdates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamedObjectUpdates* New() const final {
    return CreateMaybeMessage<NamedObjectUpdates>(nullptr);
  }

  NamedObjectUpdates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamedObjectUpdates>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NamedObjectUpdates& from);
  void MergeFrom(const NamedObjectUpdates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NamedObjectUpdates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.NamedObjectUpdates";
  }
  protected:
  explicit NamedObjectUpdates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamedObjectUpdatesFieldNumber = 1,
  };
  // repeated .esriPBuffer.graph.NamedObjectUpdate namedObjectUpdates = 1;
  int namedobjectupdates_size() const;
  private:
  int _internal_namedobjectupdates_size() const;
  public:
  void clear_namedobjectupdates();
  ::esriPBuffer::graph::NamedObjectUpdate* mutable_namedobjectupdates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::NamedObjectUpdate >*
      mutable_namedobjectupdates();
  private:
  const ::esriPBuffer::graph::NamedObjectUpdate& _internal_namedobjectupdates(int index) const;
  ::esriPBuffer::graph::NamedObjectUpdate* _internal_add_namedobjectupdates();
  public:
  const ::esriPBuffer::graph::NamedObjectUpdate& namedobjectupdates(int index) const;
  ::esriPBuffer::graph::NamedObjectUpdate* add_namedobjectupdates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::NamedObjectUpdate >&
      namedobjectupdates() const;

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.NamedObjectUpdates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::NamedObjectUpdate > namedobjectupdates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
};
// -------------------------------------------------------------------

class Updates_EntitiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Updates_EntitiesEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::NamedObjectUpdates,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Updates_EntitiesEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::NamedObjectUpdates,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Updates_EntitiesEntry_DoNotUse();
  explicit Updates_EntitiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Updates_EntitiesEntry_DoNotUse& other);
  static const Updates_EntitiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Updates_EntitiesEntry_DoNotUse*>(&_Updates_EntitiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "esriPBuffer.graph.Updates.EntitiesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class Updates_RelationshipsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Updates_RelationshipsEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::NamedObjectUpdates,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Updates_RelationshipsEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::NamedObjectUpdates,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Updates_RelationshipsEntry_DoNotUse();
  explicit Updates_RelationshipsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Updates_RelationshipsEntry_DoNotUse& other);
  static const Updates_RelationshipsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Updates_RelationshipsEntry_DoNotUse*>(&_Updates_RelationshipsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "esriPBuffer.graph.Updates.RelationshipsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class Updates PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.Updates) */ {
 public:
  inline Updates() : Updates(nullptr) {}
  virtual ~Updates();

  Updates(const Updates& from);
  Updates(Updates&& from) noexcept
    : Updates() {
    *this = ::std::move(from);
  }

  inline Updates& operator=(const Updates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Updates& operator=(Updates&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Updates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Updates* internal_default_instance() {
    return reinterpret_cast<const Updates*>(
               &_Updates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Updates& a, Updates& b) {
    a.Swap(&b);
  }
  inline void Swap(Updates* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Updates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Updates* New() const final {
    return CreateMaybeMessage<Updates>(nullptr);
  }

  Updates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Updates>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Updates& from);
  void MergeFrom(const Updates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Updates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.Updates";
  }
  protected:
  explicit Updates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 1,
    kRelationshipsFieldNumber = 2,
  };
  // map<string, .esriPBuffer.graph.NamedObjectUpdates> entities = 1;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >&
      _internal_entities() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >*
      _internal_mutable_entities();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >&
      entities() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >*
      mutable_entities();

  // map<string, .esriPBuffer.graph.NamedObjectUpdates> relationships = 2;
  int relationships_size() const;
  private:
  int _internal_relationships_size() const;
  public:
  void clear_relationships();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >&
      _internal_relationships() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >*
      _internal_mutable_relationships();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >&
      relationships() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >*
      mutable_relationships();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.Updates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      Updates_EntitiesEntry_DoNotUse,
      std::string, ::esriPBuffer::graph::NamedObjectUpdates,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > entities_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      Updates_RelationshipsEntry_DoNotUse,
      std::string, ::esriPBuffer::graph::NamedObjectUpdates,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > relationships_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
};
// -------------------------------------------------------------------

class Deletes_DeletedEntityIdsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Deletes_DeletedEntityIdsEntry_DoNotUse, 
    std::string, ::esriPBuffer::ObjectIdentifierSet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Deletes_DeletedEntityIdsEntry_DoNotUse, 
    std::string, ::esriPBuffer::ObjectIdentifierSet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Deletes_DeletedEntityIdsEntry_DoNotUse();
  explicit Deletes_DeletedEntityIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Deletes_DeletedEntityIdsEntry_DoNotUse& other);
  static const Deletes_DeletedEntityIdsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Deletes_DeletedEntityIdsEntry_DoNotUse*>(&_Deletes_DeletedEntityIdsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "esriPBuffer.graph.Deletes.DeletedEntityIdsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class Deletes_DeletedRelationshipIdsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Deletes_DeletedRelationshipIdsEntry_DoNotUse, 
    std::string, ::esriPBuffer::ObjectIdentifierSet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<Deletes_DeletedRelationshipIdsEntry_DoNotUse, 
    std::string, ::esriPBuffer::ObjectIdentifierSet,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Deletes_DeletedRelationshipIdsEntry_DoNotUse();
  explicit Deletes_DeletedRelationshipIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Deletes_DeletedRelationshipIdsEntry_DoNotUse& other);
  static const Deletes_DeletedRelationshipIdsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Deletes_DeletedRelationshipIdsEntry_DoNotUse*>(&_Deletes_DeletedRelationshipIdsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "esriPBuffer.graph.Deletes.DeletedRelationshipIdsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class Deletes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.Deletes) */ {
 public:
  inline Deletes() : Deletes(nullptr) {}
  virtual ~Deletes();

  Deletes(const Deletes& from);
  Deletes(Deletes&& from) noexcept
    : Deletes() {
    *this = ::std::move(from);
  }

  inline Deletes& operator=(const Deletes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Deletes& operator=(Deletes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Deletes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Deletes* internal_default_instance() {
    return reinterpret_cast<const Deletes*>(
               &_Deletes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Deletes& a, Deletes& b) {
    a.Swap(&b);
  }
  inline void Swap(Deletes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Deletes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Deletes* New() const final {
    return CreateMaybeMessage<Deletes>(nullptr);
  }

  Deletes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Deletes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Deletes& from);
  void MergeFrom(const Deletes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Deletes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.Deletes";
  }
  protected:
  explicit Deletes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDeletedEntityIdsFieldNumber = 1,
    kDeletedRelationshipIdsFieldNumber = 2,
  };
  // map<string, .esriPBuffer.ObjectIdentifierSet> deleted_entity_ids = 1;
  int deleted_entity_ids_size() const;
  private:
  int _internal_deleted_entity_ids_size() const;
  public:
  void clear_deleted_entity_ids();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >&
      _internal_deleted_entity_ids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >*
      _internal_mutable_deleted_entity_ids();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >&
      deleted_entity_ids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >*
      mutable_deleted_entity_ids();

  // map<string, .esriPBuffer.ObjectIdentifierSet> deleted_relationship_ids = 2;
  int deleted_relationship_ids_size() const;
  private:
  int _internal_deleted_relationship_ids_size() const;
  public:
  void clear_deleted_relationship_ids();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >&
      _internal_deleted_relationship_ids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >*
      _internal_mutable_deleted_relationship_ids();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >&
      deleted_relationship_ids() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >*
      mutable_deleted_relationship_ids();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.Deletes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      Deletes_DeletedEntityIdsEntry_DoNotUse,
      std::string, ::esriPBuffer::ObjectIdentifierSet,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > deleted_entity_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      Deletes_DeletedRelationshipIdsEntry_DoNotUse,
      std::string, ::esriPBuffer::ObjectIdentifierSet,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > deleted_relationship_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
};
// -------------------------------------------------------------------

class GraphApplyEditsHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphApplyEditsHeader) */ {
 public:
  inline GraphApplyEditsHeader() : GraphApplyEditsHeader(nullptr) {}
  virtual ~GraphApplyEditsHeader();

  GraphApplyEditsHeader(const GraphApplyEditsHeader& from);
  GraphApplyEditsHeader(GraphApplyEditsHeader&& from) noexcept
    : GraphApplyEditsHeader() {
    *this = ::std::move(from);
  }

  inline GraphApplyEditsHeader& operator=(const GraphApplyEditsHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphApplyEditsHeader& operator=(GraphApplyEditsHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphApplyEditsHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphApplyEditsHeader* internal_default_instance() {
    return reinterpret_cast<const GraphApplyEditsHeader*>(
               &_GraphApplyEditsHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GraphApplyEditsHeader& a, GraphApplyEditsHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphApplyEditsHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphApplyEditsHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphApplyEditsHeader* New() const final {
    return CreateMaybeMessage<GraphApplyEditsHeader>(nullptr);
  }

  GraphApplyEditsHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphApplyEditsHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphApplyEditsHeader& from);
  void MergeFrom(const GraphApplyEditsHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphApplyEditsHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphApplyEditsHeader";
  }
  protected:
  explicit GraphApplyEditsHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpatialReferenceFieldNumber = 1,
    kInputTransformFieldNumber = 4,
    kUseGlobalIDsFieldNumber = 2,
    kCascadeDeleteFieldNumber = 3,
  };
  // .esriPBuffer.EsriTypes.SpatialReference spatialReference = 1;
  bool has_spatialreference() const;
  private:
  bool _internal_has_spatialreference() const;
  public:
  void clear_spatialreference();
  const ::esriPBuffer::EsriTypes_SpatialReference& spatialreference() const;
  ::esriPBuffer::EsriTypes_SpatialReference* release_spatialreference();
  ::esriPBuffer::EsriTypes_SpatialReference* mutable_spatialreference();
  void set_allocated_spatialreference(::esriPBuffer::EsriTypes_SpatialReference* spatialreference);
  private:
  const ::esriPBuffer::EsriTypes_SpatialReference& _internal_spatialreference() const;
  ::esriPBuffer::EsriTypes_SpatialReference* _internal_mutable_spatialreference();
  public:
  void unsafe_arena_set_allocated_spatialreference(
      ::esriPBuffer::EsriTypes_SpatialReference* spatialreference);
  ::esriPBuffer::EsriTypes_SpatialReference* unsafe_arena_release_spatialreference();

  // .esriPBuffer.graph.Transform input_transform = 4;
  bool has_input_transform() const;
  private:
  bool _internal_has_input_transform() const;
  public:
  void clear_input_transform();
  const ::esriPBuffer::graph::Transform& input_transform() const;
  ::esriPBuffer::graph::Transform* release_input_transform();
  ::esriPBuffer::graph::Transform* mutable_input_transform();
  void set_allocated_input_transform(::esriPBuffer::graph::Transform* input_transform);
  private:
  const ::esriPBuffer::graph::Transform& _internal_input_transform() const;
  ::esriPBuffer::graph::Transform* _internal_mutable_input_transform();
  public:
  void unsafe_arena_set_allocated_input_transform(
      ::esriPBuffer::graph::Transform* input_transform);
  ::esriPBuffer::graph::Transform* unsafe_arena_release_input_transform();

  // bool useGlobalIDs = 2;
  void clear_useglobalids();
  bool useglobalids() const;
  void set_useglobalids(bool value);
  private:
  bool _internal_useglobalids() const;
  void _internal_set_useglobalids(bool value);
  public:

  // bool cascade_delete = 3;
  void clear_cascade_delete();
  bool cascade_delete() const;
  void set_cascade_delete(bool value);
  private:
  bool _internal_cascade_delete() const;
  void _internal_set_cascade_delete(bool value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphApplyEditsHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::esriPBuffer::EsriTypes_SpatialReference* spatialreference_;
  ::esriPBuffer::graph::Transform* input_transform_;
  bool useglobalids_;
  bool cascade_delete_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
};
// -------------------------------------------------------------------

class GraphApplyEditsFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphApplyEditsFrame) */ {
 public:
  inline GraphApplyEditsFrame() : GraphApplyEditsFrame(nullptr) {}
  virtual ~GraphApplyEditsFrame();

  GraphApplyEditsFrame(const GraphApplyEditsFrame& from);
  GraphApplyEditsFrame(GraphApplyEditsFrame&& from) noexcept
    : GraphApplyEditsFrame() {
    *this = ::std::move(from);
  }

  inline GraphApplyEditsFrame& operator=(const GraphApplyEditsFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphApplyEditsFrame& operator=(GraphApplyEditsFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphApplyEditsFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphApplyEditsFrame* internal_default_instance() {
    return reinterpret_cast<const GraphApplyEditsFrame*>(
               &_GraphApplyEditsFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GraphApplyEditsFrame& a, GraphApplyEditsFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphApplyEditsFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphApplyEditsFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphApplyEditsFrame* New() const final {
    return CreateMaybeMessage<GraphApplyEditsFrame>(nullptr);
  }

  GraphApplyEditsFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphApplyEditsFrame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphApplyEditsFrame& from);
  void MergeFrom(const GraphApplyEditsFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphApplyEditsFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphApplyEditsFrame";
  }
  protected:
  explicit GraphApplyEditsFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddsFieldNumber = 1,
    kUpdatesFieldNumber = 2,
    kDeletesFieldNumber = 3,
  };
  // .esriPBuffer.graph.Adds adds = 1;
  bool has_adds() const;
  private:
  bool _internal_has_adds() const;
  public:
  void clear_adds();
  const ::esriPBuffer::graph::Adds& adds() const;
  ::esriPBuffer::graph::Adds* release_adds();
  ::esriPBuffer::graph::Adds* mutable_adds();
  void set_allocated_adds(::esriPBuffer::graph::Adds* adds);
  private:
  const ::esriPBuffer::graph::Adds& _internal_adds() const;
  ::esriPBuffer::graph::Adds* _internal_mutable_adds();
  public:
  void unsafe_arena_set_allocated_adds(
      ::esriPBuffer::graph::Adds* adds);
  ::esriPBuffer::graph::Adds* unsafe_arena_release_adds();

  // .esriPBuffer.graph.Updates updates = 2;
  bool has_updates() const;
  private:
  bool _internal_has_updates() const;
  public:
  void clear_updates();
  const ::esriPBuffer::graph::Updates& updates() const;
  ::esriPBuffer::graph::Updates* release_updates();
  ::esriPBuffer::graph::Updates* mutable_updates();
  void set_allocated_updates(::esriPBuffer::graph::Updates* updates);
  private:
  const ::esriPBuffer::graph::Updates& _internal_updates() const;
  ::esriPBuffer::graph::Updates* _internal_mutable_updates();
  public:
  void unsafe_arena_set_allocated_updates(
      ::esriPBuffer::graph::Updates* updates);
  ::esriPBuffer::graph::Updates* unsafe_arena_release_updates();

  // .esriPBuffer.graph.Deletes deletes = 3;
  bool has_deletes() const;
  private:
  bool _internal_has_deletes() const;
  public:
  void clear_deletes();
  const ::esriPBuffer::graph::Deletes& deletes() const;
  ::esriPBuffer::graph::Deletes* release_deletes();
  ::esriPBuffer::graph::Deletes* mutable_deletes();
  void set_allocated_deletes(::esriPBuffer::graph::Deletes* deletes);
  private:
  const ::esriPBuffer::graph::Deletes& _internal_deletes() const;
  ::esriPBuffer::graph::Deletes* _internal_mutable_deletes();
  public:
  void unsafe_arena_set_allocated_deletes(
      ::esriPBuffer::graph::Deletes* deletes);
  ::esriPBuffer::graph::Deletes* unsafe_arena_release_deletes();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphApplyEditsFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::esriPBuffer::graph::Adds* adds_;
  ::esriPBuffer::graph::Updates* updates_;
  ::esriPBuffer::graph::Deletes* deletes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NamedObjectAdd

// map<string, .esriPBuffer.graph.AnyValue> properties = 1;
inline int NamedObjectAdd::_internal_properties_size() const {
  return properties_.size();
}
inline int NamedObjectAdd::properties_size() const {
  return _internal_properties_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
NamedObjectAdd::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
NamedObjectAdd::properties() const {
  // @@protoc_insertion_point(field_map:esriPBuffer.graph.NamedObjectAdd.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
NamedObjectAdd::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
NamedObjectAdd::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:esriPBuffer.graph.NamedObjectAdd.properties)
  return _internal_mutable_properties();
}

// -------------------------------------------------------------------

// NamedObjectAdds

// repeated .esriPBuffer.graph.NamedObjectAdd namedObjectAdds = 1;
inline int NamedObjectAdds::_internal_namedobjectadds_size() const {
  return namedobjectadds_.size();
}
inline int NamedObjectAdds::namedobjectadds_size() const {
  return _internal_namedobjectadds_size();
}
inline void NamedObjectAdds::clear_namedobjectadds() {
  namedobjectadds_.Clear();
}
inline ::esriPBuffer::graph::NamedObjectAdd* NamedObjectAdds::mutable_namedobjectadds(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.NamedObjectAdds.namedObjectAdds)
  return namedobjectadds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::NamedObjectAdd >*
NamedObjectAdds::mutable_namedobjectadds() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.NamedObjectAdds.namedObjectAdds)
  return &namedobjectadds_;
}
inline const ::esriPBuffer::graph::NamedObjectAdd& NamedObjectAdds::_internal_namedobjectadds(int index) const {
  return namedobjectadds_.Get(index);
}
inline const ::esriPBuffer::graph::NamedObjectAdd& NamedObjectAdds::namedobjectadds(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.NamedObjectAdds.namedObjectAdds)
  return _internal_namedobjectadds(index);
}
inline ::esriPBuffer::graph::NamedObjectAdd* NamedObjectAdds::_internal_add_namedobjectadds() {
  return namedobjectadds_.Add();
}
inline ::esriPBuffer::graph::NamedObjectAdd* NamedObjectAdds::add_namedobjectadds() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.NamedObjectAdds.namedObjectAdds)
  return _internal_add_namedobjectadds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::NamedObjectAdd >&
NamedObjectAdds::namedobjectadds() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.NamedObjectAdds.namedObjectAdds)
  return namedobjectadds_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Adds

// map<string, .esriPBuffer.graph.NamedObjectAdds> entities = 1;
inline int Adds::_internal_entities_size() const {
  return entities_.size();
}
inline int Adds::entities_size() const {
  return _internal_entities_size();
}
inline void Adds::clear_entities() {
  entities_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >&
Adds::_internal_entities() const {
  return entities_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >&
Adds::entities() const {
  // @@protoc_insertion_point(field_map:esriPBuffer.graph.Adds.entities)
  return _internal_entities();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >*
Adds::_internal_mutable_entities() {
  return entities_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >*
Adds::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_map:esriPBuffer.graph.Adds.entities)
  return _internal_mutable_entities();
}

// map<string, .esriPBuffer.graph.NamedObjectAdds> relationships = 2;
inline int Adds::_internal_relationships_size() const {
  return relationships_.size();
}
inline int Adds::relationships_size() const {
  return _internal_relationships_size();
}
inline void Adds::clear_relationships() {
  relationships_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >&
Adds::_internal_relationships() const {
  return relationships_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >&
Adds::relationships() const {
  // @@protoc_insertion_point(field_map:esriPBuffer.graph.Adds.relationships)
  return _internal_relationships();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >*
Adds::_internal_mutable_relationships() {
  return relationships_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >*
Adds::mutable_relationships() {
  // @@protoc_insertion_point(field_mutable_map:esriPBuffer.graph.Adds.relationships)
  return _internal_mutable_relationships();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NamedObjectUpdate

// sint64 oid = 1;
inline bool NamedObjectUpdate::_internal_has_oid() const {
  return id_case() == kOid;
}
inline void NamedObjectUpdate::set_has_oid() {
  _oneof_case_[0] = kOid;
}
inline void NamedObjectUpdate::clear_oid() {
  if (_internal_has_oid()) {
    id_.oid_ = PROTOBUF_LONGLONG(0);
    clear_has_id();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NamedObjectUpdate::_internal_oid() const {
  if (_internal_has_oid()) {
    return id_.oid_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void NamedObjectUpdate::_internal_set_oid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_oid()) {
    clear_id();
    set_has_oid();
  }
  id_.oid_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NamedObjectUpdate::oid() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.NamedObjectUpdate.oid)
  return _internal_oid();
}
inline void NamedObjectUpdate::set_oid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_oid(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.NamedObjectUpdate.oid)
}

// bytes globalid = 2;
inline bool NamedObjectUpdate::_internal_has_globalid() const {
  return id_case() == kGlobalid;
}
inline void NamedObjectUpdate::set_has_globalid() {
  _oneof_case_[0] = kGlobalid;
}
inline void NamedObjectUpdate::clear_globalid() {
  if (_internal_has_globalid()) {
    id_.globalid_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& NamedObjectUpdate::globalid() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.NamedObjectUpdate.globalid)
  return _internal_globalid();
}
inline void NamedObjectUpdate::set_globalid(const std::string& value) {
  _internal_set_globalid(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.NamedObjectUpdate.globalid)
}
inline std::string* NamedObjectUpdate::mutable_globalid() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.NamedObjectUpdate.globalid)
  return _internal_mutable_globalid();
}
inline const std::string& NamedObjectUpdate::_internal_globalid() const {
  if (_internal_has_globalid()) {
    return id_.globalid_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void NamedObjectUpdate::_internal_set_globalid(const std::string& value) {
  if (!_internal_has_globalid()) {
    clear_id();
    set_has_globalid();
    id_.globalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.globalid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NamedObjectUpdate::set_globalid(std::string&& value) {
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.NamedObjectUpdate.globalid)
  if (!_internal_has_globalid()) {
    clear_id();
    set_has_globalid();
    id_.globalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.globalid_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.NamedObjectUpdate.globalid)
}
inline void NamedObjectUpdate::set_globalid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_globalid()) {
    clear_id();
    set_has_globalid();
    id_.globalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.globalid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.NamedObjectUpdate.globalid)
}
inline void NamedObjectUpdate::set_globalid(const void* value,
                             size_t size) {
  if (!_internal_has_globalid()) {
    clear_id();
    set_has_globalid();
    id_.globalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.globalid_.SetLite(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.NamedObjectUpdate.globalid)
}
inline std::string* NamedObjectUpdate::_internal_mutable_globalid() {
  if (!_internal_has_globalid()) {
    clear_id();
    set_has_globalid();
    id_.globalid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.globalid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NamedObjectUpdate::release_globalid() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.NamedObjectUpdate.globalid)
  if (_internal_has_globalid()) {
    clear_has_id();
    return id_.globalid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void NamedObjectUpdate::set_allocated_globalid(std::string* globalid) {
  if (has_id()) {
    clear_id();
  }
  if (globalid != nullptr) {
    set_has_globalid();
    id_.globalid_.UnsafeSetDefault(globalid);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(globalid);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.NamedObjectUpdate.globalid)
}

// map<string, .esriPBuffer.graph.AnyValue> properties = 3;
inline int NamedObjectUpdate::_internal_properties_size() const {
  return properties_.size();
}
inline int NamedObjectUpdate::properties_size() const {
  return _internal_properties_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
NamedObjectUpdate::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
NamedObjectUpdate::properties() const {
  // @@protoc_insertion_point(field_map:esriPBuffer.graph.NamedObjectUpdate.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
NamedObjectUpdate::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
NamedObjectUpdate::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:esriPBuffer.graph.NamedObjectUpdate.properties)
  return _internal_mutable_properties();
}

inline bool NamedObjectUpdate::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void NamedObjectUpdate::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline NamedObjectUpdate::IdCase NamedObjectUpdate::id_case() const {
  return NamedObjectUpdate::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NamedObjectUpdates

// repeated .esriPBuffer.graph.NamedObjectUpdate namedObjectUpdates = 1;
inline int NamedObjectUpdates::_internal_namedobjectupdates_size() const {
  return namedobjectupdates_.size();
}
inline int NamedObjectUpdates::namedobjectupdates_size() const {
  return _internal_namedobjectupdates_size();
}
inline void NamedObjectUpdates::clear_namedobjectupdates() {
  namedobjectupdates_.Clear();
}
inline ::esriPBuffer::graph::NamedObjectUpdate* NamedObjectUpdates::mutable_namedobjectupdates(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.NamedObjectUpdates.namedObjectUpdates)
  return namedobjectupdates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::NamedObjectUpdate >*
NamedObjectUpdates::mutable_namedobjectupdates() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.NamedObjectUpdates.namedObjectUpdates)
  return &namedobjectupdates_;
}
inline const ::esriPBuffer::graph::NamedObjectUpdate& NamedObjectUpdates::_internal_namedobjectupdates(int index) const {
  return namedobjectupdates_.Get(index);
}
inline const ::esriPBuffer::graph::NamedObjectUpdate& NamedObjectUpdates::namedobjectupdates(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.NamedObjectUpdates.namedObjectUpdates)
  return _internal_namedobjectupdates(index);
}
inline ::esriPBuffer::graph::NamedObjectUpdate* NamedObjectUpdates::_internal_add_namedobjectupdates() {
  return namedobjectupdates_.Add();
}
inline ::esriPBuffer::graph::NamedObjectUpdate* NamedObjectUpdates::add_namedobjectupdates() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.NamedObjectUpdates.namedObjectUpdates)
  return _internal_add_namedobjectupdates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::NamedObjectUpdate >&
NamedObjectUpdates::namedobjectupdates() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.NamedObjectUpdates.namedObjectUpdates)
  return namedobjectupdates_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Updates

// map<string, .esriPBuffer.graph.NamedObjectUpdates> entities = 1;
inline int Updates::_internal_entities_size() const {
  return entities_.size();
}
inline int Updates::entities_size() const {
  return _internal_entities_size();
}
inline void Updates::clear_entities() {
  entities_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >&
Updates::_internal_entities() const {
  return entities_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >&
Updates::entities() const {
  // @@protoc_insertion_point(field_map:esriPBuffer.graph.Updates.entities)
  return _internal_entities();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >*
Updates::_internal_mutable_entities() {
  return entities_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >*
Updates::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_map:esriPBuffer.graph.Updates.entities)
  return _internal_mutable_entities();
}

// map<string, .esriPBuffer.graph.NamedObjectUpdates> relationships = 2;
inline int Updates::_internal_relationships_size() const {
  return relationships_.size();
}
inline int Updates::relationships_size() const {
  return _internal_relationships_size();
}
inline void Updates::clear_relationships() {
  relationships_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >&
Updates::_internal_relationships() const {
  return relationships_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >&
Updates::relationships() const {
  // @@protoc_insertion_point(field_map:esriPBuffer.graph.Updates.relationships)
  return _internal_relationships();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >*
Updates::_internal_mutable_relationships() {
  return relationships_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >*
Updates::mutable_relationships() {
  // @@protoc_insertion_point(field_mutable_map:esriPBuffer.graph.Updates.relationships)
  return _internal_mutable_relationships();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Deletes

// map<string, .esriPBuffer.ObjectIdentifierSet> deleted_entity_ids = 1;
inline int Deletes::_internal_deleted_entity_ids_size() const {
  return deleted_entity_ids_.size();
}
inline int Deletes::deleted_entity_ids_size() const {
  return _internal_deleted_entity_ids_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >&
Deletes::_internal_deleted_entity_ids() const {
  return deleted_entity_ids_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >&
Deletes::deleted_entity_ids() const {
  // @@protoc_insertion_point(field_map:esriPBuffer.graph.Deletes.deleted_entity_ids)
  return _internal_deleted_entity_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >*
Deletes::_internal_mutable_deleted_entity_ids() {
  return deleted_entity_ids_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >*
Deletes::mutable_deleted_entity_ids() {
  // @@protoc_insertion_point(field_mutable_map:esriPBuffer.graph.Deletes.deleted_entity_ids)
  return _internal_mutable_deleted_entity_ids();
}

// map<string, .esriPBuffer.ObjectIdentifierSet> deleted_relationship_ids = 2;
inline int Deletes::_internal_deleted_relationship_ids_size() const {
  return deleted_relationship_ids_.size();
}
inline int Deletes::deleted_relationship_ids_size() const {
  return _internal_deleted_relationship_ids_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >&
Deletes::_internal_deleted_relationship_ids() const {
  return deleted_relationship_ids_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >&
Deletes::deleted_relationship_ids() const {
  // @@protoc_insertion_point(field_map:esriPBuffer.graph.Deletes.deleted_relationship_ids)
  return _internal_deleted_relationship_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >*
Deletes::_internal_mutable_deleted_relationship_ids() {
  return deleted_relationship_ids_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >*
Deletes::mutable_deleted_relationship_ids() {
  // @@protoc_insertion_point(field_mutable_map:esriPBuffer.graph.Deletes.deleted_relationship_ids)
  return _internal_mutable_deleted_relationship_ids();
}

// -------------------------------------------------------------------

// GraphApplyEditsHeader

// .esriPBuffer.EsriTypes.SpatialReference spatialReference = 1;
inline bool GraphApplyEditsHeader::_internal_has_spatialreference() const {
  return this != internal_default_instance() && spatialreference_ != nullptr;
}
inline bool GraphApplyEditsHeader::has_spatialreference() const {
  return _internal_has_spatialreference();
}
inline const ::esriPBuffer::EsriTypes_SpatialReference& GraphApplyEditsHeader::_internal_spatialreference() const {
  const ::esriPBuffer::EsriTypes_SpatialReference* p = spatialreference_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_SpatialReference*>(
      &::esriPBuffer::_EsriTypes_SpatialReference_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_SpatialReference& GraphApplyEditsHeader::spatialreference() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphApplyEditsHeader.spatialReference)
  return _internal_spatialreference();
}
inline void GraphApplyEditsHeader::unsafe_arena_set_allocated_spatialreference(
    ::esriPBuffer::EsriTypes_SpatialReference* spatialreference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatialreference_);
  }
  spatialreference_ = spatialreference;
  if (spatialreference) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphApplyEditsHeader.spatialReference)
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphApplyEditsHeader::release_spatialreference() {
  
  ::esriPBuffer::EsriTypes_SpatialReference* temp = spatialreference_;
  spatialreference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphApplyEditsHeader::unsafe_arena_release_spatialreference() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphApplyEditsHeader.spatialReference)
  
  ::esriPBuffer::EsriTypes_SpatialReference* temp = spatialreference_;
  spatialreference_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphApplyEditsHeader::_internal_mutable_spatialreference() {
  
  if (spatialreference_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_SpatialReference>(GetArena());
    spatialreference_ = p;
  }
  return spatialreference_;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphApplyEditsHeader::mutable_spatialreference() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphApplyEditsHeader.spatialReference)
  return _internal_mutable_spatialreference();
}
inline void GraphApplyEditsHeader::set_allocated_spatialreference(::esriPBuffer::EsriTypes_SpatialReference* spatialreference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatialreference_);
  }
  if (spatialreference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatialreference)->GetArena();
    if (message_arena != submessage_arena) {
      spatialreference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spatialreference, submessage_arena);
    }
    
  } else {
    
  }
  spatialreference_ = spatialreference;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphApplyEditsHeader.spatialReference)
}

// bool useGlobalIDs = 2;
inline void GraphApplyEditsHeader::clear_useglobalids() {
  useglobalids_ = false;
}
inline bool GraphApplyEditsHeader::_internal_useglobalids() const {
  return useglobalids_;
}
inline bool GraphApplyEditsHeader::useglobalids() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphApplyEditsHeader.useGlobalIDs)
  return _internal_useglobalids();
}
inline void GraphApplyEditsHeader::_internal_set_useglobalids(bool value) {
  
  useglobalids_ = value;
}
inline void GraphApplyEditsHeader::set_useglobalids(bool value) {
  _internal_set_useglobalids(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphApplyEditsHeader.useGlobalIDs)
}

// bool cascade_delete = 3;
inline void GraphApplyEditsHeader::clear_cascade_delete() {
  cascade_delete_ = false;
}
inline bool GraphApplyEditsHeader::_internal_cascade_delete() const {
  return cascade_delete_;
}
inline bool GraphApplyEditsHeader::cascade_delete() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphApplyEditsHeader.cascade_delete)
  return _internal_cascade_delete();
}
inline void GraphApplyEditsHeader::_internal_set_cascade_delete(bool value) {
  
  cascade_delete_ = value;
}
inline void GraphApplyEditsHeader::set_cascade_delete(bool value) {
  _internal_set_cascade_delete(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphApplyEditsHeader.cascade_delete)
}

// .esriPBuffer.graph.Transform input_transform = 4;
inline bool GraphApplyEditsHeader::_internal_has_input_transform() const {
  return this != internal_default_instance() && input_transform_ != nullptr;
}
inline bool GraphApplyEditsHeader::has_input_transform() const {
  return _internal_has_input_transform();
}
inline const ::esriPBuffer::graph::Transform& GraphApplyEditsHeader::_internal_input_transform() const {
  const ::esriPBuffer::graph::Transform* p = input_transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::Transform*>(
      &::esriPBuffer::graph::_Transform_default_instance_);
}
inline const ::esriPBuffer::graph::Transform& GraphApplyEditsHeader::input_transform() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphApplyEditsHeader.input_transform)
  return _internal_input_transform();
}
inline void GraphApplyEditsHeader::unsafe_arena_set_allocated_input_transform(
    ::esriPBuffer::graph::Transform* input_transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_transform_);
  }
  input_transform_ = input_transform;
  if (input_transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphApplyEditsHeader.input_transform)
}
inline ::esriPBuffer::graph::Transform* GraphApplyEditsHeader::release_input_transform() {
  
  ::esriPBuffer::graph::Transform* temp = input_transform_;
  input_transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::Transform* GraphApplyEditsHeader::unsafe_arena_release_input_transform() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphApplyEditsHeader.input_transform)
  
  ::esriPBuffer::graph::Transform* temp = input_transform_;
  input_transform_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::Transform* GraphApplyEditsHeader::_internal_mutable_input_transform() {
  
  if (input_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::Transform>(GetArena());
    input_transform_ = p;
  }
  return input_transform_;
}
inline ::esriPBuffer::graph::Transform* GraphApplyEditsHeader::mutable_input_transform() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphApplyEditsHeader.input_transform)
  return _internal_mutable_input_transform();
}
inline void GraphApplyEditsHeader::set_allocated_input_transform(::esriPBuffer::graph::Transform* input_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_transform_);
  }
  if (input_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_transform)->GetArena();
    if (message_arena != submessage_arena) {
      input_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_transform, submessage_arena);
    }
    
  } else {
    
  }
  input_transform_ = input_transform;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphApplyEditsHeader.input_transform)
}

// -------------------------------------------------------------------

// GraphApplyEditsFrame

// .esriPBuffer.graph.Adds adds = 1;
inline bool GraphApplyEditsFrame::_internal_has_adds() const {
  return this != internal_default_instance() && adds_ != nullptr;
}
inline bool GraphApplyEditsFrame::has_adds() const {
  return _internal_has_adds();
}
inline void GraphApplyEditsFrame::clear_adds() {
  if (GetArena() == nullptr && adds_ != nullptr) {
    delete adds_;
  }
  adds_ = nullptr;
}
inline const ::esriPBuffer::graph::Adds& GraphApplyEditsFrame::_internal_adds() const {
  const ::esriPBuffer::graph::Adds* p = adds_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::Adds*>(
      &::esriPBuffer::graph::_Adds_default_instance_);
}
inline const ::esriPBuffer::graph::Adds& GraphApplyEditsFrame::adds() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphApplyEditsFrame.adds)
  return _internal_adds();
}
inline void GraphApplyEditsFrame::unsafe_arena_set_allocated_adds(
    ::esriPBuffer::graph::Adds* adds) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adds_);
  }
  adds_ = adds;
  if (adds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphApplyEditsFrame.adds)
}
inline ::esriPBuffer::graph::Adds* GraphApplyEditsFrame::release_adds() {
  
  ::esriPBuffer::graph::Adds* temp = adds_;
  adds_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::Adds* GraphApplyEditsFrame::unsafe_arena_release_adds() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphApplyEditsFrame.adds)
  
  ::esriPBuffer::graph::Adds* temp = adds_;
  adds_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::Adds* GraphApplyEditsFrame::_internal_mutable_adds() {
  
  if (adds_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::Adds>(GetArena());
    adds_ = p;
  }
  return adds_;
}
inline ::esriPBuffer::graph::Adds* GraphApplyEditsFrame::mutable_adds() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphApplyEditsFrame.adds)
  return _internal_mutable_adds();
}
inline void GraphApplyEditsFrame::set_allocated_adds(::esriPBuffer::graph::Adds* adds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete adds_;
  }
  if (adds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(adds);
    if (message_arena != submessage_arena) {
      adds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adds, submessage_arena);
    }
    
  } else {
    
  }
  adds_ = adds;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphApplyEditsFrame.adds)
}

// .esriPBuffer.graph.Updates updates = 2;
inline bool GraphApplyEditsFrame::_internal_has_updates() const {
  return this != internal_default_instance() && updates_ != nullptr;
}
inline bool GraphApplyEditsFrame::has_updates() const {
  return _internal_has_updates();
}
inline void GraphApplyEditsFrame::clear_updates() {
  if (GetArena() == nullptr && updates_ != nullptr) {
    delete updates_;
  }
  updates_ = nullptr;
}
inline const ::esriPBuffer::graph::Updates& GraphApplyEditsFrame::_internal_updates() const {
  const ::esriPBuffer::graph::Updates* p = updates_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::Updates*>(
      &::esriPBuffer::graph::_Updates_default_instance_);
}
inline const ::esriPBuffer::graph::Updates& GraphApplyEditsFrame::updates() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphApplyEditsFrame.updates)
  return _internal_updates();
}
inline void GraphApplyEditsFrame::unsafe_arena_set_allocated_updates(
    ::esriPBuffer::graph::Updates* updates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updates_);
  }
  updates_ = updates;
  if (updates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphApplyEditsFrame.updates)
}
inline ::esriPBuffer::graph::Updates* GraphApplyEditsFrame::release_updates() {
  
  ::esriPBuffer::graph::Updates* temp = updates_;
  updates_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::Updates* GraphApplyEditsFrame::unsafe_arena_release_updates() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphApplyEditsFrame.updates)
  
  ::esriPBuffer::graph::Updates* temp = updates_;
  updates_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::Updates* GraphApplyEditsFrame::_internal_mutable_updates() {
  
  if (updates_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::Updates>(GetArena());
    updates_ = p;
  }
  return updates_;
}
inline ::esriPBuffer::graph::Updates* GraphApplyEditsFrame::mutable_updates() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphApplyEditsFrame.updates)
  return _internal_mutable_updates();
}
inline void GraphApplyEditsFrame::set_allocated_updates(::esriPBuffer::graph::Updates* updates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updates_;
  }
  if (updates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updates);
    if (message_arena != submessage_arena) {
      updates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updates, submessage_arena);
    }
    
  } else {
    
  }
  updates_ = updates;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphApplyEditsFrame.updates)
}

// .esriPBuffer.graph.Deletes deletes = 3;
inline bool GraphApplyEditsFrame::_internal_has_deletes() const {
  return this != internal_default_instance() && deletes_ != nullptr;
}
inline bool GraphApplyEditsFrame::has_deletes() const {
  return _internal_has_deletes();
}
inline void GraphApplyEditsFrame::clear_deletes() {
  if (GetArena() == nullptr && deletes_ != nullptr) {
    delete deletes_;
  }
  deletes_ = nullptr;
}
inline const ::esriPBuffer::graph::Deletes& GraphApplyEditsFrame::_internal_deletes() const {
  const ::esriPBuffer::graph::Deletes* p = deletes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::Deletes*>(
      &::esriPBuffer::graph::_Deletes_default_instance_);
}
inline const ::esriPBuffer::graph::Deletes& GraphApplyEditsFrame::deletes() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphApplyEditsFrame.deletes)
  return _internal_deletes();
}
inline void GraphApplyEditsFrame::unsafe_arena_set_allocated_deletes(
    ::esriPBuffer::graph::Deletes* deletes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deletes_);
  }
  deletes_ = deletes;
  if (deletes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphApplyEditsFrame.deletes)
}
inline ::esriPBuffer::graph::Deletes* GraphApplyEditsFrame::release_deletes() {
  
  ::esriPBuffer::graph::Deletes* temp = deletes_;
  deletes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::Deletes* GraphApplyEditsFrame::unsafe_arena_release_deletes() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphApplyEditsFrame.deletes)
  
  ::esriPBuffer::graph::Deletes* temp = deletes_;
  deletes_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::Deletes* GraphApplyEditsFrame::_internal_mutable_deletes() {
  
  if (deletes_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::Deletes>(GetArena());
    deletes_ = p;
  }
  return deletes_;
}
inline ::esriPBuffer::graph::Deletes* GraphApplyEditsFrame::mutable_deletes() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphApplyEditsFrame.deletes)
  return _internal_mutable_deletes();
}
inline void GraphApplyEditsFrame::set_allocated_deletes(::esriPBuffer::graph::Deletes* deletes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deletes_;
  }
  if (deletes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deletes);
    if (message_arena != submessage_arena) {
      deletes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deletes, submessage_arena);
    }
    
  } else {
    
  }
  deletes_ = deletes;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphApplyEditsFrame.deletes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace esriPBuffer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto
