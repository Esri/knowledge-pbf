// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/SearchQueryRequest.proto

#include "esriPBuffer/graph/SearchQueryRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fEsriTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EsriTypes_DatumTransformation_esriPBuffer_2fEsriTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fEsriTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EsriTypes_SpatialReference_esriPBuffer_2fEsriTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeometryValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuantizationParameters_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transform_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
namespace esriPBuffer {
namespace graph {
class GraphSearchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphSearchRequest> _instance;
} _GraphSearchRequest_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
static void InitDefaultsscc_info_GraphSearchRequest_esriPBuffer_2fgraph_2fSearchQueryRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphSearchRequest_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphSearchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GraphSearchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_GraphSearchRequest_esriPBuffer_2fgraph_2fSearchQueryRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_GraphSearchRequest_esriPBuffer_2fgraph_2fSearchQueryRequest_2eproto}, {
      &scc_info_GeometryValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,
      &scc_info_Transform_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,
      &scc_info_EsriTypes_SpatialReference_esriPBuffer_2fEsriTypes_2eproto.base,
      &scc_info_EsriTypes_DatumTransformation_esriPBuffer_2fEsriTypes_2eproto.base,
      &scc_info_QuantizationParameters_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,}};

namespace esriPBuffer {
namespace graph {
bool GraphSearchRequest_esriNamedTypeCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GraphSearchRequest_esriNamedTypeCategory_strings[4] = {};

static const char GraphSearchRequest_esriNamedTypeCategory_names[] =
  "esriTypeBoth"
  "esriTypeEntity"
  "esriTypeRelationship"
  "esriType_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GraphSearchRequest_esriNamedTypeCategory_entries[] = {
  { {GraphSearchRequest_esriNamedTypeCategory_names + 0, 12}, 3 },
  { {GraphSearchRequest_esriNamedTypeCategory_names + 12, 14}, 1 },
  { {GraphSearchRequest_esriNamedTypeCategory_names + 26, 20}, 2 },
  { {GraphSearchRequest_esriNamedTypeCategory_names + 46, 20}, 0 },
};

static const int GraphSearchRequest_esriNamedTypeCategory_entries_by_number[] = {
  3, // 0 -> esriType_UNSPECIFIED
  1, // 1 -> esriTypeEntity
  2, // 2 -> esriTypeRelationship
  0, // 3 -> esriTypeBoth
};

const std::string& GraphSearchRequest_esriNamedTypeCategory_Name(
    GraphSearchRequest_esriNamedTypeCategory value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GraphSearchRequest_esriNamedTypeCategory_entries,
          GraphSearchRequest_esriNamedTypeCategory_entries_by_number,
          4, GraphSearchRequest_esriNamedTypeCategory_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GraphSearchRequest_esriNamedTypeCategory_entries,
      GraphSearchRequest_esriNamedTypeCategory_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GraphSearchRequest_esriNamedTypeCategory_strings[idx].get();
}
bool GraphSearchRequest_esriNamedTypeCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GraphSearchRequest_esriNamedTypeCategory* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GraphSearchRequest_esriNamedTypeCategory_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<GraphSearchRequest_esriNamedTypeCategory>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GraphSearchRequest_esriNamedTypeCategory GraphSearchRequest::esriType_UNSPECIFIED;
constexpr GraphSearchRequest_esriNamedTypeCategory GraphSearchRequest::esriTypeEntity;
constexpr GraphSearchRequest_esriNamedTypeCategory GraphSearchRequest::esriTypeRelationship;
constexpr GraphSearchRequest_esriNamedTypeCategory GraphSearchRequest::esriTypeBoth;
constexpr GraphSearchRequest_esriNamedTypeCategory GraphSearchRequest::esriNamedTypeCategory_MIN;
constexpr GraphSearchRequest_esriNamedTypeCategory GraphSearchRequest::esriNamedTypeCategory_MAX;
constexpr int GraphSearchRequest::esriNamedTypeCategory_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GraphSearchRequest::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_GraphSearchRequest_default_instance_._instance.get_mutable()->spatial_filter_ = const_cast< ::esriPBuffer::graph::GeometryValue*>(
      ::esriPBuffer::graph::GeometryValue::internal_default_instance());
  ::esriPBuffer::graph::_GraphSearchRequest_default_instance_._instance.get_mutable()->input_transform_ = const_cast< ::esriPBuffer::graph::Transform*>(
      ::esriPBuffer::graph::Transform::internal_default_instance());
  ::esriPBuffer::graph::_GraphSearchRequest_default_instance_._instance.get_mutable()->input_spat_ref_ = const_cast< ::esriPBuffer::EsriTypes_SpatialReference*>(
      ::esriPBuffer::EsriTypes_SpatialReference::internal_default_instance());
  ::esriPBuffer::graph::_GraphSearchRequest_default_instance_._instance.get_mutable()->out_spat_ref_ = const_cast< ::esriPBuffer::EsriTypes_SpatialReference*>(
      ::esriPBuffer::EsriTypes_SpatialReference::internal_default_instance());
  ::esriPBuffer::graph::_GraphSearchRequest_default_instance_._instance.get_mutable()->datum_transform_ = const_cast< ::esriPBuffer::EsriTypes_DatumTransformation*>(
      ::esriPBuffer::EsriTypes_DatumTransformation::internal_default_instance());
  ::esriPBuffer::graph::_GraphSearchRequest_default_instance_._instance.get_mutable()->quantization_params_ = const_cast< ::esriPBuffer::graph::QuantizationParameters*>(
      ::esriPBuffer::graph::QuantizationParameters::internal_default_instance());
}
class GraphSearchRequest::_Internal {
 public:
  static const ::esriPBuffer::graph::GeometryValue& spatial_filter(const GraphSearchRequest* msg);
  static const ::esriPBuffer::graph::Transform& input_transform(const GraphSearchRequest* msg);
  static const ::esriPBuffer::EsriTypes_SpatialReference& input_spat_ref(const GraphSearchRequest* msg);
  static const ::esriPBuffer::EsriTypes_SpatialReference& out_spat_ref(const GraphSearchRequest* msg);
  static const ::esriPBuffer::EsriTypes_DatumTransformation& datum_transform(const GraphSearchRequest* msg);
  static const ::esriPBuffer::graph::QuantizationParameters& quantization_params(const GraphSearchRequest* msg);
};

const ::esriPBuffer::graph::GeometryValue&
GraphSearchRequest::_Internal::spatial_filter(const GraphSearchRequest* msg) {
  return *msg->spatial_filter_;
}
const ::esriPBuffer::graph::Transform&
GraphSearchRequest::_Internal::input_transform(const GraphSearchRequest* msg) {
  return *msg->input_transform_;
}
const ::esriPBuffer::EsriTypes_SpatialReference&
GraphSearchRequest::_Internal::input_spat_ref(const GraphSearchRequest* msg) {
  return *msg->input_spat_ref_;
}
const ::esriPBuffer::EsriTypes_SpatialReference&
GraphSearchRequest::_Internal::out_spat_ref(const GraphSearchRequest* msg) {
  return *msg->out_spat_ref_;
}
const ::esriPBuffer::EsriTypes_DatumTransformation&
GraphSearchRequest::_Internal::datum_transform(const GraphSearchRequest* msg) {
  return *msg->datum_transform_;
}
const ::esriPBuffer::graph::QuantizationParameters&
GraphSearchRequest::_Internal::quantization_params(const GraphSearchRequest* msg) {
  return *msg->quantization_params_;
}
void GraphSearchRequest::clear_spatial_filter() {
  if (GetArena() == nullptr && spatial_filter_ != nullptr) {
    delete spatial_filter_;
  }
  spatial_filter_ = nullptr;
}
void GraphSearchRequest::clear_input_transform() {
  if (GetArena() == nullptr && input_transform_ != nullptr) {
    delete input_transform_;
  }
  input_transform_ = nullptr;
}
void GraphSearchRequest::clear_input_spat_ref() {
  if (GetArena() == nullptr && input_spat_ref_ != nullptr) {
    delete input_spat_ref_;
  }
  input_spat_ref_ = nullptr;
}
void GraphSearchRequest::clear_out_spat_ref() {
  if (GetArena() == nullptr && out_spat_ref_ != nullptr) {
    delete out_spat_ref_;
  }
  out_spat_ref_ = nullptr;
}
void GraphSearchRequest::clear_datum_transform() {
  if (GetArena() == nullptr && datum_transform_ != nullptr) {
    delete datum_transform_;
  }
  datum_transform_ = nullptr;
}
void GraphSearchRequest::clear_quantization_params() {
  if (GetArena() == nullptr && quantization_params_ != nullptr) {
    delete quantization_params_;
  }
  quantization_params_ = nullptr;
}
GraphSearchRequest::GraphSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  named_type_filter_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GraphSearchRequest)
}
GraphSearchRequest::GraphSearchRequest(const GraphSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      named_type_filter_(from.named_type_filter_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  search_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_search_query().empty()) {
    search_query_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_search_query(),
      GetArena());
  }
  globalid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_globalid_array().empty()) {
    globalid_array_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_globalid_array(),
      GetArena());
  }
  if (from._internal_has_spatial_filter()) {
    spatial_filter_ = new ::esriPBuffer::graph::GeometryValue(*from.spatial_filter_);
  } else {
    spatial_filter_ = nullptr;
  }
  if (from._internal_has_input_transform()) {
    input_transform_ = new ::esriPBuffer::graph::Transform(*from.input_transform_);
  } else {
    input_transform_ = nullptr;
  }
  if (from._internal_has_input_spat_ref()) {
    input_spat_ref_ = new ::esriPBuffer::EsriTypes_SpatialReference(*from.input_spat_ref_);
  } else {
    input_spat_ref_ = nullptr;
  }
  if (from._internal_has_out_spat_ref()) {
    out_spat_ref_ = new ::esriPBuffer::EsriTypes_SpatialReference(*from.out_spat_ref_);
  } else {
    out_spat_ref_ = nullptr;
  }
  if (from._internal_has_datum_transform()) {
    datum_transform_ = new ::esriPBuffer::EsriTypes_DatumTransformation(*from.datum_transform_);
  } else {
    datum_transform_ = nullptr;
  }
  if (from._internal_has_quantization_params()) {
    quantization_params_ = new ::esriPBuffer::graph::QuantizationParameters(*from.quantization_params_);
  } else {
    quantization_params_ = nullptr;
  }
  ::memcpy(&type_category_filter_, &from.type_category_filter_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_num_results_) -
    reinterpret_cast<char*>(&type_category_filter_)) + sizeof(max_num_results_));
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GraphSearchRequest)
}

void GraphSearchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphSearchRequest_esriPBuffer_2fgraph_2fSearchQueryRequest_2eproto.base);
  search_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  globalid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&spatial_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_num_results_) -
      reinterpret_cast<char*>(&spatial_filter_)) + sizeof(max_num_results_));
}

GraphSearchRequest::~GraphSearchRequest() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GraphSearchRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GraphSearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  search_query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  globalid_array_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete spatial_filter_;
  if (this != internal_default_instance()) delete input_transform_;
  if (this != internal_default_instance()) delete input_spat_ref_;
  if (this != internal_default_instance()) delete out_spat_ref_;
  if (this != internal_default_instance()) delete datum_transform_;
  if (this != internal_default_instance()) delete quantization_params_;
}

void GraphSearchRequest::ArenaDtor(void* object) {
  GraphSearchRequest* _this = reinterpret_cast< GraphSearchRequest* >(object);
  (void)_this;
}
void GraphSearchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphSearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphSearchRequest& GraphSearchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphSearchRequest_esriPBuffer_2fgraph_2fSearchQueryRequest_2eproto.base);
  return *internal_default_instance();
}


void GraphSearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GraphSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  named_type_filter_.Clear();
  search_query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  globalid_array_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && spatial_filter_ != nullptr) {
    delete spatial_filter_;
  }
  spatial_filter_ = nullptr;
  if (GetArena() == nullptr && input_transform_ != nullptr) {
    delete input_transform_;
  }
  input_transform_ = nullptr;
  if (GetArena() == nullptr && input_spat_ref_ != nullptr) {
    delete input_spat_ref_;
  }
  input_spat_ref_ = nullptr;
  if (GetArena() == nullptr && out_spat_ref_ != nullptr) {
    delete out_spat_ref_;
  }
  out_spat_ref_ = nullptr;
  if (GetArena() == nullptr && datum_transform_ != nullptr) {
    delete datum_transform_;
  }
  datum_transform_ = nullptr;
  if (GetArena() == nullptr && quantization_params_ != nullptr) {
    delete quantization_params_;
  }
  quantization_params_ = nullptr;
  ::memset(&type_category_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_num_results_) -
      reinterpret_cast<char*>(&type_category_filter_)) + sizeof(max_num_results_));
  _internal_metadata_.Clear<std::string>();
}

const char* GraphSearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string search_query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_search_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes globalid_array = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_globalid_array();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string named_type_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_named_type_filter();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.GraphSearchRequest.esriNamedTypeCategory type_category_filter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type_category_filter(static_cast<::esriPBuffer::graph::GraphSearchRequest_esriNamedTypeCategory>(val));
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.GeometryValue spatial_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_spatial_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.Transform input_transform = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.EsriTypes.SpatialReference input_spat_ref = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_spat_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.EsriTypes.esriSpatialRel spatial_relation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_spatial_relation(static_cast<::esriPBuffer::EsriTypes_esriSpatialRel>(val));
        } else goto handle_unusual;
        continue;
      // bool return_geometry = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          return_geometry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.EsriTypes.esriFeatureEncoding feature_encoding = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_feature_encoding(static_cast<::esriPBuffer::EsriTypes_esriFeatureEncoding>(val));
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.EsriTypes.SpatialReference out_spat_ref = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_out_spat_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.EsriTypes.DatumTransformation datum_transform = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_datum_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.QuantizationParameters quantization_params = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_quantization_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 start_index = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 max_num_results = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          max_num_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool return_search_context = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          return_search_context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphSearchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GraphSearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string search_query = 1;
  if (this->search_query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_search_query().data(), static_cast<int>(this->_internal_search_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.GraphSearchRequest.search_query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search_query(), target);
  }

  // bytes globalid_array = 2;
  if (this->globalid_array().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_globalid_array(), target);
  }

  // repeated string named_type_filter = 3;
  for (int i = 0, n = this->_internal_named_type_filter_size(); i < n; i++) {
    const auto& s = this->_internal_named_type_filter(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.GraphSearchRequest.named_type_filter");
    target = stream->WriteString(3, s, target);
  }

  // .esriPBuffer.graph.GraphSearchRequest.esriNamedTypeCategory type_category_filter = 4;
  if (this->type_category_filter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type_category_filter(), target);
  }

  // .esriPBuffer.graph.GeometryValue spatial_filter = 5;
  if (this->has_spatial_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::spatial_filter(this), target, stream);
  }

  // .esriPBuffer.graph.Transform input_transform = 6;
  if (this->has_input_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::input_transform(this), target, stream);
  }

  // .esriPBuffer.EsriTypes.SpatialReference input_spat_ref = 7;
  if (this->has_input_spat_ref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::input_spat_ref(this), target, stream);
  }

  // .esriPBuffer.EsriTypes.esriSpatialRel spatial_relation = 8;
  if (this->spatial_relation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_spatial_relation(), target);
  }

  // bool return_geometry = 9;
  if (this->return_geometry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_return_geometry(), target);
  }

  // .esriPBuffer.EsriTypes.esriFeatureEncoding feature_encoding = 10;
  if (this->feature_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_feature_encoding(), target);
  }

  // .esriPBuffer.EsriTypes.SpatialReference out_spat_ref = 11;
  if (this->has_out_spat_ref()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::out_spat_ref(this), target, stream);
  }

  // .esriPBuffer.EsriTypes.DatumTransformation datum_transform = 12;
  if (this->has_datum_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::datum_transform(this), target, stream);
  }

  // .esriPBuffer.graph.QuantizationParameters quantization_params = 14;
  if (this->has_quantization_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::quantization_params(this), target, stream);
  }

  // sint32 start_index = 15;
  if (this->start_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(15, this->_internal_start_index(), target);
  }

  // sint32 max_num_results = 16;
  if (this->max_num_results() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(16, this->_internal_max_num_results(), target);
  }

  // bool return_search_context = 17;
  if (this->return_search_context() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_return_search_context(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GraphSearchRequest)
  return target;
}

size_t GraphSearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GraphSearchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string named_type_filter = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(named_type_filter_.size());
  for (int i = 0, n = named_type_filter_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      named_type_filter_.Get(i));
  }

  // string search_query = 1;
  if (this->search_query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_search_query());
  }

  // bytes globalid_array = 2;
  if (this->globalid_array().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_globalid_array());
  }

  // .esriPBuffer.graph.GeometryValue spatial_filter = 5;
  if (this->has_spatial_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spatial_filter_);
  }

  // .esriPBuffer.graph.Transform input_transform = 6;
  if (this->has_input_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_transform_);
  }

  // .esriPBuffer.EsriTypes.SpatialReference input_spat_ref = 7;
  if (this->has_input_spat_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_spat_ref_);
  }

  // .esriPBuffer.EsriTypes.SpatialReference out_spat_ref = 11;
  if (this->has_out_spat_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *out_spat_ref_);
  }

  // .esriPBuffer.EsriTypes.DatumTransformation datum_transform = 12;
  if (this->has_datum_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *datum_transform_);
  }

  // .esriPBuffer.graph.QuantizationParameters quantization_params = 14;
  if (this->has_quantization_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quantization_params_);
  }

  // .esriPBuffer.graph.GraphSearchRequest.esriNamedTypeCategory type_category_filter = 4;
  if (this->type_category_filter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type_category_filter());
  }

  // .esriPBuffer.EsriTypes.esriSpatialRel spatial_relation = 8;
  if (this->spatial_relation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_spatial_relation());
  }

  // .esriPBuffer.EsriTypes.esriFeatureEncoding feature_encoding = 10;
  if (this->feature_encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_feature_encoding());
  }

  // bool return_geometry = 9;
  if (this->return_geometry() != 0) {
    total_size += 1 + 1;
  }

  // bool return_search_context = 17;
  if (this->return_search_context() != 0) {
    total_size += 2 + 1;
  }

  // sint32 start_index = 15;
  if (this->start_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_start_index());
  }

  // sint32 max_num_results = 16;
  if (this->max_num_results() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_max_num_results());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphSearchRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphSearchRequest*>(
      &from));
}

void GraphSearchRequest::MergeFrom(const GraphSearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GraphSearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  named_type_filter_.MergeFrom(from.named_type_filter_);
  if (from.search_query().size() > 0) {
    _internal_set_search_query(from._internal_search_query());
  }
  if (from.globalid_array().size() > 0) {
    _internal_set_globalid_array(from._internal_globalid_array());
  }
  if (from.has_spatial_filter()) {
    _internal_mutable_spatial_filter()->::esriPBuffer::graph::GeometryValue::MergeFrom(from._internal_spatial_filter());
  }
  if (from.has_input_transform()) {
    _internal_mutable_input_transform()->::esriPBuffer::graph::Transform::MergeFrom(from._internal_input_transform());
  }
  if (from.has_input_spat_ref()) {
    _internal_mutable_input_spat_ref()->::esriPBuffer::EsriTypes_SpatialReference::MergeFrom(from._internal_input_spat_ref());
  }
  if (from.has_out_spat_ref()) {
    _internal_mutable_out_spat_ref()->::esriPBuffer::EsriTypes_SpatialReference::MergeFrom(from._internal_out_spat_ref());
  }
  if (from.has_datum_transform()) {
    _internal_mutable_datum_transform()->::esriPBuffer::EsriTypes_DatumTransformation::MergeFrom(from._internal_datum_transform());
  }
  if (from.has_quantization_params()) {
    _internal_mutable_quantization_params()->::esriPBuffer::graph::QuantizationParameters::MergeFrom(from._internal_quantization_params());
  }
  if (from.type_category_filter() != 0) {
    _internal_set_type_category_filter(from._internal_type_category_filter());
  }
  if (from.spatial_relation() != 0) {
    _internal_set_spatial_relation(from._internal_spatial_relation());
  }
  if (from.feature_encoding() != 0) {
    _internal_set_feature_encoding(from._internal_feature_encoding());
  }
  if (from.return_geometry() != 0) {
    _internal_set_return_geometry(from._internal_return_geometry());
  }
  if (from.return_search_context() != 0) {
    _internal_set_return_search_context(from._internal_return_search_context());
  }
  if (from.start_index() != 0) {
    _internal_set_start_index(from._internal_start_index());
  }
  if (from.max_num_results() != 0) {
    _internal_set_max_num_results(from._internal_max_num_results());
  }
}

void GraphSearchRequest::CopyFrom(const GraphSearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GraphSearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphSearchRequest::IsInitialized() const {
  return true;
}

void GraphSearchRequest::InternalSwap(GraphSearchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  named_type_filter_.InternalSwap(&other->named_type_filter_);
  search_query_.Swap(&other->search_query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  globalid_array_.Swap(&other->globalid_array_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphSearchRequest, max_num_results_)
      + sizeof(GraphSearchRequest::max_num_results_)
      - PROTOBUF_FIELD_OFFSET(GraphSearchRequest, spatial_filter_)>(
          reinterpret_cast<char*>(&spatial_filter_),
          reinterpret_cast<char*>(&other->spatial_filter_));
}

std::string GraphSearchRequest::GetTypeName() const {
  return "esriPBuffer.graph.GraphSearchRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphSearchRequest* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphSearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphSearchRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
