// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/UpdateNamedTypeRequest.proto

#include "esriPBuffer/graph/UpdateNamedTypeRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fDataModelTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EntityType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GraphEntityTypeUpdate_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GraphRelationshipTypeUpdate_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NamedObjectTypeMask_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fDataModelTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelationshipType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelationshipTypeMask_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto;
namespace esriPBuffer {
namespace graph {
class GraphNamedObjectTypeUpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphNamedObjectTypeUpdateRequest> _instance;
  const ::esriPBuffer::graph::GraphEntityTypeUpdate* entity_update_;
  const ::esriPBuffer::graph::GraphRelationshipTypeUpdate* relationship_update_;
} _GraphNamedObjectTypeUpdateRequest_default_instance_;
class NamedObjectTypeMaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedObjectTypeMask> _instance;
} _NamedObjectTypeMask_default_instance_;
class GraphEntityTypeUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphEntityTypeUpdate> _instance;
} _GraphEntityTypeUpdate_default_instance_;
class RelationshipTypeMaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelationshipTypeMask> _instance;
  bool add_origin_entity_types_;
  bool delete_origin_entity_types_;
  bool add_dest_entity_types_;
  bool delete_dest_entity_types_;
} _RelationshipTypeMask_default_instance_;
class GraphRelationshipTypeUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphRelationshipTypeUpdate> _instance;
} _GraphRelationshipTypeUpdate_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
static void InitDefaultsscc_info_GraphEntityTypeUpdate_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphEntityTypeUpdate_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphEntityTypeUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GraphEntityTypeUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GraphEntityTypeUpdate_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GraphEntityTypeUpdate_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto}, {
      &scc_info_NamedObjectTypeMask_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto.base,
      &scc_info_EntityType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto.base,}};

static void InitDefaultsscc_info_GraphNamedObjectTypeUpdateRequest_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphNamedObjectTypeUpdateRequest_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphNamedObjectTypeUpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GraphNamedObjectTypeUpdateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GraphNamedObjectTypeUpdateRequest_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GraphNamedObjectTypeUpdateRequest_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto}, {
      &scc_info_GraphEntityTypeUpdate_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto.base,
      &scc_info_GraphRelationshipTypeUpdate_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto.base,}};

static void InitDefaultsscc_info_GraphRelationshipTypeUpdate_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphRelationshipTypeUpdate_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphRelationshipTypeUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GraphRelationshipTypeUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GraphRelationshipTypeUpdate_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GraphRelationshipTypeUpdate_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto}, {
      &scc_info_RelationshipTypeMask_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto.base,
      &scc_info_RelationshipType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto.base,}};

static void InitDefaultsscc_info_NamedObjectTypeMask_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_NamedObjectTypeMask_default_instance_;
    new (ptr) ::esriPBuffer::graph::NamedObjectTypeMask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::NamedObjectTypeMask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NamedObjectTypeMask_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NamedObjectTypeMask_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto}, {}};

static void InitDefaultsscc_info_RelationshipTypeMask_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_RelationshipTypeMask_default_instance_;
    new (ptr) ::esriPBuffer::graph::RelationshipTypeMask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::RelationshipTypeMask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelationshipTypeMask_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RelationshipTypeMask_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto}, {
      &scc_info_NamedObjectTypeMask_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto.base,}};

namespace esriPBuffer {
namespace graph {

// ===================================================================

void GraphNamedObjectTypeUpdateRequest::InitAsDefaultInstance() {
}
class GraphNamedObjectTypeUpdateRequest::_Internal {
 public:
  static const ::esriPBuffer::graph::GraphEntityTypeUpdate& entity_update(const GraphNamedObjectTypeUpdateRequest* msg);
  static const ::esriPBuffer::graph::GraphRelationshipTypeUpdate& relationship_update(const GraphNamedObjectTypeUpdateRequest* msg);
};

const ::esriPBuffer::graph::GraphEntityTypeUpdate&
GraphNamedObjectTypeUpdateRequest::_Internal::entity_update(const GraphNamedObjectTypeUpdateRequest* msg) {
  return *msg->named_type_update_.entity_update_;
}
const ::esriPBuffer::graph::GraphRelationshipTypeUpdate&
GraphNamedObjectTypeUpdateRequest::_Internal::relationship_update(const GraphNamedObjectTypeUpdateRequest* msg) {
  return *msg->named_type_update_.relationship_update_;
}
void GraphNamedObjectTypeUpdateRequest::set_allocated_entity_update(::esriPBuffer::graph::GraphEntityTypeUpdate* entity_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_named_type_update();
  if (entity_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entity_update);
    if (message_arena != submessage_arena) {
      entity_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_update, submessage_arena);
    }
    set_has_entity_update();
    named_type_update_.entity_update_ = entity_update;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest.entity_update)
}
void GraphNamedObjectTypeUpdateRequest::set_allocated_relationship_update(::esriPBuffer::graph::GraphRelationshipTypeUpdate* relationship_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_named_type_update();
  if (relationship_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(relationship_update);
    if (message_arena != submessage_arena) {
      relationship_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relationship_update, submessage_arena);
    }
    set_has_relationship_update();
    named_type_update_.relationship_update_ = relationship_update;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest.relationship_update)
}
GraphNamedObjectTypeUpdateRequest::GraphNamedObjectTypeUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest)
}
GraphNamedObjectTypeUpdateRequest::GraphNamedObjectTypeUpdateRequest(const GraphNamedObjectTypeUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_named_type_update();
  switch (from.named_type_update_case()) {
    case kEntityUpdate: {
      _internal_mutable_entity_update()->::esriPBuffer::graph::GraphEntityTypeUpdate::MergeFrom(from._internal_entity_update());
      break;
    }
    case kRelationshipUpdate: {
      _internal_mutable_relationship_update()->::esriPBuffer::graph::GraphRelationshipTypeUpdate::MergeFrom(from._internal_relationship_update());
      break;
    }
    case NAMED_TYPE_UPDATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest)
}

void GraphNamedObjectTypeUpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphNamedObjectTypeUpdateRequest_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto.base);
  clear_has_named_type_update();
}

GraphNamedObjectTypeUpdateRequest::~GraphNamedObjectTypeUpdateRequest() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GraphNamedObjectTypeUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_named_type_update()) {
    clear_named_type_update();
  }
}

void GraphNamedObjectTypeUpdateRequest::ArenaDtor(void* object) {
  GraphNamedObjectTypeUpdateRequest* _this = reinterpret_cast< GraphNamedObjectTypeUpdateRequest* >(object);
  (void)_this;
}
void GraphNamedObjectTypeUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphNamedObjectTypeUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphNamedObjectTypeUpdateRequest& GraphNamedObjectTypeUpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphNamedObjectTypeUpdateRequest_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto.base);
  return *internal_default_instance();
}


void GraphNamedObjectTypeUpdateRequest::clear_named_type_update() {
// @@protoc_insertion_point(one_of_clear_start:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest)
  switch (named_type_update_case()) {
    case kEntityUpdate: {
      if (GetArena() == nullptr) {
        delete named_type_update_.entity_update_;
      }
      break;
    }
    case kRelationshipUpdate: {
      if (GetArena() == nullptr) {
        delete named_type_update_.relationship_update_;
      }
      break;
    }
    case NAMED_TYPE_UPDATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NAMED_TYPE_UPDATE_NOT_SET;
}


void GraphNamedObjectTypeUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_named_type_update();
  _internal_metadata_.Clear<std::string>();
}

const char* GraphNamedObjectTypeUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.graph.GraphEntityTypeUpdate entity_update = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.GraphRelationshipTypeUpdate relationship_update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_relationship_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphNamedObjectTypeUpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.graph.GraphEntityTypeUpdate entity_update = 1;
  if (_internal_has_entity_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity_update(this), target, stream);
  }

  // .esriPBuffer.graph.GraphRelationshipTypeUpdate relationship_update = 2;
  if (_internal_has_relationship_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::relationship_update(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest)
  return target;
}

size_t GraphNamedObjectTypeUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (named_type_update_case()) {
    // .esriPBuffer.graph.GraphEntityTypeUpdate entity_update = 1;
    case kEntityUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *named_type_update_.entity_update_);
      break;
    }
    // .esriPBuffer.graph.GraphRelationshipTypeUpdate relationship_update = 2;
    case kRelationshipUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *named_type_update_.relationship_update_);
      break;
    }
    case NAMED_TYPE_UPDATE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphNamedObjectTypeUpdateRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphNamedObjectTypeUpdateRequest*>(
      &from));
}

void GraphNamedObjectTypeUpdateRequest::MergeFrom(const GraphNamedObjectTypeUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.named_type_update_case()) {
    case kEntityUpdate: {
      _internal_mutable_entity_update()->::esriPBuffer::graph::GraphEntityTypeUpdate::MergeFrom(from._internal_entity_update());
      break;
    }
    case kRelationshipUpdate: {
      _internal_mutable_relationship_update()->::esriPBuffer::graph::GraphRelationshipTypeUpdate::MergeFrom(from._internal_relationship_update());
      break;
    }
    case NAMED_TYPE_UPDATE_NOT_SET: {
      break;
    }
  }
}

void GraphNamedObjectTypeUpdateRequest::CopyFrom(const GraphNamedObjectTypeUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphNamedObjectTypeUpdateRequest::IsInitialized() const {
  return true;
}

void GraphNamedObjectTypeUpdateRequest::InternalSwap(GraphNamedObjectTypeUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(named_type_update_, other->named_type_update_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string GraphNamedObjectTypeUpdateRequest::GetTypeName() const {
  return "esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest";
}


// ===================================================================

void NamedObjectTypeMask::InitAsDefaultInstance() {
}
class NamedObjectTypeMask::_Internal {
 public:
};

NamedObjectTypeMask::NamedObjectTypeMask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.NamedObjectTypeMask)
}
NamedObjectTypeMask::NamedObjectTypeMask(const NamedObjectTypeMask& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&update_name_, &from.update_name_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_role_) -
    reinterpret_cast<char*>(&update_name_)) + sizeof(update_role_));
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.NamedObjectTypeMask)
}

void NamedObjectTypeMask::SharedCtor() {
  ::memset(&update_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_role_) -
      reinterpret_cast<char*>(&update_name_)) + sizeof(update_role_));
}

NamedObjectTypeMask::~NamedObjectTypeMask() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.NamedObjectTypeMask)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void NamedObjectTypeMask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NamedObjectTypeMask::ArenaDtor(void* object) {
  NamedObjectTypeMask* _this = reinterpret_cast< NamedObjectTypeMask* >(object);
  (void)_this;
}
void NamedObjectTypeMask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedObjectTypeMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedObjectTypeMask& NamedObjectTypeMask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NamedObjectTypeMask_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto.base);
  return *internal_default_instance();
}


void NamedObjectTypeMask::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.NamedObjectTypeMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&update_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_role_) -
      reinterpret_cast<char*>(&update_name_)) + sizeof(update_role_));
  _internal_metadata_.Clear<std::string>();
}

const char* NamedObjectTypeMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool update_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          update_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_alias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          update_alias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_role = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          update_role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedObjectTypeMask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.NamedObjectTypeMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool update_name = 1;
  if (this->update_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_update_name(), target);
  }

  // bool update_alias = 2;
  if (this->update_alias() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_update_alias(), target);
  }

  // bool update_role = 4;
  if (this->update_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_update_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.NamedObjectTypeMask)
  return target;
}

size_t NamedObjectTypeMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.NamedObjectTypeMask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool update_name = 1;
  if (this->update_name() != 0) {
    total_size += 1 + 1;
  }

  // bool update_alias = 2;
  if (this->update_alias() != 0) {
    total_size += 1 + 1;
  }

  // bool update_role = 4;
  if (this->update_role() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedObjectTypeMask::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NamedObjectTypeMask*>(
      &from));
}

void NamedObjectTypeMask::MergeFrom(const NamedObjectTypeMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.NamedObjectTypeMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.update_name() != 0) {
    _internal_set_update_name(from._internal_update_name());
  }
  if (from.update_alias() != 0) {
    _internal_set_update_alias(from._internal_update_alias());
  }
  if (from.update_role() != 0) {
    _internal_set_update_role(from._internal_update_role());
  }
}

void NamedObjectTypeMask::CopyFrom(const NamedObjectTypeMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.NamedObjectTypeMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedObjectTypeMask::IsInitialized() const {
  return true;
}

void NamedObjectTypeMask::InternalSwap(NamedObjectTypeMask* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NamedObjectTypeMask, update_role_)
      + sizeof(NamedObjectTypeMask::update_role_)
      - PROTOBUF_FIELD_OFFSET(NamedObjectTypeMask, update_name_)>(
          reinterpret_cast<char*>(&update_name_),
          reinterpret_cast<char*>(&other->update_name_));
}

std::string NamedObjectTypeMask::GetTypeName() const {
  return "esriPBuffer.graph.NamedObjectTypeMask";
}


// ===================================================================

void GraphEntityTypeUpdate::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_GraphEntityTypeUpdate_default_instance_._instance.get_mutable()->mask_ = const_cast< ::esriPBuffer::graph::NamedObjectTypeMask*>(
      ::esriPBuffer::graph::NamedObjectTypeMask::internal_default_instance());
  ::esriPBuffer::graph::_GraphEntityTypeUpdate_default_instance_._instance.get_mutable()->entity_type_ = const_cast< ::esriPBuffer::graph::EntityType*>(
      ::esriPBuffer::graph::EntityType::internal_default_instance());
}
class GraphEntityTypeUpdate::_Internal {
 public:
  static const ::esriPBuffer::graph::NamedObjectTypeMask& mask(const GraphEntityTypeUpdate* msg);
  static const ::esriPBuffer::graph::EntityType& entity_type(const GraphEntityTypeUpdate* msg);
};

const ::esriPBuffer::graph::NamedObjectTypeMask&
GraphEntityTypeUpdate::_Internal::mask(const GraphEntityTypeUpdate* msg) {
  return *msg->mask_;
}
const ::esriPBuffer::graph::EntityType&
GraphEntityTypeUpdate::_Internal::entity_type(const GraphEntityTypeUpdate* msg) {
  return *msg->entity_type_;
}
void GraphEntityTypeUpdate::clear_entity_type() {
  if (GetArena() == nullptr && entity_type_ != nullptr) {
    delete entity_type_;
  }
  entity_type_ = nullptr;
}
GraphEntityTypeUpdate::GraphEntityTypeUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GraphEntityTypeUpdate)
}
GraphEntityTypeUpdate::GraphEntityTypeUpdate(const GraphEntityTypeUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_mask()) {
    mask_ = new ::esriPBuffer::graph::NamedObjectTypeMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  if (from._internal_has_entity_type()) {
    entity_type_ = new ::esriPBuffer::graph::EntityType(*from.entity_type_);
  } else {
    entity_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GraphEntityTypeUpdate)
}

void GraphEntityTypeUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphEntityTypeUpdate_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto.base);
  ::memset(&mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entity_type_) -
      reinterpret_cast<char*>(&mask_)) + sizeof(entity_type_));
}

GraphEntityTypeUpdate::~GraphEntityTypeUpdate() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GraphEntityTypeUpdate)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GraphEntityTypeUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mask_;
  if (this != internal_default_instance()) delete entity_type_;
}

void GraphEntityTypeUpdate::ArenaDtor(void* object) {
  GraphEntityTypeUpdate* _this = reinterpret_cast< GraphEntityTypeUpdate* >(object);
  (void)_this;
}
void GraphEntityTypeUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphEntityTypeUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphEntityTypeUpdate& GraphEntityTypeUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphEntityTypeUpdate_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto.base);
  return *internal_default_instance();
}


void GraphEntityTypeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GraphEntityTypeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  if (GetArena() == nullptr && entity_type_ != nullptr) {
    delete entity_type_;
  }
  entity_type_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* GraphEntityTypeUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.graph.NamedObjectTypeMask mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.EntityType entity_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphEntityTypeUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GraphEntityTypeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.graph.NamedObjectTypeMask mask = 1;
  if (this->has_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mask(this), target, stream);
  }

  // .esriPBuffer.graph.EntityType entity_type = 2;
  if (this->has_entity_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::entity_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GraphEntityTypeUpdate)
  return target;
}

size_t GraphEntityTypeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GraphEntityTypeUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .esriPBuffer.graph.NamedObjectTypeMask mask = 1;
  if (this->has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  // .esriPBuffer.graph.EntityType entity_type = 2;
  if (this->has_entity_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphEntityTypeUpdate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphEntityTypeUpdate*>(
      &from));
}

void GraphEntityTypeUpdate::MergeFrom(const GraphEntityTypeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GraphEntityTypeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mask()) {
    _internal_mutable_mask()->::esriPBuffer::graph::NamedObjectTypeMask::MergeFrom(from._internal_mask());
  }
  if (from.has_entity_type()) {
    _internal_mutable_entity_type()->::esriPBuffer::graph::EntityType::MergeFrom(from._internal_entity_type());
  }
}

void GraphEntityTypeUpdate::CopyFrom(const GraphEntityTypeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GraphEntityTypeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphEntityTypeUpdate::IsInitialized() const {
  return true;
}

void GraphEntityTypeUpdate::InternalSwap(GraphEntityTypeUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphEntityTypeUpdate, entity_type_)
      + sizeof(GraphEntityTypeUpdate::entity_type_)
      - PROTOBUF_FIELD_OFFSET(GraphEntityTypeUpdate, mask_)>(
          reinterpret_cast<char*>(&mask_),
          reinterpret_cast<char*>(&other->mask_));
}

std::string GraphEntityTypeUpdate::GetTypeName() const {
  return "esriPBuffer.graph.GraphEntityTypeUpdate";
}


// ===================================================================

void RelationshipTypeMask::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_RelationshipTypeMask_default_instance_._instance.get_mutable()->named_object_type_mask_ = const_cast< ::esriPBuffer::graph::NamedObjectTypeMask*>(
      ::esriPBuffer::graph::NamedObjectTypeMask::internal_default_instance());
}
class RelationshipTypeMask::_Internal {
 public:
  static const ::esriPBuffer::graph::NamedObjectTypeMask& named_object_type_mask(const RelationshipTypeMask* msg);
};

const ::esriPBuffer::graph::NamedObjectTypeMask&
RelationshipTypeMask::_Internal::named_object_type_mask(const RelationshipTypeMask* msg) {
  return *msg->named_object_type_mask_;
}
RelationshipTypeMask::RelationshipTypeMask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.RelationshipTypeMask)
}
RelationshipTypeMask::RelationshipTypeMask(const RelationshipTypeMask& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_named_object_type_mask()) {
    named_object_type_mask_ = new ::esriPBuffer::graph::NamedObjectTypeMask(*from.named_object_type_mask_);
  } else {
    named_object_type_mask_ = nullptr;
  }
  clear_has_origin_entity_type();
  switch (from.origin_entity_type_case()) {
    case kAddOriginEntityTypes: {
      _internal_set_add_origin_entity_types(from._internal_add_origin_entity_types());
      break;
    }
    case kDeleteOriginEntityTypes: {
      _internal_set_delete_origin_entity_types(from._internal_delete_origin_entity_types());
      break;
    }
    case ORIGIN_ENTITY_TYPE_NOT_SET: {
      break;
    }
  }
  clear_has_dest_entity_type();
  switch (from.dest_entity_type_case()) {
    case kAddDestEntityTypes: {
      _internal_set_add_dest_entity_types(from._internal_add_dest_entity_types());
      break;
    }
    case kDeleteDestEntityTypes: {
      _internal_set_delete_dest_entity_types(from._internal_delete_dest_entity_types());
      break;
    }
    case DEST_ENTITY_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.RelationshipTypeMask)
}

void RelationshipTypeMask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelationshipTypeMask_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto.base);
  named_object_type_mask_ = nullptr;
  clear_has_origin_entity_type();
  clear_has_dest_entity_type();
}

RelationshipTypeMask::~RelationshipTypeMask() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.RelationshipTypeMask)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RelationshipTypeMask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete named_object_type_mask_;
  if (has_origin_entity_type()) {
    clear_origin_entity_type();
  }
  if (has_dest_entity_type()) {
    clear_dest_entity_type();
  }
}

void RelationshipTypeMask::ArenaDtor(void* object) {
  RelationshipTypeMask* _this = reinterpret_cast< RelationshipTypeMask* >(object);
  (void)_this;
}
void RelationshipTypeMask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelationshipTypeMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelationshipTypeMask& RelationshipTypeMask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelationshipTypeMask_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto.base);
  return *internal_default_instance();
}


void RelationshipTypeMask::clear_origin_entity_type() {
// @@protoc_insertion_point(one_of_clear_start:esriPBuffer.graph.RelationshipTypeMask)
  switch (origin_entity_type_case()) {
    case kAddOriginEntityTypes: {
      // No need to clear
      break;
    }
    case kDeleteOriginEntityTypes: {
      // No need to clear
      break;
    }
    case ORIGIN_ENTITY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ORIGIN_ENTITY_TYPE_NOT_SET;
}

void RelationshipTypeMask::clear_dest_entity_type() {
// @@protoc_insertion_point(one_of_clear_start:esriPBuffer.graph.RelationshipTypeMask)
  switch (dest_entity_type_case()) {
    case kAddDestEntityTypes: {
      // No need to clear
      break;
    }
    case kDeleteDestEntityTypes: {
      // No need to clear
      break;
    }
    case DEST_ENTITY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = DEST_ENTITY_TYPE_NOT_SET;
}


void RelationshipTypeMask::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.RelationshipTypeMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && named_object_type_mask_ != nullptr) {
    delete named_object_type_mask_;
  }
  named_object_type_mask_ = nullptr;
  clear_origin_entity_type();
  clear_dest_entity_type();
  _internal_metadata_.Clear<std::string>();
}

const char* RelationshipTypeMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.graph.NamedObjectTypeMask named_object_type_mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_object_type_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool add_origin_entity_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_add_origin_entity_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool delete_origin_entity_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_delete_origin_entity_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool add_dest_entity_types = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_add_dest_entity_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool delete_dest_entity_types = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_delete_dest_entity_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelationshipTypeMask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.RelationshipTypeMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.graph.NamedObjectTypeMask named_object_type_mask = 1;
  if (this->has_named_object_type_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::named_object_type_mask(this), target, stream);
  }

  // bool add_origin_entity_types = 2;
  if (_internal_has_add_origin_entity_types()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_add_origin_entity_types(), target);
  }

  // bool delete_origin_entity_types = 3;
  if (_internal_has_delete_origin_entity_types()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_delete_origin_entity_types(), target);
  }

  // bool add_dest_entity_types = 4;
  if (_internal_has_add_dest_entity_types()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_add_dest_entity_types(), target);
  }

  // bool delete_dest_entity_types = 5;
  if (_internal_has_delete_dest_entity_types()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_delete_dest_entity_types(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.RelationshipTypeMask)
  return target;
}

size_t RelationshipTypeMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.RelationshipTypeMask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .esriPBuffer.graph.NamedObjectTypeMask named_object_type_mask = 1;
  if (this->has_named_object_type_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *named_object_type_mask_);
  }

  switch (origin_entity_type_case()) {
    // bool add_origin_entity_types = 2;
    case kAddOriginEntityTypes: {
      total_size += 1 + 1;
      break;
    }
    // bool delete_origin_entity_types = 3;
    case kDeleteOriginEntityTypes: {
      total_size += 1 + 1;
      break;
    }
    case ORIGIN_ENTITY_TYPE_NOT_SET: {
      break;
    }
  }
  switch (dest_entity_type_case()) {
    // bool add_dest_entity_types = 4;
    case kAddDestEntityTypes: {
      total_size += 1 + 1;
      break;
    }
    // bool delete_dest_entity_types = 5;
    case kDeleteDestEntityTypes: {
      total_size += 1 + 1;
      break;
    }
    case DEST_ENTITY_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelationshipTypeMask::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RelationshipTypeMask*>(
      &from));
}

void RelationshipTypeMask::MergeFrom(const RelationshipTypeMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.RelationshipTypeMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_named_object_type_mask()) {
    _internal_mutable_named_object_type_mask()->::esriPBuffer::graph::NamedObjectTypeMask::MergeFrom(from._internal_named_object_type_mask());
  }
  switch (from.origin_entity_type_case()) {
    case kAddOriginEntityTypes: {
      _internal_set_add_origin_entity_types(from._internal_add_origin_entity_types());
      break;
    }
    case kDeleteOriginEntityTypes: {
      _internal_set_delete_origin_entity_types(from._internal_delete_origin_entity_types());
      break;
    }
    case ORIGIN_ENTITY_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.dest_entity_type_case()) {
    case kAddDestEntityTypes: {
      _internal_set_add_dest_entity_types(from._internal_add_dest_entity_types());
      break;
    }
    case kDeleteDestEntityTypes: {
      _internal_set_delete_dest_entity_types(from._internal_delete_dest_entity_types());
      break;
    }
    case DEST_ENTITY_TYPE_NOT_SET: {
      break;
    }
  }
}

void RelationshipTypeMask::CopyFrom(const RelationshipTypeMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.RelationshipTypeMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationshipTypeMask::IsInitialized() const {
  return true;
}

void RelationshipTypeMask::InternalSwap(RelationshipTypeMask* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(named_object_type_mask_, other->named_object_type_mask_);
  swap(origin_entity_type_, other->origin_entity_type_);
  swap(dest_entity_type_, other->dest_entity_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

std::string RelationshipTypeMask::GetTypeName() const {
  return "esriPBuffer.graph.RelationshipTypeMask";
}


// ===================================================================

void GraphRelationshipTypeUpdate::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_GraphRelationshipTypeUpdate_default_instance_._instance.get_mutable()->mask_ = const_cast< ::esriPBuffer::graph::RelationshipTypeMask*>(
      ::esriPBuffer::graph::RelationshipTypeMask::internal_default_instance());
  ::esriPBuffer::graph::_GraphRelationshipTypeUpdate_default_instance_._instance.get_mutable()->relationship_type_ = const_cast< ::esriPBuffer::graph::RelationshipType*>(
      ::esriPBuffer::graph::RelationshipType::internal_default_instance());
}
class GraphRelationshipTypeUpdate::_Internal {
 public:
  static const ::esriPBuffer::graph::RelationshipTypeMask& mask(const GraphRelationshipTypeUpdate* msg);
  static const ::esriPBuffer::graph::RelationshipType& relationship_type(const GraphRelationshipTypeUpdate* msg);
};

const ::esriPBuffer::graph::RelationshipTypeMask&
GraphRelationshipTypeUpdate::_Internal::mask(const GraphRelationshipTypeUpdate* msg) {
  return *msg->mask_;
}
const ::esriPBuffer::graph::RelationshipType&
GraphRelationshipTypeUpdate::_Internal::relationship_type(const GraphRelationshipTypeUpdate* msg) {
  return *msg->relationship_type_;
}
void GraphRelationshipTypeUpdate::clear_relationship_type() {
  if (GetArena() == nullptr && relationship_type_ != nullptr) {
    delete relationship_type_;
  }
  relationship_type_ = nullptr;
}
GraphRelationshipTypeUpdate::GraphRelationshipTypeUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GraphRelationshipTypeUpdate)
}
GraphRelationshipTypeUpdate::GraphRelationshipTypeUpdate(const GraphRelationshipTypeUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_mask()) {
    mask_ = new ::esriPBuffer::graph::RelationshipTypeMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  if (from._internal_has_relationship_type()) {
    relationship_type_ = new ::esriPBuffer::graph::RelationshipType(*from.relationship_type_);
  } else {
    relationship_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GraphRelationshipTypeUpdate)
}

void GraphRelationshipTypeUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphRelationshipTypeUpdate_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto.base);
  ::memset(&mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relationship_type_) -
      reinterpret_cast<char*>(&mask_)) + sizeof(relationship_type_));
}

GraphRelationshipTypeUpdate::~GraphRelationshipTypeUpdate() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GraphRelationshipTypeUpdate)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GraphRelationshipTypeUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mask_;
  if (this != internal_default_instance()) delete relationship_type_;
}

void GraphRelationshipTypeUpdate::ArenaDtor(void* object) {
  GraphRelationshipTypeUpdate* _this = reinterpret_cast< GraphRelationshipTypeUpdate* >(object);
  (void)_this;
}
void GraphRelationshipTypeUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphRelationshipTypeUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphRelationshipTypeUpdate& GraphRelationshipTypeUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphRelationshipTypeUpdate_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto.base);
  return *internal_default_instance();
}


void GraphRelationshipTypeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GraphRelationshipTypeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  if (GetArena() == nullptr && relationship_type_ != nullptr) {
    delete relationship_type_;
  }
  relationship_type_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* GraphRelationshipTypeUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.graph.RelationshipTypeMask mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.RelationshipType relationship_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_relationship_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphRelationshipTypeUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GraphRelationshipTypeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.graph.RelationshipTypeMask mask = 1;
  if (this->has_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mask(this), target, stream);
  }

  // .esriPBuffer.graph.RelationshipType relationship_type = 2;
  if (this->has_relationship_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::relationship_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GraphRelationshipTypeUpdate)
  return target;
}

size_t GraphRelationshipTypeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GraphRelationshipTypeUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .esriPBuffer.graph.RelationshipTypeMask mask = 1;
  if (this->has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  // .esriPBuffer.graph.RelationshipType relationship_type = 2;
  if (this->has_relationship_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relationship_type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphRelationshipTypeUpdate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphRelationshipTypeUpdate*>(
      &from));
}

void GraphRelationshipTypeUpdate::MergeFrom(const GraphRelationshipTypeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GraphRelationshipTypeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mask()) {
    _internal_mutable_mask()->::esriPBuffer::graph::RelationshipTypeMask::MergeFrom(from._internal_mask());
  }
  if (from.has_relationship_type()) {
    _internal_mutable_relationship_type()->::esriPBuffer::graph::RelationshipType::MergeFrom(from._internal_relationship_type());
  }
}

void GraphRelationshipTypeUpdate::CopyFrom(const GraphRelationshipTypeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GraphRelationshipTypeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphRelationshipTypeUpdate::IsInitialized() const {
  return true;
}

void GraphRelationshipTypeUpdate::InternalSwap(GraphRelationshipTypeUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphRelationshipTypeUpdate, relationship_type_)
      + sizeof(GraphRelationshipTypeUpdate::relationship_type_)
      - PROTOBUF_FIELD_OFFSET(GraphRelationshipTypeUpdate, mask_)>(
          reinterpret_cast<char*>(&mask_),
          reinterpret_cast<char*>(&other->mask_));
}

std::string GraphRelationshipTypeUpdate::GetTypeName() const {
  return "esriPBuffer.graph.GraphRelationshipTypeUpdate";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphNamedObjectTypeUpdateRequest* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphNamedObjectTypeUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphNamedObjectTypeUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::NamedObjectTypeMask* Arena::CreateMaybeMessage< ::esriPBuffer::graph::NamedObjectTypeMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::NamedObjectTypeMask >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphEntityTypeUpdate* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphEntityTypeUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphEntityTypeUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::RelationshipTypeMask* Arena::CreateMaybeMessage< ::esriPBuffer::graph::RelationshipTypeMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::RelationshipTypeMask >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphRelationshipTypeUpdate* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphRelationshipTypeUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphRelationshipTypeUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
