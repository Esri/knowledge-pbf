// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/EsriGraphTypes.proto

#include "esriPBuffer/graph/EsriGraphTypes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fEsriTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EsriTypes_Envelope_esriPBuffer_2fEsriTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fEsriTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EsriTypes_Scale_esriPBuffer_2fEsriTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fEsriTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EsriTypes_Translate_esriPBuffer_2fEsriTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DateTimeArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeometryArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeometryValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryValue_EsriDefaultGeometry_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32Array_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int64Array_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NullArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrimitiveValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
namespace esriPBuffer {
namespace graph {
class FloatArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatArray> _instance;
} _FloatArray_default_instance_;
class DoubleArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleArray> _instance;
} _DoubleArray_default_instance_;
class Int32ArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Int32Array> _instance;
} _Int32Array_default_instance_;
class Int64ArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Int64Array> _instance;
} _Int64Array_default_instance_;
class BoolArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoolArray> _instance;
} _BoolArray_default_instance_;
class DateTimeArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DateTimeArray> _instance;
} _DateTimeArray_default_instance_;
class NullArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NullArray> _instance;
} _NullArray_default_instance_;
class StringArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringArray> _instance;
} _StringArray_default_instance_;
class GeometryValue_EsriDefaultGeometryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryValue_EsriDefaultGeometry> _instance;
} _GeometryValue_EsriDefaultGeometry_default_instance_;
class GeometryValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryValue> _instance;
  const ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* geometry_;
} _GeometryValue_default_instance_;
class QuantizationParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuantizationParameters> _instance;
} _QuantizationParameters_default_instance_;
class TransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transform> _instance;
} _Transform_default_instance_;
class GeometryArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeometryArray> _instance;
} _GeometryArray_default_instance_;
class PrimitiveValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrimitiveValue> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  float float_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 float_compressed_as_int32_;
  double double_value_;
  float double_compressed_as_float_;
  ::PROTOBUF_NAMESPACE_ID::int64 double_compressed_as_int64_;
  ::PROTOBUF_NAMESPACE_ID::int64 sint64_value_;
  bool bool_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_value_;
  const ::esriPBuffer::graph::GeometryValue* geometry_value_;
  bool null_tag_;
  ::PROTOBUF_NAMESPACE_ID::int64 datetime_value_;
} _PrimitiveValue_default_instance_;
class ObjectValue_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectValue_PropertiesEntry_DoNotUse> _instance;
} _ObjectValue_PropertiesEntry_DoNotUse_default_instance_;
class ObjectValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectValue> _instance;
} _ObjectValue_default_instance_;
class EntityValue_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntityValue_PropertiesEntry_DoNotUse> _instance;
} _EntityValue_PropertiesEntry_DoNotUse_default_instance_;
class EntityValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntityValue> _instance;
} _EntityValue_default_instance_;
class RelationshipValue_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelationshipValue_PropertiesEntry_DoNotUse> _instance;
} _RelationshipValue_PropertiesEntry_DoNotUse_default_instance_;
class RelationshipValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelationshipValue> _instance;
} _RelationshipValue_default_instance_;
class PathValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathValue> _instance;
} _PathValue_default_instance_;
class ArrayValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArrayValue> _instance;
} _ArrayValue_default_instance_;
class AnyValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyValue> _instance;
  const ::esriPBuffer::graph::PrimitiveValue* primitive_value_;
  const ::esriPBuffer::graph::ArrayValue* array_value_;
  const ::esriPBuffer::graph::ObjectValue* object_value_;
  const ::esriPBuffer::graph::EntityValue* entity_value_;
  const ::esriPBuffer::graph::RelationshipValue* relationship_value_;
  const ::esriPBuffer::graph::PathValue* path_value_;
  const ::esriPBuffer::graph::FloatArray* float_array_;
  const ::esriPBuffer::graph::Int32Array* float_compressed_as_int32_array_;
  const ::esriPBuffer::graph::DoubleArray* double_array_;
  const ::esriPBuffer::graph::FloatArray* double_compressed_as_float_array_;
  const ::esriPBuffer::graph::Int64Array* double_compressed_as_int64_array_;
  const ::esriPBuffer::graph::Int64Array* sint64_array_;
  const ::esriPBuffer::graph::BoolArray* bool_array_;
  const ::esriPBuffer::graph::NullArray* null_array_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_array_;
  const ::esriPBuffer::graph::DateTimeArray* date_array_;
  const ::esriPBuffer::graph::StringArray* string_array_;
  const ::esriPBuffer::graph::GeometryArray* geometry_array_;
} _AnyValue_default_instance_;
class ErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Error> _instance;
} _Error_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
static void InitDefaultsscc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_ObjectValue_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::ObjectValue_PropertiesEntry_DoNotUse();
  }
  {
    void* ptr = &::esriPBuffer::graph::_ObjectValue_default_instance_;
    new (ptr) ::esriPBuffer::graph::ObjectValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::esriPBuffer::graph::_EntityValue_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::EntityValue_PropertiesEntry_DoNotUse();
  }
  {
    void* ptr = &::esriPBuffer::graph::_EntityValue_default_instance_;
    new (ptr) ::esriPBuffer::graph::EntityValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::esriPBuffer::graph::_RelationshipValue_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::RelationshipValue_PropertiesEntry_DoNotUse();
  }
  {
    void* ptr = &::esriPBuffer::graph::_RelationshipValue_default_instance_;
    new (ptr) ::esriPBuffer::graph::RelationshipValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::esriPBuffer::graph::_PathValue_default_instance_;
    new (ptr) ::esriPBuffer::graph::PathValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::esriPBuffer::graph::_ArrayValue_default_instance_;
    new (ptr) ::esriPBuffer::graph::ArrayValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::esriPBuffer::graph::_AnyValue_default_instance_;
    new (ptr) ::esriPBuffer::graph::AnyValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::ObjectValue_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
  ::esriPBuffer::graph::ObjectValue::InitAsDefaultInstance();
  ::esriPBuffer::graph::EntityValue_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
  ::esriPBuffer::graph::EntityValue::InitAsDefaultInstance();
  ::esriPBuffer::graph::RelationshipValue_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
  ::esriPBuffer::graph::RelationshipValue::InitAsDefaultInstance();
  ::esriPBuffer::graph::PathValue::InitAsDefaultInstance();
  ::esriPBuffer::graph::ArrayValue::InitAsDefaultInstance();
  ::esriPBuffer::graph::AnyValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto}, {
      &scc_info_PrimitiveValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,
      &scc_info_FloatArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,
      &scc_info_Int32Array_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,
      &scc_info_DoubleArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,
      &scc_info_Int64Array_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,
      &scc_info_BoolArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,
      &scc_info_NullArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,
      &scc_info_DateTimeArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,
      &scc_info_StringArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,
      &scc_info_GeometryArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,}};

static void InitDefaultsscc_info_BoolArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_BoolArray_default_instance_;
    new (ptr) ::esriPBuffer::graph::BoolArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::BoolArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BoolArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto}, {}};

static void InitDefaultsscc_info_DateTimeArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_DateTimeArray_default_instance_;
    new (ptr) ::esriPBuffer::graph::DateTimeArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::DateTimeArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DateTimeArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DateTimeArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto}, {}};

static void InitDefaultsscc_info_DoubleArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_DoubleArray_default_instance_;
    new (ptr) ::esriPBuffer::graph::DoubleArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::DoubleArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DoubleArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto}, {}};

static void InitDefaultsscc_info_Error_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_Error_default_instance_;
    new (ptr) ::esriPBuffer::graph::Error();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::Error::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Error_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto}, {}};

static void InitDefaultsscc_info_FloatArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_FloatArray_default_instance_;
    new (ptr) ::esriPBuffer::graph::FloatArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::FloatArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FloatArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto}, {}};

static void InitDefaultsscc_info_GeometryArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GeometryArray_default_instance_;
    new (ptr) ::esriPBuffer::graph::GeometryArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GeometryArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeometryArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeometryArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto}, {
      &scc_info_GeometryValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,}};

static void InitDefaultsscc_info_GeometryValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GeometryValue_default_instance_;
    new (ptr) ::esriPBuffer::graph::GeometryValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GeometryValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeometryValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeometryValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto}, {
      &scc_info_GeometryValue_EsriDefaultGeometry_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,}};

static void InitDefaultsscc_info_GeometryValue_EsriDefaultGeometry_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GeometryValue_EsriDefaultGeometry_default_instance_;
    new (ptr) ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeometryValue_EsriDefaultGeometry_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeometryValue_EsriDefaultGeometry_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto}, {}};

static void InitDefaultsscc_info_Int32Array_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_Int32Array_default_instance_;
    new (ptr) ::esriPBuffer::graph::Int32Array();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::Int32Array::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32Array_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Int32Array_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto}, {}};

static void InitDefaultsscc_info_Int64Array_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_Int64Array_default_instance_;
    new (ptr) ::esriPBuffer::graph::Int64Array();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::Int64Array::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int64Array_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Int64Array_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto}, {}};

static void InitDefaultsscc_info_NullArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_NullArray_default_instance_;
    new (ptr) ::esriPBuffer::graph::NullArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::NullArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NullArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NullArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto}, {}};

static void InitDefaultsscc_info_PrimitiveValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_PrimitiveValue_default_instance_;
    new (ptr) ::esriPBuffer::graph::PrimitiveValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::PrimitiveValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrimitiveValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PrimitiveValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto}, {
      &scc_info_GeometryValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,}};

static void InitDefaultsscc_info_QuantizationParameters_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_QuantizationParameters_default_instance_;
    new (ptr) ::esriPBuffer::graph::QuantizationParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::QuantizationParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuantizationParameters_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QuantizationParameters_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto}, {
      &scc_info_EsriTypes_Envelope_esriPBuffer_2fEsriTypes_2eproto.base,}};

static void InitDefaultsscc_info_StringArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_StringArray_default_instance_;
    new (ptr) ::esriPBuffer::graph::StringArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::StringArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StringArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto}, {}};

static void InitDefaultsscc_info_Transform_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_Transform_default_instance_;
    new (ptr) ::esriPBuffer::graph::Transform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::Transform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transform_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Transform_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto}, {
      &scc_info_EsriTypes_Scale_esriPBuffer_2fEsriTypes_2eproto.base,
      &scc_info_EsriTypes_Translate_esriPBuffer_2fEsriTypes_2eproto.base,}};

namespace esriPBuffer {
namespace graph {
bool QuantizationParameters_QuantizeMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> QuantizationParameters_QuantizeMode_strings[2] = {};

static const char QuantizationParameters_QuantizeMode_names[] =
  "edit"
  "view";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry QuantizationParameters_QuantizeMode_entries[] = {
  { {QuantizationParameters_QuantizeMode_names + 0, 4}, 1 },
  { {QuantizationParameters_QuantizeMode_names + 4, 4}, 0 },
};

static const int QuantizationParameters_QuantizeMode_entries_by_number[] = {
  1, // 0 -> view
  0, // 1 -> edit
};

const std::string& QuantizationParameters_QuantizeMode_Name(
    QuantizationParameters_QuantizeMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          QuantizationParameters_QuantizeMode_entries,
          QuantizationParameters_QuantizeMode_entries_by_number,
          2, QuantizationParameters_QuantizeMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      QuantizationParameters_QuantizeMode_entries,
      QuantizationParameters_QuantizeMode_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     QuantizationParameters_QuantizeMode_strings[idx].get();
}
bool QuantizationParameters_QuantizeMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QuantizationParameters_QuantizeMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      QuantizationParameters_QuantizeMode_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<QuantizationParameters_QuantizeMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr QuantizationParameters_QuantizeMode QuantizationParameters::view;
constexpr QuantizationParameters_QuantizeMode QuantizationParameters::edit;
constexpr QuantizationParameters_QuantizeMode QuantizationParameters::QuantizeMode_MIN;
constexpr QuantizationParameters_QuantizeMode QuantizationParameters::QuantizeMode_MAX;
constexpr int QuantizationParameters::QuantizeMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void FloatArray::InitAsDefaultInstance() {
}
class FloatArray::_Internal {
 public:
};

FloatArray::FloatArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.FloatArray)
}
FloatArray::FloatArray(const FloatArray& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.FloatArray)
}

void FloatArray::SharedCtor() {
}

FloatArray::~FloatArray() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.FloatArray)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void FloatArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FloatArray::ArenaDtor(void* object) {
  FloatArray* _this = reinterpret_cast< FloatArray* >(object);
  (void)_this;
}
void FloatArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FloatArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatArray& FloatArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void FloatArray::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.FloatArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FloatArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.FloatArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1 [packed = true];
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.FloatArray)
  return target;
}

size_t FloatArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.FloatArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float value = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatArray::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FloatArray*>(
      &from));
}

void FloatArray::MergeFrom(const FloatArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.FloatArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void FloatArray::CopyFrom(const FloatArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.FloatArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatArray::IsInitialized() const {
  return true;
}

void FloatArray::InternalSwap(FloatArray* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

std::string FloatArray::GetTypeName() const {
  return "esriPBuffer.graph.FloatArray";
}


// ===================================================================

void DoubleArray::InitAsDefaultInstance() {
}
class DoubleArray::_Internal {
 public:
};

DoubleArray::DoubleArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.DoubleArray)
}
DoubleArray::DoubleArray(const DoubleArray& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.DoubleArray)
}

void DoubleArray::SharedCtor() {
}

DoubleArray::~DoubleArray() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.DoubleArray)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DoubleArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoubleArray::ArenaDtor(void* object) {
  DoubleArray* _this = reinterpret_cast< DoubleArray* >(object);
  (void)_this;
}
void DoubleArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleArray& DoubleArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void DoubleArray::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.DoubleArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DoubleArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.DoubleArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double value = 1 [packed = true];
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.DoubleArray)
  return target;
}

size_t DoubleArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.DoubleArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double value = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleArray::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DoubleArray*>(
      &from));
}

void DoubleArray::MergeFrom(const DoubleArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.DoubleArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void DoubleArray::CopyFrom(const DoubleArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.DoubleArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleArray::IsInitialized() const {
  return true;
}

void DoubleArray::InternalSwap(DoubleArray* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

std::string DoubleArray::GetTypeName() const {
  return "esriPBuffer.graph.DoubleArray";
}


// ===================================================================

void Int32Array::InitAsDefaultInstance() {
}
class Int32Array::_Internal {
 public:
};

Int32Array::Int32Array(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.Int32Array)
}
Int32Array::Int32Array(const Int32Array& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.Int32Array)
}

void Int32Array::SharedCtor() {
}

Int32Array::~Int32Array() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.Int32Array)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Int32Array::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Int32Array::ArenaDtor(void* object) {
  Int32Array* _this = reinterpret_cast< Int32Array* >(object);
  (void)_this;
}
void Int32Array::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Int32Array::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Int32Array& Int32Array::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Int32Array_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void Int32Array::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.Int32Array)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Int32Array::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated sint32 value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Int32Array::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.Int32Array)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 value = 1 [packed = true];
  {
    int byte_size = _value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          1, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.Int32Array)
  return target;
}

size_t Int32Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.Int32Array)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 value = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->value_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int32Array::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Int32Array*>(
      &from));
}

void Int32Array::MergeFrom(const Int32Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.Int32Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void Int32Array::CopyFrom(const Int32Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.Int32Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32Array::IsInitialized() const {
  return true;
}

void Int32Array::InternalSwap(Int32Array* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

std::string Int32Array::GetTypeName() const {
  return "esriPBuffer.graph.Int32Array";
}


// ===================================================================

void Int64Array::InitAsDefaultInstance() {
}
class Int64Array::_Internal {
 public:
};

Int64Array::Int64Array(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.Int64Array)
}
Int64Array::Int64Array(const Int64Array& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.Int64Array)
}

void Int64Array::SharedCtor() {
}

Int64Array::~Int64Array() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.Int64Array)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Int64Array::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Int64Array::ArenaDtor(void* object) {
  Int64Array* _this = reinterpret_cast< Int64Array* >(object);
  (void)_this;
}
void Int64Array::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Int64Array::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Int64Array& Int64Array::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Int64Array_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void Int64Array::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.Int64Array)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Int64Array::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated sint64 value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Int64Array::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.Int64Array)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint64 value = 1 [packed = true];
  {
    int byte_size = _value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          1, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.Int64Array)
  return target;
}

size_t Int64Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.Int64Array)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint64 value = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->value_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int64Array::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Int64Array*>(
      &from));
}

void Int64Array::MergeFrom(const Int64Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.Int64Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void Int64Array::CopyFrom(const Int64Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.Int64Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64Array::IsInitialized() const {
  return true;
}

void Int64Array::InternalSwap(Int64Array* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

std::string Int64Array::GetTypeName() const {
  return "esriPBuffer.graph.Int64Array";
}


// ===================================================================

void BoolArray::InitAsDefaultInstance() {
}
class BoolArray::_Internal {
 public:
};

BoolArray::BoolArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.BoolArray)
}
BoolArray::BoolArray(const BoolArray& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.BoolArray)
}

void BoolArray::SharedCtor() {
}

BoolArray::~BoolArray() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.BoolArray)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BoolArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BoolArray::ArenaDtor(void* object) {
  BoolArray* _this = reinterpret_cast< BoolArray* >(object);
  (void)_this;
}
void BoolArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoolArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoolArray& BoolArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoolArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void BoolArray::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.BoolArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BoolArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bool value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoolArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.BoolArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool value = 1 [packed = true];
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.BoolArray)
  return target;
}

size_t BoolArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.BoolArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool value = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoolArray::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BoolArray*>(
      &from));
}

void BoolArray::MergeFrom(const BoolArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.BoolArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void BoolArray::CopyFrom(const BoolArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.BoolArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolArray::IsInitialized() const {
  return true;
}

void BoolArray::InternalSwap(BoolArray* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

std::string BoolArray::GetTypeName() const {
  return "esriPBuffer.graph.BoolArray";
}


// ===================================================================

void DateTimeArray::InitAsDefaultInstance() {
}
class DateTimeArray::_Internal {
 public:
};

DateTimeArray::DateTimeArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.DateTimeArray)
}
DateTimeArray::DateTimeArray(const DateTimeArray& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.DateTimeArray)
}

void DateTimeArray::SharedCtor() {
}

DateTimeArray::~DateTimeArray() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.DateTimeArray)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DateTimeArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DateTimeArray::ArenaDtor(void* object) {
  DateTimeArray* _this = reinterpret_cast< DateTimeArray* >(object);
  (void)_this;
}
void DateTimeArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DateTimeArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTimeArray& DateTimeArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DateTimeArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void DateTimeArray::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.DateTimeArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DateTimeArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DateTimeArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.DateTimeArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 value = 1 [packed = true];
  {
    int byte_size = _value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.DateTimeArray)
  return target;
}

size_t DateTimeArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.DateTimeArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 value = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->value_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTimeArray::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DateTimeArray*>(
      &from));
}

void DateTimeArray::MergeFrom(const DateTimeArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.DateTimeArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void DateTimeArray::CopyFrom(const DateTimeArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.DateTimeArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTimeArray::IsInitialized() const {
  return true;
}

void DateTimeArray::InternalSwap(DateTimeArray* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

std::string DateTimeArray::GetTypeName() const {
  return "esriPBuffer.graph.DateTimeArray";
}


// ===================================================================

void NullArray::InitAsDefaultInstance() {
}
class NullArray::_Internal {
 public:
};

NullArray::NullArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.NullArray)
}
NullArray::NullArray(const NullArray& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  length_ = from.length_;
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.NullArray)
}

void NullArray::SharedCtor() {
  length_ = PROTOBUF_LONGLONG(0);
}

NullArray::~NullArray() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.NullArray)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void NullArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NullArray::ArenaDtor(void* object) {
  NullArray* _this = reinterpret_cast< NullArray* >(object);
  (void)_this;
}
void NullArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NullArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NullArray& NullArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NullArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void NullArray::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.NullArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  length_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* NullArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint64 length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NullArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.NullArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 length = 1;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(1, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.NullArray)
  return target;
}

size_t NullArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.NullArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 length = 1;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NullArray::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NullArray*>(
      &from));
}

void NullArray::MergeFrom(const NullArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.NullArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
}

void NullArray::CopyFrom(const NullArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.NullArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullArray::IsInitialized() const {
  return true;
}

void NullArray::InternalSwap(NullArray* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(length_, other->length_);
}

std::string NullArray::GetTypeName() const {
  return "esriPBuffer.graph.NullArray";
}


// ===================================================================

void StringArray::InitAsDefaultInstance() {
}
class StringArray::_Internal {
 public:
};

StringArray::StringArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.StringArray)
}
StringArray::StringArray(const StringArray& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.StringArray)
}

void StringArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
}

StringArray::~StringArray() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.StringArray)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StringArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StringArray::ArenaDtor(void* object) {
  StringArray* _this = reinterpret_cast< StringArray* >(object);
  (void)_this;
}
void StringArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringArray& StringArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void StringArray::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.StringArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StringArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.StringArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string value = 1;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.StringArray.value");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.StringArray)
  return target;
}

size_t StringArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.StringArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringArray::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StringArray*>(
      &from));
}

void StringArray::MergeFrom(const StringArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.StringArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void StringArray::CopyFrom(const StringArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.StringArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringArray::IsInitialized() const {
  return true;
}

void StringArray::InternalSwap(StringArray* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

std::string StringArray::GetTypeName() const {
  return "esriPBuffer.graph.StringArray";
}


// ===================================================================

void GeometryValue_EsriDefaultGeometry::InitAsDefaultInstance() {
}
class GeometryValue_EsriDefaultGeometry::_Internal {
 public:
};

GeometryValue_EsriDefaultGeometry::GeometryValue_EsriDefaultGeometry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  lengths_(arena),
  coords_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry)
}
GeometryValue_EsriDefaultGeometry::GeometryValue_EsriDefaultGeometry(const GeometryValue_EsriDefaultGeometry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      lengths_(from.lengths_),
      coords_(from.coords_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&hasz_, &from.hasz_,
    static_cast<size_t>(reinterpret_cast<char*>(&hasm_) -
    reinterpret_cast<char*>(&hasz_)) + sizeof(hasm_));
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry)
}

void GeometryValue_EsriDefaultGeometry::SharedCtor() {
  ::memset(&hasz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hasm_) -
      reinterpret_cast<char*>(&hasz_)) + sizeof(hasm_));
}

GeometryValue_EsriDefaultGeometry::~GeometryValue_EsriDefaultGeometry() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GeometryValue_EsriDefaultGeometry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GeometryValue_EsriDefaultGeometry::ArenaDtor(void* object) {
  GeometryValue_EsriDefaultGeometry* _this = reinterpret_cast< GeometryValue_EsriDefaultGeometry* >(object);
  (void)_this;
}
void GeometryValue_EsriDefaultGeometry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeometryValue_EsriDefaultGeometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryValue_EsriDefaultGeometry& GeometryValue_EsriDefaultGeometry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryValue_EsriDefaultGeometry_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void GeometryValue_EsriDefaultGeometry::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lengths_.Clear();
  coords_.Clear();
  ::memset(&hasz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hasm_) -
      reinterpret_cast<char*>(&hasz_)) + sizeof(hasm_));
  _internal_metadata_.Clear<std::string>();
}

const char* GeometryValue_EsriDefaultGeometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool hasZ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hasz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasM = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hasm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 lengths = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_lengths(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_lengths(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 coords = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_coords(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_coords(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryValue_EsriDefaultGeometry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool hasZ = 1;
  if (this->hasz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_hasz(), target);
  }

  // bool hasM = 2;
  if (this->hasm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_hasm(), target);
  }

  // repeated uint32 lengths = 3 [packed = true];
  {
    int byte_size = _lengths_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_lengths(), byte_size, target);
    }
  }

  // repeated sint64 coords = 4 [packed = true];
  {
    int byte_size = _coords_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          4, _internal_coords(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry)
  return target;
}

size_t GeometryValue_EsriDefaultGeometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 lengths = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->lengths_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lengths_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint64 coords = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->coords_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _coords_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool hasZ = 1;
  if (this->hasz() != 0) {
    total_size += 1 + 1;
  }

  // bool hasM = 2;
  if (this->hasm() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryValue_EsriDefaultGeometry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GeometryValue_EsriDefaultGeometry*>(
      &from));
}

void GeometryValue_EsriDefaultGeometry::MergeFrom(const GeometryValue_EsriDefaultGeometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lengths_.MergeFrom(from.lengths_);
  coords_.MergeFrom(from.coords_);
  if (from.hasz() != 0) {
    _internal_set_hasz(from._internal_hasz());
  }
  if (from.hasm() != 0) {
    _internal_set_hasm(from._internal_hasm());
  }
}

void GeometryValue_EsriDefaultGeometry::CopyFrom(const GeometryValue_EsriDefaultGeometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryValue_EsriDefaultGeometry::IsInitialized() const {
  return true;
}

void GeometryValue_EsriDefaultGeometry::InternalSwap(GeometryValue_EsriDefaultGeometry* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  lengths_.InternalSwap(&other->lengths_);
  coords_.InternalSwap(&other->coords_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeometryValue_EsriDefaultGeometry, hasm_)
      + sizeof(GeometryValue_EsriDefaultGeometry::hasm_)
      - PROTOBUF_FIELD_OFFSET(GeometryValue_EsriDefaultGeometry, hasz_)>(
          reinterpret_cast<char*>(&hasz_),
          reinterpret_cast<char*>(&other->hasz_));
}

std::string GeometryValue_EsriDefaultGeometry::GetTypeName() const {
  return "esriPBuffer.graph.GeometryValue.EsriDefaultGeometry";
}


// ===================================================================

void GeometryValue::InitAsDefaultInstance() {
}
class GeometryValue::_Internal {
 public:
  static const ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry& geometry(const GeometryValue* msg);
};

const ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry&
GeometryValue::_Internal::geometry(const GeometryValue* msg) {
  return *msg->compressed_geometry_.geometry_;
}
void GeometryValue::set_allocated_geometry(::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_compressed_geometry();
  if (geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geometry);
    if (message_arena != submessage_arena) {
      geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    set_has_geometry();
    compressed_geometry_.geometry_ = geometry;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GeometryValue.geometry)
}
GeometryValue::GeometryValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GeometryValue)
}
GeometryValue::GeometryValue(const GeometryValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  geometrytype_ = from.geometrytype_;
  clear_has_compressed_geometry();
  switch (from.compressed_geometry_case()) {
    case kGeometry: {
      _internal_mutable_geometry()->::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry::MergeFrom(from._internal_geometry());
      break;
    }
    case COMPRESSED_GEOMETRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GeometryValue)
}

void GeometryValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeometryValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  geometrytype_ = 0;
  clear_has_compressed_geometry();
}

GeometryValue::~GeometryValue() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GeometryValue)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GeometryValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_compressed_geometry()) {
    clear_compressed_geometry();
  }
}

void GeometryValue::ArenaDtor(void* object) {
  GeometryValue* _this = reinterpret_cast< GeometryValue* >(object);
  (void)_this;
}
void GeometryValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeometryValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryValue& GeometryValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void GeometryValue::clear_compressed_geometry() {
// @@protoc_insertion_point(one_of_clear_start:esriPBuffer.graph.GeometryValue)
  switch (compressed_geometry_case()) {
    case kGeometry: {
      if (GetArena() == nullptr) {
        delete compressed_geometry_.geometry_;
      }
      break;
    }
    case COMPRESSED_GEOMETRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMPRESSED_GEOMETRY_NOT_SET;
}


void GeometryValue::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GeometryValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geometrytype_ = 0;
  clear_compressed_geometry();
  _internal_metadata_.Clear<std::string>();
}

const char* GeometryValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.EsriTypes.GeometryType geometryType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_geometrytype(static_cast<::esriPBuffer::EsriTypes_GeometryType>(val));
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.GeometryValue.EsriDefaultGeometry geometry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GeometryValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.EsriTypes.GeometryType geometryType = 1;
  if (this->geometrytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_geometrytype(), target);
  }

  // .esriPBuffer.graph.GeometryValue.EsriDefaultGeometry geometry = 2;
  if (_internal_has_geometry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::geometry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GeometryValue)
  return target;
}

size_t GeometryValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GeometryValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .esriPBuffer.EsriTypes.GeometryType geometryType = 1;
  if (this->geometrytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_geometrytype());
  }

  switch (compressed_geometry_case()) {
    // .esriPBuffer.graph.GeometryValue.EsriDefaultGeometry geometry = 2;
    case kGeometry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *compressed_geometry_.geometry_);
      break;
    }
    case COMPRESSED_GEOMETRY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GeometryValue*>(
      &from));
}

void GeometryValue::MergeFrom(const GeometryValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GeometryValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.geometrytype() != 0) {
    _internal_set_geometrytype(from._internal_geometrytype());
  }
  switch (from.compressed_geometry_case()) {
    case kGeometry: {
      _internal_mutable_geometry()->::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry::MergeFrom(from._internal_geometry());
      break;
    }
    case COMPRESSED_GEOMETRY_NOT_SET: {
      break;
    }
  }
}

void GeometryValue::CopyFrom(const GeometryValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GeometryValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryValue::IsInitialized() const {
  return true;
}

void GeometryValue::InternalSwap(GeometryValue* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(geometrytype_, other->geometrytype_);
  swap(compressed_geometry_, other->compressed_geometry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string GeometryValue::GetTypeName() const {
  return "esriPBuffer.graph.GeometryValue";
}


// ===================================================================

void QuantizationParameters::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_QuantizationParameters_default_instance_._instance.get_mutable()->extent_ = const_cast< ::esriPBuffer::EsriTypes_Envelope*>(
      ::esriPBuffer::EsriTypes_Envelope::internal_default_instance());
}
class QuantizationParameters::_Internal {
 public:
  static const ::esriPBuffer::EsriTypes_Envelope& extent(const QuantizationParameters* msg);
};

const ::esriPBuffer::EsriTypes_Envelope&
QuantizationParameters::_Internal::extent(const QuantizationParameters* msg) {
  return *msg->extent_;
}
void QuantizationParameters::clear_extent() {
  if (GetArena() == nullptr && extent_ != nullptr) {
    delete extent_;
  }
  extent_ = nullptr;
}
QuantizationParameters::QuantizationParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.QuantizationParameters)
}
QuantizationParameters::QuantizationParameters(const QuantizationParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_extent()) {
    extent_ = new ::esriPBuffer::EsriTypes_Envelope(*from.extent_);
  } else {
    extent_ = nullptr;
  }
  ::memcpy(&tolerance_, &from.tolerance_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&tolerance_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.QuantizationParameters)
}

void QuantizationParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuantizationParameters_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  ::memset(&extent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&extent_)) + sizeof(mode_));
}

QuantizationParameters::~QuantizationParameters() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.QuantizationParameters)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void QuantizationParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete extent_;
}

void QuantizationParameters::ArenaDtor(void* object) {
  QuantizationParameters* _this = reinterpret_cast< QuantizationParameters* >(object);
  (void)_this;
}
void QuantizationParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuantizationParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuantizationParameters& QuantizationParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuantizationParameters_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void QuantizationParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.QuantizationParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && extent_ != nullptr) {
    delete extent_;
  }
  extent_ = nullptr;
  ::memset(&tolerance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&tolerance_)) + sizeof(mode_));
  _internal_metadata_.Clear<std::string>();
}

const char* QuantizationParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.EsriTypes.Envelope extent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_extent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.QuantizationParameters.QuantizeMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::esriPBuffer::graph::QuantizationParameters_QuantizeMode>(val));
        } else goto handle_unusual;
        continue;
      // double tolerance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuantizationParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.QuantizationParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.EsriTypes.Envelope extent = 1;
  if (this->has_extent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::extent(this), target, stream);
  }

  // .esriPBuffer.graph.QuantizationParameters.QuantizeMode mode = 2;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // double tolerance = 3;
  if (!(this->tolerance() <= 0 && this->tolerance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_tolerance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.QuantizationParameters)
  return target;
}

size_t QuantizationParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.QuantizationParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .esriPBuffer.EsriTypes.Envelope extent = 1;
  if (this->has_extent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extent_);
  }

  // double tolerance = 3;
  if (!(this->tolerance() <= 0 && this->tolerance() >= 0)) {
    total_size += 1 + 8;
  }

  // .esriPBuffer.graph.QuantizationParameters.QuantizeMode mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuantizationParameters::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const QuantizationParameters*>(
      &from));
}

void QuantizationParameters::MergeFrom(const QuantizationParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.QuantizationParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_extent()) {
    _internal_mutable_extent()->::esriPBuffer::EsriTypes_Envelope::MergeFrom(from._internal_extent());
  }
  if (!(from.tolerance() <= 0 && from.tolerance() >= 0)) {
    _internal_set_tolerance(from._internal_tolerance());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
}

void QuantizationParameters::CopyFrom(const QuantizationParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.QuantizationParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuantizationParameters::IsInitialized() const {
  return true;
}

void QuantizationParameters::InternalSwap(QuantizationParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuantizationParameters, mode_)
      + sizeof(QuantizationParameters::mode_)
      - PROTOBUF_FIELD_OFFSET(QuantizationParameters, extent_)>(
          reinterpret_cast<char*>(&extent_),
          reinterpret_cast<char*>(&other->extent_));
}

std::string QuantizationParameters::GetTypeName() const {
  return "esriPBuffer.graph.QuantizationParameters";
}


// ===================================================================

void Transform::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_Transform_default_instance_._instance.get_mutable()->scale_ = const_cast< ::esriPBuffer::EsriTypes_Scale*>(
      ::esriPBuffer::EsriTypes_Scale::internal_default_instance());
  ::esriPBuffer::graph::_Transform_default_instance_._instance.get_mutable()->translate_ = const_cast< ::esriPBuffer::EsriTypes_Translate*>(
      ::esriPBuffer::EsriTypes_Translate::internal_default_instance());
}
class Transform::_Internal {
 public:
  static const ::esriPBuffer::EsriTypes_Scale& scale(const Transform* msg);
  static const ::esriPBuffer::EsriTypes_Translate& translate(const Transform* msg);
};

const ::esriPBuffer::EsriTypes_Scale&
Transform::_Internal::scale(const Transform* msg) {
  return *msg->scale_;
}
const ::esriPBuffer::EsriTypes_Translate&
Transform::_Internal::translate(const Transform* msg) {
  return *msg->translate_;
}
void Transform::clear_scale() {
  if (GetArena() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
}
void Transform::clear_translate() {
  if (GetArena() == nullptr && translate_ != nullptr) {
    delete translate_;
  }
  translate_ = nullptr;
}
Transform::Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.Transform)
}
Transform::Transform(const Transform& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_scale()) {
    scale_ = new ::esriPBuffer::EsriTypes_Scale(*from.scale_);
  } else {
    scale_ = nullptr;
  }
  if (from._internal_has_translate()) {
    translate_ = new ::esriPBuffer::EsriTypes_Translate(*from.translate_);
  } else {
    translate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.Transform)
}

void Transform::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transform_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  ::memset(&scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&translate_) -
      reinterpret_cast<char*>(&scale_)) + sizeof(translate_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.Transform)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Transform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete translate_;
}

void Transform::ArenaDtor(void* object) {
  Transform* _this = reinterpret_cast< Transform* >(object);
  (void)_this;
}
void Transform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transform& Transform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transform_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
  if (GetArena() == nullptr && translate_ != nullptr) {
    delete translate_;
  }
  translate_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* Transform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.EsriTypes.Scale scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.EsriTypes.Translate translate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_translate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.EsriTypes.Scale scale = 1;
  if (this->has_scale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scale(this), target, stream);
  }

  // .esriPBuffer.EsriTypes.Translate translate = 2;
  if (this->has_translate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::translate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.Transform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .esriPBuffer.EsriTypes.Scale scale = 1;
  if (this->has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scale_);
  }

  // .esriPBuffer.EsriTypes.Translate translate = 2;
  if (this->has_translate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transform::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Transform*>(
      &from));
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scale()) {
    _internal_mutable_scale()->::esriPBuffer::EsriTypes_Scale::MergeFrom(from._internal_scale());
  }
  if (from.has_translate()) {
    _internal_mutable_translate()->::esriPBuffer::EsriTypes_Translate::MergeFrom(from._internal_translate());
  }
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::InternalSwap(Transform* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, translate_)
      + sizeof(Transform::translate_)
      - PROTOBUF_FIELD_OFFSET(Transform, scale_)>(
          reinterpret_cast<char*>(&scale_),
          reinterpret_cast<char*>(&other->scale_));
}

std::string Transform::GetTypeName() const {
  return "esriPBuffer.graph.Transform";
}


// ===================================================================

void GeometryArray::InitAsDefaultInstance() {
}
class GeometryArray::_Internal {
 public:
};

GeometryArray::GeometryArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GeometryArray)
}
GeometryArray::GeometryArray(const GeometryArray& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GeometryArray)
}

void GeometryArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeometryArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
}

GeometryArray::~GeometryArray() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GeometryArray)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GeometryArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GeometryArray::ArenaDtor(void* object) {
  GeometryArray* _this = reinterpret_cast< GeometryArray* >(object);
  (void)_this;
}
void GeometryArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeometryArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeometryArray& GeometryArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeometryArray_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void GeometryArray::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GeometryArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GeometryArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .esriPBuffer.graph.GeometryValue value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeometryArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GeometryArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .esriPBuffer.graph.GeometryValue value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GeometryArray)
  return target;
}

size_t GeometryArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GeometryArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .esriPBuffer.graph.GeometryValue value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeometryArray::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GeometryArray*>(
      &from));
}

void GeometryArray::MergeFrom(const GeometryArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GeometryArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void GeometryArray::CopyFrom(const GeometryArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GeometryArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryArray::IsInitialized() const {
  return true;
}

void GeometryArray::InternalSwap(GeometryArray* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

std::string GeometryArray::GetTypeName() const {
  return "esriPBuffer.graph.GeometryArray";
}


// ===================================================================

void PrimitiveValue::InitAsDefaultInstance() {
}
class PrimitiveValue::_Internal {
 public:
  static const ::esriPBuffer::graph::GeometryValue& geometry_value(const PrimitiveValue* msg);
};

const ::esriPBuffer::graph::GeometryValue&
PrimitiveValue::_Internal::geometry_value(const PrimitiveValue* msg) {
  return *msg->value_type_.geometry_value_;
}
void PrimitiveValue::set_allocated_geometry_value(::esriPBuffer::graph::GeometryValue* geometry_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value_type();
  if (geometry_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geometry_value);
    if (message_arena != submessage_arena) {
      geometry_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry_value, submessage_arena);
    }
    set_has_geometry_value();
    value_type_.geometry_value_ = geometry_value;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.PrimitiveValue.geometry_value)
}
PrimitiveValue::PrimitiveValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.PrimitiveValue)
}
PrimitiveValue::PrimitiveValue(const PrimitiveValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_value_type();
  switch (from.value_type_case()) {
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kFloatCompressedAsInt32: {
      _internal_set_float_compressed_as_int32(from._internal_float_compressed_as_int32());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kDoubleCompressedAsFloat: {
      _internal_set_double_compressed_as_float(from._internal_double_compressed_as_float());
      break;
    }
    case kDoubleCompressedAsInt64: {
      _internal_set_double_compressed_as_int64(from._internal_double_compressed_as_int64());
      break;
    }
    case kSint64Value: {
      _internal_set_sint64_value(from._internal_sint64_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kUuidValue: {
      _internal_set_uuid_value(from._internal_uuid_value());
      break;
    }
    case kGeometryValue: {
      _internal_mutable_geometry_value()->::esriPBuffer::graph::GeometryValue::MergeFrom(from._internal_geometry_value());
      break;
    }
    case kNullTag: {
      _internal_set_null_tag(from._internal_null_tag());
      break;
    }
    case kDatetimeValue: {
      _internal_set_datetime_value(from._internal_datetime_value());
      break;
    }
    case VALUE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.PrimitiveValue)
}

void PrimitiveValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrimitiveValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  clear_has_value_type();
}

PrimitiveValue::~PrimitiveValue() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.PrimitiveValue)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PrimitiveValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value_type()) {
    clear_value_type();
  }
}

void PrimitiveValue::ArenaDtor(void* object) {
  PrimitiveValue* _this = reinterpret_cast< PrimitiveValue* >(object);
  (void)_this;
}
void PrimitiveValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrimitiveValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrimitiveValue& PrimitiveValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrimitiveValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void PrimitiveValue::clear_value_type() {
// @@protoc_insertion_point(one_of_clear_start:esriPBuffer.graph.PrimitiveValue)
  switch (value_type_case()) {
    case kStringValue: {
      value_type_.string_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kFloatCompressedAsInt32: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kDoubleCompressedAsFloat: {
      // No need to clear
      break;
    }
    case kDoubleCompressedAsInt64: {
      // No need to clear
      break;
    }
    case kSint64Value: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kUuidValue: {
      value_type_.uuid_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kGeometryValue: {
      if (GetArena() == nullptr) {
        delete value_type_.geometry_value_;
      }
      break;
    }
    case kNullTag: {
      // No need to clear
      break;
    }
    case kDatetimeValue: {
      // No need to clear
      break;
    }
    case VALUE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_TYPE_NOT_SET;
}


void PrimitiveValue::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.PrimitiveValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value_type();
  _internal_metadata_.Clear<std::string>();
}

const char* PrimitiveValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string string_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _internal_set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // sint32 float_compressed_as_int32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_float_compressed_as_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double double_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float double_compressed_as_float = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _internal_set_double_compressed_as_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // sint64 double_compressed_as_int64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_double_compressed_as_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 sint64_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_sint64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bool_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes uuid_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_uuid_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.GeometryValue geometry_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool null_tag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _internal_set_null_tag(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 datetime_value = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _internal_set_datetime_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrimitiveValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.PrimitiveValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_value = 1;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.PrimitiveValue.string_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_value(), target);
  }

  // float float_value = 2;
  if (_internal_has_float_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_float_value(), target);
  }

  // sint32 float_compressed_as_int32 = 3;
  if (_internal_has_float_compressed_as_int32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_float_compressed_as_int32(), target);
  }

  // double double_value = 4;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_double_value(), target);
  }

  // float double_compressed_as_float = 5;
  if (_internal_has_double_compressed_as_float()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_double_compressed_as_float(), target);
  }

  // sint64 double_compressed_as_int64 = 6;
  if (_internal_has_double_compressed_as_int64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(6, this->_internal_double_compressed_as_int64(), target);
  }

  // sint64 sint64_value = 7;
  if (_internal_has_sint64_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(7, this->_internal_sint64_value(), target);
  }

  // bool bool_value = 8;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_bool_value(), target);
  }

  // bytes uuid_value = 9;
  if (_internal_has_uuid_value()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_uuid_value(), target);
  }

  // .esriPBuffer.graph.GeometryValue geometry_value = 11;
  if (_internal_has_geometry_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::geometry_value(this), target, stream);
  }

  // bool null_tag = 12;
  if (_internal_has_null_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_null_tag(), target);
  }

  // int64 datetime_value = 13;
  if (_internal_has_datetime_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_datetime_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.PrimitiveValue)
  return target;
}

size_t PrimitiveValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.PrimitiveValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_type_case()) {
    // string string_value = 1;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // float float_value = 2;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // sint32 float_compressed_as_int32 = 3;
    case kFloatCompressedAsInt32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_float_compressed_as_int32());
      break;
    }
    // double double_value = 4;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // float double_compressed_as_float = 5;
    case kDoubleCompressedAsFloat: {
      total_size += 1 + 4;
      break;
    }
    // sint64 double_compressed_as_int64 = 6;
    case kDoubleCompressedAsInt64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_double_compressed_as_int64());
      break;
    }
    // sint64 sint64_value = 7;
    case kSint64Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_sint64_value());
      break;
    }
    // bool bool_value = 8;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // bytes uuid_value = 9;
    case kUuidValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_uuid_value());
      break;
    }
    // .esriPBuffer.graph.GeometryValue geometry_value = 11;
    case kGeometryValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_type_.geometry_value_);
      break;
    }
    // bool null_tag = 12;
    case kNullTag: {
      total_size += 1 + 1;
      break;
    }
    // int64 datetime_value = 13;
    case kDatetimeValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_datetime_value());
      break;
    }
    case VALUE_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrimitiveValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PrimitiveValue*>(
      &from));
}

void PrimitiveValue::MergeFrom(const PrimitiveValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.PrimitiveValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_type_case()) {
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kFloatCompressedAsInt32: {
      _internal_set_float_compressed_as_int32(from._internal_float_compressed_as_int32());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kDoubleCompressedAsFloat: {
      _internal_set_double_compressed_as_float(from._internal_double_compressed_as_float());
      break;
    }
    case kDoubleCompressedAsInt64: {
      _internal_set_double_compressed_as_int64(from._internal_double_compressed_as_int64());
      break;
    }
    case kSint64Value: {
      _internal_set_sint64_value(from._internal_sint64_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kUuidValue: {
      _internal_set_uuid_value(from._internal_uuid_value());
      break;
    }
    case kGeometryValue: {
      _internal_mutable_geometry_value()->::esriPBuffer::graph::GeometryValue::MergeFrom(from._internal_geometry_value());
      break;
    }
    case kNullTag: {
      _internal_set_null_tag(from._internal_null_tag());
      break;
    }
    case kDatetimeValue: {
      _internal_set_datetime_value(from._internal_datetime_value());
      break;
    }
    case VALUE_TYPE_NOT_SET: {
      break;
    }
  }
}

void PrimitiveValue::CopyFrom(const PrimitiveValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.PrimitiveValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimitiveValue::IsInitialized() const {
  return true;
}

void PrimitiveValue::InternalSwap(PrimitiveValue* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(value_type_, other->value_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string PrimitiveValue::GetTypeName() const {
  return "esriPBuffer.graph.PrimitiveValue";
}


// ===================================================================

ObjectValue_PropertiesEntry_DoNotUse::ObjectValue_PropertiesEntry_DoNotUse() {}
ObjectValue_PropertiesEntry_DoNotUse::ObjectValue_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ObjectValue_PropertiesEntry_DoNotUse::MergeFrom(const ObjectValue_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void ObjectValue::InitAsDefaultInstance() {
}
class ObjectValue::_Internal {
 public:
};

ObjectValue::ObjectValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.ObjectValue)
}
ObjectValue::ObjectValue(const ObjectValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.ObjectValue)
}

void ObjectValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
}

ObjectValue::~ObjectValue() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.ObjectValue)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ObjectValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObjectValue::ArenaDtor(void* object) {
  ObjectValue* _this = reinterpret_cast< ObjectValue* >(object);
  (void)_this;
}
void ObjectValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectValue& ObjectValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void ObjectValue::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.ObjectValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObjectValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .esriPBuffer.graph.AnyValue> properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.ObjectValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .esriPBuffer.graph.AnyValue> properties = 1;
  if (!this->_internal_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.ObjectValue.PropertiesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ObjectValue_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it) {
        target = ObjectValue_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.ObjectValue)
  return target;
}

size_t ObjectValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.ObjectValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .esriPBuffer.graph.AnyValue> properties = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += ObjectValue_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ObjectValue*>(
      &from));
}

void ObjectValue::MergeFrom(const ObjectValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.ObjectValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
}

void ObjectValue::CopyFrom(const ObjectValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.ObjectValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectValue::IsInitialized() const {
  return true;
}

void ObjectValue::InternalSwap(ObjectValue* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
}

std::string ObjectValue::GetTypeName() const {
  return "esriPBuffer.graph.ObjectValue";
}


// ===================================================================

EntityValue_PropertiesEntry_DoNotUse::EntityValue_PropertiesEntry_DoNotUse() {}
EntityValue_PropertiesEntry_DoNotUse::EntityValue_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EntityValue_PropertiesEntry_DoNotUse::MergeFrom(const EntityValue_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void EntityValue::InitAsDefaultInstance() {
}
class EntityValue::_Internal {
 public:
};

EntityValue::EntityValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.EntityValue)
}
EntityValue::EntityValue(const EntityValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.EntityValue)
}

void EntityValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EntityValue::~EntityValue() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.EntityValue)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EntityValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EntityValue::ArenaDtor(void* object) {
  EntityValue* _this = reinterpret_cast< EntityValue* >(object);
  (void)_this;
}
void EntityValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EntityValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntityValue& EntityValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void EntityValue::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.EntityValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* EntityValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .esriPBuffer.graph.AnyValue> properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntityValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.EntityValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.EntityValue.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // map<string, .esriPBuffer.graph.AnyValue> properties = 2;
  if (!this->_internal_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.EntityValue.PropertiesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = EntityValue_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it) {
        target = EntityValue_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.EntityValue)
  return target;
}

size_t EntityValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.EntityValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .esriPBuffer.graph.AnyValue> properties = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += EntityValue_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string label = 1;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntityValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EntityValue*>(
      &from));
}

void EntityValue::MergeFrom(const EntityValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.EntityValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
}

void EntityValue::CopyFrom(const EntityValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.EntityValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityValue::IsInitialized() const {
  return true;
}

void EntityValue::InternalSwap(EntityValue* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string EntityValue::GetTypeName() const {
  return "esriPBuffer.graph.EntityValue";
}


// ===================================================================

RelationshipValue_PropertiesEntry_DoNotUse::RelationshipValue_PropertiesEntry_DoNotUse() {}
RelationshipValue_PropertiesEntry_DoNotUse::RelationshipValue_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RelationshipValue_PropertiesEntry_DoNotUse::MergeFrom(const RelationshipValue_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void RelationshipValue::InitAsDefaultInstance() {
}
class RelationshipValue::_Internal {
 public:
};

RelationshipValue::RelationshipValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.RelationshipValue)
}
RelationshipValue::RelationshipValue(const RelationshipValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.RelationshipValue)
}

void RelationshipValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RelationshipValue::~RelationshipValue() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.RelationshipValue)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RelationshipValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RelationshipValue::ArenaDtor(void* object) {
  RelationshipValue* _this = reinterpret_cast< RelationshipValue* >(object);
  (void)_this;
}
void RelationshipValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelationshipValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelationshipValue& RelationshipValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void RelationshipValue::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.RelationshipValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* RelationshipValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .esriPBuffer.graph.AnyValue> properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelationshipValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.RelationshipValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.RelationshipValue.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // map<string, .esriPBuffer.graph.AnyValue> properties = 2;
  if (!this->_internal_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.RelationshipValue.PropertiesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RelationshipValue_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it) {
        target = RelationshipValue_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.RelationshipValue)
  return target;
}

size_t RelationshipValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.RelationshipValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .esriPBuffer.graph.AnyValue> properties = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += RelationshipValue_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelationshipValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RelationshipValue*>(
      &from));
}

void RelationshipValue::MergeFrom(const RelationshipValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.RelationshipValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
}

void RelationshipValue::CopyFrom(const RelationshipValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.RelationshipValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationshipValue::IsInitialized() const {
  return true;
}

void RelationshipValue::InternalSwap(RelationshipValue* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string RelationshipValue::GetTypeName() const {
  return "esriPBuffer.graph.RelationshipValue";
}


// ===================================================================

void PathValue::InitAsDefaultInstance() {
}
class PathValue::_Internal {
 public:
};

PathValue::PathValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  entities_(arena),
  relationships_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.PathValue)
}
PathValue::PathValue(const PathValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      entities_(from.entities_),
      relationships_(from.relationships_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.PathValue)
}

void PathValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
}

PathValue::~PathValue() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.PathValue)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PathValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PathValue::ArenaDtor(void* object) {
  PathValue* _this = reinterpret_cast< PathValue* >(object);
  (void)_this;
}
void PathValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathValue& PathValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void PathValue::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.PathValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  relationships_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PathValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .esriPBuffer.graph.EntityValue entities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .esriPBuffer.graph.RelationshipValue relationships = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relationships(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.PathValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .esriPBuffer.graph.EntityValue entities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entities(i), target, stream);
  }

  // repeated .esriPBuffer.graph.RelationshipValue relationships = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_relationships_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_relationships(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.PathValue)
  return target;
}

size_t PathValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.PathValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .esriPBuffer.graph.EntityValue entities = 1;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .esriPBuffer.graph.RelationshipValue relationships = 2;
  total_size += 1UL * this->_internal_relationships_size();
  for (const auto& msg : this->relationships_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PathValue*>(
      &from));
}

void PathValue::MergeFrom(const PathValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.PathValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
  relationships_.MergeFrom(from.relationships_);
}

void PathValue::CopyFrom(const PathValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.PathValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathValue::IsInitialized() const {
  return true;
}

void PathValue::InternalSwap(PathValue* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  entities_.InternalSwap(&other->entities_);
  relationships_.InternalSwap(&other->relationships_);
}

std::string PathValue::GetTypeName() const {
  return "esriPBuffer.graph.PathValue";
}


// ===================================================================

void ArrayValue::InitAsDefaultInstance() {
}
class ArrayValue::_Internal {
 public:
};

ArrayValue::ArrayValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.ArrayValue)
}
ArrayValue::ArrayValue(const ArrayValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.ArrayValue)
}

void ArrayValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
}

ArrayValue::~ArrayValue() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.ArrayValue)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ArrayValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArrayValue::ArenaDtor(void* object) {
  ArrayValue* _this = reinterpret_cast< ArrayValue* >(object);
  (void)_this;
}
void ArrayValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArrayValue& ArrayValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void ArrayValue::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.ArrayValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ArrayValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .esriPBuffer.graph.AnyValue values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.ArrayValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .esriPBuffer.graph.AnyValue values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.ArrayValue)
  return target;
}

size_t ArrayValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.ArrayValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .esriPBuffer.graph.AnyValue values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ArrayValue*>(
      &from));
}

void ArrayValue::MergeFrom(const ArrayValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.ArrayValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ArrayValue::CopyFrom(const ArrayValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.ArrayValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayValue::IsInitialized() const {
  return true;
}

void ArrayValue::InternalSwap(ArrayValue* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

std::string ArrayValue::GetTypeName() const {
  return "esriPBuffer.graph.ArrayValue";
}


// ===================================================================

void AnyValue::InitAsDefaultInstance() {
}
class AnyValue::_Internal {
 public:
  static const ::esriPBuffer::graph::PrimitiveValue& primitive_value(const AnyValue* msg);
  static const ::esriPBuffer::graph::ArrayValue& array_value(const AnyValue* msg);
  static const ::esriPBuffer::graph::ObjectValue& object_value(const AnyValue* msg);
  static const ::esriPBuffer::graph::EntityValue& entity_value(const AnyValue* msg);
  static const ::esriPBuffer::graph::RelationshipValue& relationship_value(const AnyValue* msg);
  static const ::esriPBuffer::graph::PathValue& path_value(const AnyValue* msg);
  static const ::esriPBuffer::graph::FloatArray& float_array(const AnyValue* msg);
  static const ::esriPBuffer::graph::Int32Array& float_compressed_as_int32_array(const AnyValue* msg);
  static const ::esriPBuffer::graph::DoubleArray& double_array(const AnyValue* msg);
  static const ::esriPBuffer::graph::FloatArray& double_compressed_as_float_array(const AnyValue* msg);
  static const ::esriPBuffer::graph::Int64Array& double_compressed_as_int64_array(const AnyValue* msg);
  static const ::esriPBuffer::graph::Int64Array& sint64_array(const AnyValue* msg);
  static const ::esriPBuffer::graph::BoolArray& bool_array(const AnyValue* msg);
  static const ::esriPBuffer::graph::NullArray& null_array(const AnyValue* msg);
  static const ::esriPBuffer::graph::DateTimeArray& date_array(const AnyValue* msg);
  static const ::esriPBuffer::graph::StringArray& string_array(const AnyValue* msg);
  static const ::esriPBuffer::graph::GeometryArray& geometry_array(const AnyValue* msg);
};

const ::esriPBuffer::graph::PrimitiveValue&
AnyValue::_Internal::primitive_value(const AnyValue* msg) {
  return *msg->any_value_type_.primitive_value_;
}
const ::esriPBuffer::graph::ArrayValue&
AnyValue::_Internal::array_value(const AnyValue* msg) {
  return *msg->any_value_type_.array_value_;
}
const ::esriPBuffer::graph::ObjectValue&
AnyValue::_Internal::object_value(const AnyValue* msg) {
  return *msg->any_value_type_.object_value_;
}
const ::esriPBuffer::graph::EntityValue&
AnyValue::_Internal::entity_value(const AnyValue* msg) {
  return *msg->any_value_type_.entity_value_;
}
const ::esriPBuffer::graph::RelationshipValue&
AnyValue::_Internal::relationship_value(const AnyValue* msg) {
  return *msg->any_value_type_.relationship_value_;
}
const ::esriPBuffer::graph::PathValue&
AnyValue::_Internal::path_value(const AnyValue* msg) {
  return *msg->any_value_type_.path_value_;
}
const ::esriPBuffer::graph::FloatArray&
AnyValue::_Internal::float_array(const AnyValue* msg) {
  return *msg->any_value_type_.float_array_;
}
const ::esriPBuffer::graph::Int32Array&
AnyValue::_Internal::float_compressed_as_int32_array(const AnyValue* msg) {
  return *msg->any_value_type_.float_compressed_as_int32_array_;
}
const ::esriPBuffer::graph::DoubleArray&
AnyValue::_Internal::double_array(const AnyValue* msg) {
  return *msg->any_value_type_.double_array_;
}
const ::esriPBuffer::graph::FloatArray&
AnyValue::_Internal::double_compressed_as_float_array(const AnyValue* msg) {
  return *msg->any_value_type_.double_compressed_as_float_array_;
}
const ::esriPBuffer::graph::Int64Array&
AnyValue::_Internal::double_compressed_as_int64_array(const AnyValue* msg) {
  return *msg->any_value_type_.double_compressed_as_int64_array_;
}
const ::esriPBuffer::graph::Int64Array&
AnyValue::_Internal::sint64_array(const AnyValue* msg) {
  return *msg->any_value_type_.sint64_array_;
}
const ::esriPBuffer::graph::BoolArray&
AnyValue::_Internal::bool_array(const AnyValue* msg) {
  return *msg->any_value_type_.bool_array_;
}
const ::esriPBuffer::graph::NullArray&
AnyValue::_Internal::null_array(const AnyValue* msg) {
  return *msg->any_value_type_.null_array_;
}
const ::esriPBuffer::graph::DateTimeArray&
AnyValue::_Internal::date_array(const AnyValue* msg) {
  return *msg->any_value_type_.date_array_;
}
const ::esriPBuffer::graph::StringArray&
AnyValue::_Internal::string_array(const AnyValue* msg) {
  return *msg->any_value_type_.string_array_;
}
const ::esriPBuffer::graph::GeometryArray&
AnyValue::_Internal::geometry_array(const AnyValue* msg) {
  return *msg->any_value_type_.geometry_array_;
}
void AnyValue::set_allocated_primitive_value(::esriPBuffer::graph::PrimitiveValue* primitive_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (primitive_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(primitive_value);
    if (message_arena != submessage_arena) {
      primitive_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primitive_value, submessage_arena);
    }
    set_has_primitive_value();
    any_value_type_.primitive_value_ = primitive_value;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.primitive_value)
}
void AnyValue::set_allocated_array_value(::esriPBuffer::graph::ArrayValue* array_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (array_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(array_value);
    if (message_arena != submessage_arena) {
      array_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, array_value, submessage_arena);
    }
    set_has_array_value();
    any_value_type_.array_value_ = array_value;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.array_value)
}
void AnyValue::set_allocated_object_value(::esriPBuffer::graph::ObjectValue* object_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (object_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object_value);
    if (message_arena != submessage_arena) {
      object_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_value, submessage_arena);
    }
    set_has_object_value();
    any_value_type_.object_value_ = object_value;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.object_value)
}
void AnyValue::set_allocated_entity_value(::esriPBuffer::graph::EntityValue* entity_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (entity_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entity_value);
    if (message_arena != submessage_arena) {
      entity_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_value, submessage_arena);
    }
    set_has_entity_value();
    any_value_type_.entity_value_ = entity_value;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.entity_value)
}
void AnyValue::set_allocated_relationship_value(::esriPBuffer::graph::RelationshipValue* relationship_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (relationship_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(relationship_value);
    if (message_arena != submessage_arena) {
      relationship_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relationship_value, submessage_arena);
    }
    set_has_relationship_value();
    any_value_type_.relationship_value_ = relationship_value;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.relationship_value)
}
void AnyValue::set_allocated_path_value(::esriPBuffer::graph::PathValue* path_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (path_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(path_value);
    if (message_arena != submessage_arena) {
      path_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_value, submessage_arena);
    }
    set_has_path_value();
    any_value_type_.path_value_ = path_value;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.path_value)
}
void AnyValue::set_allocated_float_array(::esriPBuffer::graph::FloatArray* float_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (float_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(float_array);
    if (message_arena != submessage_arena) {
      float_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_array, submessage_arena);
    }
    set_has_float_array();
    any_value_type_.float_array_ = float_array;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.float_array)
}
void AnyValue::set_allocated_float_compressed_as_int32_array(::esriPBuffer::graph::Int32Array* float_compressed_as_int32_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (float_compressed_as_int32_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(float_compressed_as_int32_array);
    if (message_arena != submessage_arena) {
      float_compressed_as_int32_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_compressed_as_int32_array, submessage_arena);
    }
    set_has_float_compressed_as_int32_array();
    any_value_type_.float_compressed_as_int32_array_ = float_compressed_as_int32_array;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.float_compressed_as_int32_array)
}
void AnyValue::set_allocated_double_array(::esriPBuffer::graph::DoubleArray* double_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (double_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_array);
    if (message_arena != submessage_arena) {
      double_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_array, submessage_arena);
    }
    set_has_double_array();
    any_value_type_.double_array_ = double_array;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.double_array)
}
void AnyValue::set_allocated_double_compressed_as_float_array(::esriPBuffer::graph::FloatArray* double_compressed_as_float_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (double_compressed_as_float_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_compressed_as_float_array);
    if (message_arena != submessage_arena) {
      double_compressed_as_float_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_compressed_as_float_array, submessage_arena);
    }
    set_has_double_compressed_as_float_array();
    any_value_type_.double_compressed_as_float_array_ = double_compressed_as_float_array;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.double_compressed_as_float_array)
}
void AnyValue::set_allocated_double_compressed_as_int64_array(::esriPBuffer::graph::Int64Array* double_compressed_as_int64_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (double_compressed_as_int64_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_compressed_as_int64_array);
    if (message_arena != submessage_arena) {
      double_compressed_as_int64_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_compressed_as_int64_array, submessage_arena);
    }
    set_has_double_compressed_as_int64_array();
    any_value_type_.double_compressed_as_int64_array_ = double_compressed_as_int64_array;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.double_compressed_as_int64_array)
}
void AnyValue::set_allocated_sint64_array(::esriPBuffer::graph::Int64Array* sint64_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (sint64_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sint64_array);
    if (message_arena != submessage_arena) {
      sint64_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sint64_array, submessage_arena);
    }
    set_has_sint64_array();
    any_value_type_.sint64_array_ = sint64_array;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.sint64_array)
}
void AnyValue::set_allocated_bool_array(::esriPBuffer::graph::BoolArray* bool_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (bool_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bool_array);
    if (message_arena != submessage_arena) {
      bool_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bool_array, submessage_arena);
    }
    set_has_bool_array();
    any_value_type_.bool_array_ = bool_array;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.bool_array)
}
void AnyValue::set_allocated_null_array(::esriPBuffer::graph::NullArray* null_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (null_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(null_array);
    if (message_arena != submessage_arena) {
      null_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, null_array, submessage_arena);
    }
    set_has_null_array();
    any_value_type_.null_array_ = null_array;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.null_array)
}
void AnyValue::set_allocated_date_array(::esriPBuffer::graph::DateTimeArray* date_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (date_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(date_array);
    if (message_arena != submessage_arena) {
      date_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_array, submessage_arena);
    }
    set_has_date_array();
    any_value_type_.date_array_ = date_array;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.date_array)
}
void AnyValue::set_allocated_string_array(::esriPBuffer::graph::StringArray* string_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (string_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(string_array);
    if (message_arena != submessage_arena) {
      string_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_array, submessage_arena);
    }
    set_has_string_array();
    any_value_type_.string_array_ = string_array;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.string_array)
}
void AnyValue::set_allocated_geometry_array(::esriPBuffer::graph::GeometryArray* geometry_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_any_value_type();
  if (geometry_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geometry_array);
    if (message_arena != submessage_arena) {
      geometry_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry_array, submessage_arena);
    }
    set_has_geometry_array();
    any_value_type_.geometry_array_ = geometry_array;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.geometry_array)
}
AnyValue::AnyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.AnyValue)
}
AnyValue::AnyValue(const AnyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_any_value_type();
  switch (from.any_value_type_case()) {
    case kPrimitiveValue: {
      _internal_mutable_primitive_value()->::esriPBuffer::graph::PrimitiveValue::MergeFrom(from._internal_primitive_value());
      break;
    }
    case kArrayValue: {
      _internal_mutable_array_value()->::esriPBuffer::graph::ArrayValue::MergeFrom(from._internal_array_value());
      break;
    }
    case kObjectValue: {
      _internal_mutable_object_value()->::esriPBuffer::graph::ObjectValue::MergeFrom(from._internal_object_value());
      break;
    }
    case kEntityValue: {
      _internal_mutable_entity_value()->::esriPBuffer::graph::EntityValue::MergeFrom(from._internal_entity_value());
      break;
    }
    case kRelationshipValue: {
      _internal_mutable_relationship_value()->::esriPBuffer::graph::RelationshipValue::MergeFrom(from._internal_relationship_value());
      break;
    }
    case kPathValue: {
      _internal_mutable_path_value()->::esriPBuffer::graph::PathValue::MergeFrom(from._internal_path_value());
      break;
    }
    case kFloatArray: {
      _internal_mutable_float_array()->::esriPBuffer::graph::FloatArray::MergeFrom(from._internal_float_array());
      break;
    }
    case kFloatCompressedAsInt32Array: {
      _internal_mutable_float_compressed_as_int32_array()->::esriPBuffer::graph::Int32Array::MergeFrom(from._internal_float_compressed_as_int32_array());
      break;
    }
    case kDoubleArray: {
      _internal_mutable_double_array()->::esriPBuffer::graph::DoubleArray::MergeFrom(from._internal_double_array());
      break;
    }
    case kDoubleCompressedAsFloatArray: {
      _internal_mutable_double_compressed_as_float_array()->::esriPBuffer::graph::FloatArray::MergeFrom(from._internal_double_compressed_as_float_array());
      break;
    }
    case kDoubleCompressedAsInt64Array: {
      _internal_mutable_double_compressed_as_int64_array()->::esriPBuffer::graph::Int64Array::MergeFrom(from._internal_double_compressed_as_int64_array());
      break;
    }
    case kSint64Array: {
      _internal_mutable_sint64_array()->::esriPBuffer::graph::Int64Array::MergeFrom(from._internal_sint64_array());
      break;
    }
    case kBoolArray: {
      _internal_mutable_bool_array()->::esriPBuffer::graph::BoolArray::MergeFrom(from._internal_bool_array());
      break;
    }
    case kNullArray: {
      _internal_mutable_null_array()->::esriPBuffer::graph::NullArray::MergeFrom(from._internal_null_array());
      break;
    }
    case kUuidArray: {
      _internal_set_uuid_array(from._internal_uuid_array());
      break;
    }
    case kDateArray: {
      _internal_mutable_date_array()->::esriPBuffer::graph::DateTimeArray::MergeFrom(from._internal_date_array());
      break;
    }
    case kStringArray: {
      _internal_mutable_string_array()->::esriPBuffer::graph::StringArray::MergeFrom(from._internal_string_array());
      break;
    }
    case kGeometryArray: {
      _internal_mutable_geometry_array()->::esriPBuffer::graph::GeometryArray::MergeFrom(from._internal_geometry_array());
      break;
    }
    case ANY_VALUE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.AnyValue)
}

void AnyValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  clear_has_any_value_type();
}

AnyValue::~AnyValue() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.AnyValue)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void AnyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_any_value_type()) {
    clear_any_value_type();
  }
}

void AnyValue::ArenaDtor(void* object) {
  AnyValue* _this = reinterpret_cast< AnyValue* >(object);
  (void)_this;
}
void AnyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyValue& AnyValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void AnyValue::clear_any_value_type() {
// @@protoc_insertion_point(one_of_clear_start:esriPBuffer.graph.AnyValue)
  switch (any_value_type_case()) {
    case kPrimitiveValue: {
      if (GetArena() == nullptr) {
        delete any_value_type_.primitive_value_;
      }
      break;
    }
    case kArrayValue: {
      if (GetArena() == nullptr) {
        delete any_value_type_.array_value_;
      }
      break;
    }
    case kObjectValue: {
      if (GetArena() == nullptr) {
        delete any_value_type_.object_value_;
      }
      break;
    }
    case kEntityValue: {
      if (GetArena() == nullptr) {
        delete any_value_type_.entity_value_;
      }
      break;
    }
    case kRelationshipValue: {
      if (GetArena() == nullptr) {
        delete any_value_type_.relationship_value_;
      }
      break;
    }
    case kPathValue: {
      if (GetArena() == nullptr) {
        delete any_value_type_.path_value_;
      }
      break;
    }
    case kFloatArray: {
      if (GetArena() == nullptr) {
        delete any_value_type_.float_array_;
      }
      break;
    }
    case kFloatCompressedAsInt32Array: {
      if (GetArena() == nullptr) {
        delete any_value_type_.float_compressed_as_int32_array_;
      }
      break;
    }
    case kDoubleArray: {
      if (GetArena() == nullptr) {
        delete any_value_type_.double_array_;
      }
      break;
    }
    case kDoubleCompressedAsFloatArray: {
      if (GetArena() == nullptr) {
        delete any_value_type_.double_compressed_as_float_array_;
      }
      break;
    }
    case kDoubleCompressedAsInt64Array: {
      if (GetArena() == nullptr) {
        delete any_value_type_.double_compressed_as_int64_array_;
      }
      break;
    }
    case kSint64Array: {
      if (GetArena() == nullptr) {
        delete any_value_type_.sint64_array_;
      }
      break;
    }
    case kBoolArray: {
      if (GetArena() == nullptr) {
        delete any_value_type_.bool_array_;
      }
      break;
    }
    case kNullArray: {
      if (GetArena() == nullptr) {
        delete any_value_type_.null_array_;
      }
      break;
    }
    case kUuidArray: {
      any_value_type_.uuid_array_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kDateArray: {
      if (GetArena() == nullptr) {
        delete any_value_type_.date_array_;
      }
      break;
    }
    case kStringArray: {
      if (GetArena() == nullptr) {
        delete any_value_type_.string_array_;
      }
      break;
    }
    case kGeometryArray: {
      if (GetArena() == nullptr) {
        delete any_value_type_.geometry_array_;
      }
      break;
    }
    case ANY_VALUE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ANY_VALUE_TYPE_NOT_SET;
}


void AnyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.AnyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_any_value_type();
  _internal_metadata_.Clear<std::string>();
}

const char* AnyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.graph.PrimitiveValue primitive_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_primitive_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.ArrayValue array_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_array_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.ObjectValue object_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.EntityValue entity_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.RelationshipValue relationship_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_relationship_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.PathValue path_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.FloatArray float_array = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.Int32Array float_compressed_as_int32_array = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_compressed_as_int32_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.DoubleArray double_array = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.FloatArray double_compressed_as_float_array = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_compressed_as_float_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.Int64Array double_compressed_as_int64_array = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_compressed_as_int64_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.Int64Array sint64_array = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sint64_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.BoolArray bool_array = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_bool_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.NullArray null_array = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_null_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes uuid_array = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_uuid_array();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.StringArray string_array = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.GeometryArray geometry_array = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.DateTimeArray date_array = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.AnyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.graph.PrimitiveValue primitive_value = 1;
  if (_internal_has_primitive_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::primitive_value(this), target, stream);
  }

  // .esriPBuffer.graph.ArrayValue array_value = 2;
  if (_internal_has_array_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::array_value(this), target, stream);
  }

  // .esriPBuffer.graph.ObjectValue object_value = 3;
  if (_internal_has_object_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::object_value(this), target, stream);
  }

  // .esriPBuffer.graph.EntityValue entity_value = 4;
  if (_internal_has_entity_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::entity_value(this), target, stream);
  }

  // .esriPBuffer.graph.RelationshipValue relationship_value = 5;
  if (_internal_has_relationship_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::relationship_value(this), target, stream);
  }

  // .esriPBuffer.graph.PathValue path_value = 6;
  if (_internal_has_path_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::path_value(this), target, stream);
  }

  // .esriPBuffer.graph.FloatArray float_array = 7;
  if (_internal_has_float_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::float_array(this), target, stream);
  }

  // .esriPBuffer.graph.Int32Array float_compressed_as_int32_array = 8;
  if (_internal_has_float_compressed_as_int32_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::float_compressed_as_int32_array(this), target, stream);
  }

  // .esriPBuffer.graph.DoubleArray double_array = 9;
  if (_internal_has_double_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::double_array(this), target, stream);
  }

  // .esriPBuffer.graph.FloatArray double_compressed_as_float_array = 10;
  if (_internal_has_double_compressed_as_float_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::double_compressed_as_float_array(this), target, stream);
  }

  // .esriPBuffer.graph.Int64Array double_compressed_as_int64_array = 11;
  if (_internal_has_double_compressed_as_int64_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::double_compressed_as_int64_array(this), target, stream);
  }

  // .esriPBuffer.graph.Int64Array sint64_array = 12;
  if (_internal_has_sint64_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::sint64_array(this), target, stream);
  }

  // .esriPBuffer.graph.BoolArray bool_array = 13;
  if (_internal_has_bool_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::bool_array(this), target, stream);
  }

  // .esriPBuffer.graph.NullArray null_array = 14;
  if (_internal_has_null_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::null_array(this), target, stream);
  }

  // bytes uuid_array = 15;
  if (_internal_has_uuid_array()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_uuid_array(), target);
  }

  // .esriPBuffer.graph.StringArray string_array = 16;
  if (_internal_has_string_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::string_array(this), target, stream);
  }

  // .esriPBuffer.graph.GeometryArray geometry_array = 18;
  if (_internal_has_geometry_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::geometry_array(this), target, stream);
  }

  // .esriPBuffer.graph.DateTimeArray date_array = 19;
  if (_internal_has_date_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::date_array(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.AnyValue)
  return target;
}

size_t AnyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.AnyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (any_value_type_case()) {
    // .esriPBuffer.graph.PrimitiveValue primitive_value = 1;
    case kPrimitiveValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.primitive_value_);
      break;
    }
    // .esriPBuffer.graph.ArrayValue array_value = 2;
    case kArrayValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.array_value_);
      break;
    }
    // .esriPBuffer.graph.ObjectValue object_value = 3;
    case kObjectValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.object_value_);
      break;
    }
    // .esriPBuffer.graph.EntityValue entity_value = 4;
    case kEntityValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.entity_value_);
      break;
    }
    // .esriPBuffer.graph.RelationshipValue relationship_value = 5;
    case kRelationshipValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.relationship_value_);
      break;
    }
    // .esriPBuffer.graph.PathValue path_value = 6;
    case kPathValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.path_value_);
      break;
    }
    // .esriPBuffer.graph.FloatArray float_array = 7;
    case kFloatArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.float_array_);
      break;
    }
    // .esriPBuffer.graph.Int32Array float_compressed_as_int32_array = 8;
    case kFloatCompressedAsInt32Array: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.float_compressed_as_int32_array_);
      break;
    }
    // .esriPBuffer.graph.DoubleArray double_array = 9;
    case kDoubleArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.double_array_);
      break;
    }
    // .esriPBuffer.graph.FloatArray double_compressed_as_float_array = 10;
    case kDoubleCompressedAsFloatArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.double_compressed_as_float_array_);
      break;
    }
    // .esriPBuffer.graph.Int64Array double_compressed_as_int64_array = 11;
    case kDoubleCompressedAsInt64Array: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.double_compressed_as_int64_array_);
      break;
    }
    // .esriPBuffer.graph.Int64Array sint64_array = 12;
    case kSint64Array: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.sint64_array_);
      break;
    }
    // .esriPBuffer.graph.BoolArray bool_array = 13;
    case kBoolArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.bool_array_);
      break;
    }
    // .esriPBuffer.graph.NullArray null_array = 14;
    case kNullArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.null_array_);
      break;
    }
    // bytes uuid_array = 15;
    case kUuidArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_uuid_array());
      break;
    }
    // .esriPBuffer.graph.DateTimeArray date_array = 19;
    case kDateArray: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.date_array_);
      break;
    }
    // .esriPBuffer.graph.StringArray string_array = 16;
    case kStringArray: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.string_array_);
      break;
    }
    // .esriPBuffer.graph.GeometryArray geometry_array = 18;
    case kGeometryArray: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_value_type_.geometry_array_);
      break;
    }
    case ANY_VALUE_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyValue::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AnyValue*>(
      &from));
}

void AnyValue::MergeFrom(const AnyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.AnyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.any_value_type_case()) {
    case kPrimitiveValue: {
      _internal_mutable_primitive_value()->::esriPBuffer::graph::PrimitiveValue::MergeFrom(from._internal_primitive_value());
      break;
    }
    case kArrayValue: {
      _internal_mutable_array_value()->::esriPBuffer::graph::ArrayValue::MergeFrom(from._internal_array_value());
      break;
    }
    case kObjectValue: {
      _internal_mutable_object_value()->::esriPBuffer::graph::ObjectValue::MergeFrom(from._internal_object_value());
      break;
    }
    case kEntityValue: {
      _internal_mutable_entity_value()->::esriPBuffer::graph::EntityValue::MergeFrom(from._internal_entity_value());
      break;
    }
    case kRelationshipValue: {
      _internal_mutable_relationship_value()->::esriPBuffer::graph::RelationshipValue::MergeFrom(from._internal_relationship_value());
      break;
    }
    case kPathValue: {
      _internal_mutable_path_value()->::esriPBuffer::graph::PathValue::MergeFrom(from._internal_path_value());
      break;
    }
    case kFloatArray: {
      _internal_mutable_float_array()->::esriPBuffer::graph::FloatArray::MergeFrom(from._internal_float_array());
      break;
    }
    case kFloatCompressedAsInt32Array: {
      _internal_mutable_float_compressed_as_int32_array()->::esriPBuffer::graph::Int32Array::MergeFrom(from._internal_float_compressed_as_int32_array());
      break;
    }
    case kDoubleArray: {
      _internal_mutable_double_array()->::esriPBuffer::graph::DoubleArray::MergeFrom(from._internal_double_array());
      break;
    }
    case kDoubleCompressedAsFloatArray: {
      _internal_mutable_double_compressed_as_float_array()->::esriPBuffer::graph::FloatArray::MergeFrom(from._internal_double_compressed_as_float_array());
      break;
    }
    case kDoubleCompressedAsInt64Array: {
      _internal_mutable_double_compressed_as_int64_array()->::esriPBuffer::graph::Int64Array::MergeFrom(from._internal_double_compressed_as_int64_array());
      break;
    }
    case kSint64Array: {
      _internal_mutable_sint64_array()->::esriPBuffer::graph::Int64Array::MergeFrom(from._internal_sint64_array());
      break;
    }
    case kBoolArray: {
      _internal_mutable_bool_array()->::esriPBuffer::graph::BoolArray::MergeFrom(from._internal_bool_array());
      break;
    }
    case kNullArray: {
      _internal_mutable_null_array()->::esriPBuffer::graph::NullArray::MergeFrom(from._internal_null_array());
      break;
    }
    case kUuidArray: {
      _internal_set_uuid_array(from._internal_uuid_array());
      break;
    }
    case kDateArray: {
      _internal_mutable_date_array()->::esriPBuffer::graph::DateTimeArray::MergeFrom(from._internal_date_array());
      break;
    }
    case kStringArray: {
      _internal_mutable_string_array()->::esriPBuffer::graph::StringArray::MergeFrom(from._internal_string_array());
      break;
    }
    case kGeometryArray: {
      _internal_mutable_geometry_array()->::esriPBuffer::graph::GeometryArray::MergeFrom(from._internal_geometry_array());
      break;
    }
    case ANY_VALUE_TYPE_NOT_SET: {
      break;
    }
  }
}

void AnyValue::CopyFrom(const AnyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.AnyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyValue::IsInitialized() const {
  return true;
}

void AnyValue::InternalSwap(AnyValue* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(any_value_type_, other->any_value_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string AnyValue::GetTypeName() const {
  return "esriPBuffer.graph.AnyValue";
}


// ===================================================================

void Error::InitAsDefaultInstance() {
}
class Error::_Internal {
 public:
};

Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error_message(),
      GetArena());
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.Error)
}

void Error::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Error_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_code_ = PROTOBUF_LONGLONG(0);
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.Error)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::ArenaDtor(void* object) {
  Error* _this = reinterpret_cast< Error* >(object);
  (void)_this;
}
void Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Error& Error::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Error_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base);
  return *internal_default_instance();
}


void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_code_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint64 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Error::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 error_code = 1;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(1, this->_internal_error_code(), target);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.Error.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.Error)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // sint64 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Error::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Error*>(
      &from));
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(error_code_, other->error_code_);
}

std::string Error::GetTypeName() const {
  return "esriPBuffer.graph.Error";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::FloatArray* Arena::CreateMaybeMessage< ::esriPBuffer::graph::FloatArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::FloatArray >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::DoubleArray* Arena::CreateMaybeMessage< ::esriPBuffer::graph::DoubleArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::DoubleArray >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::Int32Array* Arena::CreateMaybeMessage< ::esriPBuffer::graph::Int32Array >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::Int32Array >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::Int64Array* Arena::CreateMaybeMessage< ::esriPBuffer::graph::Int64Array >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::Int64Array >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::BoolArray* Arena::CreateMaybeMessage< ::esriPBuffer::graph::BoolArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::BoolArray >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::DateTimeArray* Arena::CreateMaybeMessage< ::esriPBuffer::graph::DateTimeArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::DateTimeArray >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::NullArray* Arena::CreateMaybeMessage< ::esriPBuffer::graph::NullArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::NullArray >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::StringArray* Arena::CreateMaybeMessage< ::esriPBuffer::graph::StringArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::StringArray >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GeometryValue* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GeometryValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GeometryValue >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::QuantizationParameters* Arena::CreateMaybeMessage< ::esriPBuffer::graph::QuantizationParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::QuantizationParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::Transform* Arena::CreateMaybeMessage< ::esriPBuffer::graph::Transform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::Transform >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GeometryArray* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GeometryArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GeometryArray >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::PrimitiveValue* Arena::CreateMaybeMessage< ::esriPBuffer::graph::PrimitiveValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::PrimitiveValue >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::ObjectValue_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::ObjectValue_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::ObjectValue_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::ObjectValue* Arena::CreateMaybeMessage< ::esriPBuffer::graph::ObjectValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::ObjectValue >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::EntityValue_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::EntityValue_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::EntityValue_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::EntityValue* Arena::CreateMaybeMessage< ::esriPBuffer::graph::EntityValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::EntityValue >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::RelationshipValue_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::RelationshipValue_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::RelationshipValue_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::RelationshipValue* Arena::CreateMaybeMessage< ::esriPBuffer::graph::RelationshipValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::RelationshipValue >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::PathValue* Arena::CreateMaybeMessage< ::esriPBuffer::graph::PathValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::PathValue >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::ArrayValue* Arena::CreateMaybeMessage< ::esriPBuffer::graph::ArrayValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::ArrayValue >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::AnyValue* Arena::CreateMaybeMessage< ::esriPBuffer::graph::AnyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::AnyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::Error* Arena::CreateMaybeMessage< ::esriPBuffer::graph::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::Error >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
