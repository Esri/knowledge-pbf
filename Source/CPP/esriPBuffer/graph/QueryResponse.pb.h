// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/QueryResponse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fQueryResponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fQueryResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "esriPBuffer/graph/EsriGraphTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fQueryResponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_esriPBuffer_2fgraph_2fQueryResponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace esriPBuffer {
namespace graph {
class GraphQueryResultFrame;
class GraphQueryResultFrameDefaultTypeInternal;
extern GraphQueryResultFrameDefaultTypeInternal _GraphQueryResultFrame_default_instance_;
class GraphQueryResultHeader;
class GraphQueryResultHeaderDefaultTypeInternal;
extern GraphQueryResultHeaderDefaultTypeInternal _GraphQueryResultHeader_default_instance_;
class GraphQueryRow;
class GraphQueryRowDefaultTypeInternal;
extern GraphQueryRowDefaultTypeInternal _GraphQueryRow_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> ::esriPBuffer::graph::GraphQueryResultFrame* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphQueryResultFrame>(Arena*);
template<> ::esriPBuffer::graph::GraphQueryResultHeader* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphQueryResultHeader>(Arena*);
template<> ::esriPBuffer::graph::GraphQueryRow* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphQueryRow>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esriPBuffer {
namespace graph {

// ===================================================================

class GraphQueryResultHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphQueryResultHeader) */ {
 public:
  inline GraphQueryResultHeader() : GraphQueryResultHeader(nullptr) {}
  virtual ~GraphQueryResultHeader();

  GraphQueryResultHeader(const GraphQueryResultHeader& from);
  GraphQueryResultHeader(GraphQueryResultHeader&& from) noexcept
    : GraphQueryResultHeader() {
    *this = ::std::move(from);
  }

  inline GraphQueryResultHeader& operator=(const GraphQueryResultHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphQueryResultHeader& operator=(GraphQueryResultHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphQueryResultHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphQueryResultHeader* internal_default_instance() {
    return reinterpret_cast<const GraphQueryResultHeader*>(
               &_GraphQueryResultHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GraphQueryResultHeader& a, GraphQueryResultHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphQueryResultHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphQueryResultHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphQueryResultHeader* New() const final {
    return CreateMaybeMessage<GraphQueryResultHeader>(nullptr);
  }

  GraphQueryResultHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphQueryResultHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphQueryResultHeader& from);
  void MergeFrom(const GraphQueryResultHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphQueryResultHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphQueryResultHeader";
  }
  protected:
  explicit GraphQueryResultHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNamesFieldNumber = 4,
    kTransformFieldNumber = 2,
    kErrorFieldNumber = 3,
    kDataModelTimestampFieldNumber = 1,
    kCompressedFramesFieldNumber = 5,
  };
  // repeated string field_names = 4;
  int field_names_size() const;
  private:
  int _internal_field_names_size() const;
  public:
  void clear_field_names();
  const std::string& field_names(int index) const;
  std::string* mutable_field_names(int index);
  void set_field_names(int index, const std::string& value);
  void set_field_names(int index, std::string&& value);
  void set_field_names(int index, const char* value);
  void set_field_names(int index, const char* value, size_t size);
  std::string* add_field_names();
  void add_field_names(const std::string& value);
  void add_field_names(std::string&& value);
  void add_field_names(const char* value);
  void add_field_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& field_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_field_names();
  private:
  const std::string& _internal_field_names(int index) const;
  std::string* _internal_add_field_names();
  public:

  // .esriPBuffer.graph.Transform transform = 2;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::esriPBuffer::graph::Transform& transform() const;
  ::esriPBuffer::graph::Transform* release_transform();
  ::esriPBuffer::graph::Transform* mutable_transform();
  void set_allocated_transform(::esriPBuffer::graph::Transform* transform);
  private:
  const ::esriPBuffer::graph::Transform& _internal_transform() const;
  ::esriPBuffer::graph::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::esriPBuffer::graph::Transform* transform);
  ::esriPBuffer::graph::Transform* unsafe_arena_release_transform();

  // .esriPBuffer.graph.Error error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::esriPBuffer::graph::Error& error() const;
  ::esriPBuffer::graph::Error* release_error();
  ::esriPBuffer::graph::Error* mutable_error();
  void set_allocated_error(::esriPBuffer::graph::Error* error);
  private:
  const ::esriPBuffer::graph::Error& _internal_error() const;
  ::esriPBuffer::graph::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::esriPBuffer::graph::Error* error);
  ::esriPBuffer::graph::Error* unsafe_arena_release_error();

  // uint64 data_model_timestamp = 1;
  void clear_data_model_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 data_model_timestamp() const;
  void set_data_model_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data_model_timestamp() const;
  void _internal_set_data_model_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool compressed_frames = 5;
  void clear_compressed_frames();
  bool compressed_frames() const;
  void set_compressed_frames(bool value);
  private:
  bool _internal_compressed_frames() const;
  void _internal_set_compressed_frames(bool value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphQueryResultHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> field_names_;
  ::esriPBuffer::graph::Transform* transform_;
  ::esriPBuffer::graph::Error* error_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data_model_timestamp_;
  bool compressed_frames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fQueryResponse_2eproto;
};
// -------------------------------------------------------------------

class GraphQueryRow PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphQueryRow) */ {
 public:
  inline GraphQueryRow() : GraphQueryRow(nullptr) {}
  virtual ~GraphQueryRow();

  GraphQueryRow(const GraphQueryRow& from);
  GraphQueryRow(GraphQueryRow&& from) noexcept
    : GraphQueryRow() {
    *this = ::std::move(from);
  }

  inline GraphQueryRow& operator=(const GraphQueryRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphQueryRow& operator=(GraphQueryRow&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphQueryRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphQueryRow* internal_default_instance() {
    return reinterpret_cast<const GraphQueryRow*>(
               &_GraphQueryRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GraphQueryRow& a, GraphQueryRow& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphQueryRow* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphQueryRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphQueryRow* New() const final {
    return CreateMaybeMessage<GraphQueryRow>(nullptr);
  }

  GraphQueryRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphQueryRow>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphQueryRow& from);
  void MergeFrom(const GraphQueryRow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphQueryRow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphQueryRow";
  }
  protected:
  explicit GraphQueryRow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .esriPBuffer.graph.AnyValue values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::esriPBuffer::graph::AnyValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::AnyValue >*
      mutable_values();
  private:
  const ::esriPBuffer::graph::AnyValue& _internal_values(int index) const;
  ::esriPBuffer::graph::AnyValue* _internal_add_values();
  public:
  const ::esriPBuffer::graph::AnyValue& values(int index) const;
  ::esriPBuffer::graph::AnyValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::AnyValue >&
      values() const;

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphQueryRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::AnyValue > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fQueryResponse_2eproto;
};
// -------------------------------------------------------------------

class GraphQueryResultFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphQueryResultFrame) */ {
 public:
  inline GraphQueryResultFrame() : GraphQueryResultFrame(nullptr) {}
  virtual ~GraphQueryResultFrame();

  GraphQueryResultFrame(const GraphQueryResultFrame& from);
  GraphQueryResultFrame(GraphQueryResultFrame&& from) noexcept
    : GraphQueryResultFrame() {
    *this = ::std::move(from);
  }

  inline GraphQueryResultFrame& operator=(const GraphQueryResultFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphQueryResultFrame& operator=(GraphQueryResultFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphQueryResultFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphQueryResultFrame* internal_default_instance() {
    return reinterpret_cast<const GraphQueryResultFrame*>(
               &_GraphQueryResultFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GraphQueryResultFrame& a, GraphQueryResultFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphQueryResultFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphQueryResultFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphQueryResultFrame* New() const final {
    return CreateMaybeMessage<GraphQueryResultFrame>(nullptr);
  }

  GraphQueryResultFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphQueryResultFrame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphQueryResultFrame& from);
  void MergeFrom(const GraphQueryResultFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphQueryResultFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphQueryResultFrame";
  }
  protected:
  explicit GraphQueryResultFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 2,
    kErrorFieldNumber = 1,
    kExceededTransferLimitFieldNumber = 3,
  };
  // repeated .esriPBuffer.graph.GraphQueryRow rows = 2;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::esriPBuffer::graph::GraphQueryRow* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GraphQueryRow >*
      mutable_rows();
  private:
  const ::esriPBuffer::graph::GraphQueryRow& _internal_rows(int index) const;
  ::esriPBuffer::graph::GraphQueryRow* _internal_add_rows();
  public:
  const ::esriPBuffer::graph::GraphQueryRow& rows(int index) const;
  ::esriPBuffer::graph::GraphQueryRow* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GraphQueryRow >&
      rows() const;

  // .esriPBuffer.graph.Error error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::esriPBuffer::graph::Error& error() const;
  ::esriPBuffer::graph::Error* release_error();
  ::esriPBuffer::graph::Error* mutable_error();
  void set_allocated_error(::esriPBuffer::graph::Error* error);
  private:
  const ::esriPBuffer::graph::Error& _internal_error() const;
  ::esriPBuffer::graph::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::esriPBuffer::graph::Error* error);
  ::esriPBuffer::graph::Error* unsafe_arena_release_error();

  // bool exceeded_transfer_limit = 3;
  void clear_exceeded_transfer_limit();
  bool exceeded_transfer_limit() const;
  void set_exceeded_transfer_limit(bool value);
  private:
  bool _internal_exceeded_transfer_limit() const;
  void _internal_set_exceeded_transfer_limit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphQueryResultFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GraphQueryRow > rows_;
  ::esriPBuffer::graph::Error* error_;
  bool exceeded_transfer_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fQueryResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GraphQueryResultHeader

// uint64 data_model_timestamp = 1;
inline void GraphQueryResultHeader::clear_data_model_timestamp() {
  data_model_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GraphQueryResultHeader::_internal_data_model_timestamp() const {
  return data_model_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GraphQueryResultHeader::data_model_timestamp() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphQueryResultHeader.data_model_timestamp)
  return _internal_data_model_timestamp();
}
inline void GraphQueryResultHeader::_internal_set_data_model_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data_model_timestamp_ = value;
}
inline void GraphQueryResultHeader::set_data_model_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data_model_timestamp(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphQueryResultHeader.data_model_timestamp)
}

// .esriPBuffer.graph.Transform transform = 2;
inline bool GraphQueryResultHeader::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool GraphQueryResultHeader::has_transform() const {
  return _internal_has_transform();
}
inline const ::esriPBuffer::graph::Transform& GraphQueryResultHeader::_internal_transform() const {
  const ::esriPBuffer::graph::Transform* p = transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::Transform*>(
      &::esriPBuffer::graph::_Transform_default_instance_);
}
inline const ::esriPBuffer::graph::Transform& GraphQueryResultHeader::transform() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphQueryResultHeader.transform)
  return _internal_transform();
}
inline void GraphQueryResultHeader::unsafe_arena_set_allocated_transform(
    ::esriPBuffer::graph::Transform* transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphQueryResultHeader.transform)
}
inline ::esriPBuffer::graph::Transform* GraphQueryResultHeader::release_transform() {
  
  ::esriPBuffer::graph::Transform* temp = transform_;
  transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::Transform* GraphQueryResultHeader::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphQueryResultHeader.transform)
  
  ::esriPBuffer::graph::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::Transform* GraphQueryResultHeader::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::Transform>(GetArena());
    transform_ = p;
  }
  return transform_;
}
inline ::esriPBuffer::graph::Transform* GraphQueryResultHeader::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphQueryResultHeader.transform)
  return _internal_mutable_transform();
}
inline void GraphQueryResultHeader::set_allocated_transform(::esriPBuffer::graph::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform)->GetArena();
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphQueryResultHeader.transform)
}

// .esriPBuffer.graph.Error error = 3;
inline bool GraphQueryResultHeader::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GraphQueryResultHeader::has_error() const {
  return _internal_has_error();
}
inline const ::esriPBuffer::graph::Error& GraphQueryResultHeader::_internal_error() const {
  const ::esriPBuffer::graph::Error* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::Error*>(
      &::esriPBuffer::graph::_Error_default_instance_);
}
inline const ::esriPBuffer::graph::Error& GraphQueryResultHeader::error() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphQueryResultHeader.error)
  return _internal_error();
}
inline void GraphQueryResultHeader::unsafe_arena_set_allocated_error(
    ::esriPBuffer::graph::Error* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphQueryResultHeader.error)
}
inline ::esriPBuffer::graph::Error* GraphQueryResultHeader::release_error() {
  
  ::esriPBuffer::graph::Error* temp = error_;
  error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::Error* GraphQueryResultHeader::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphQueryResultHeader.error)
  
  ::esriPBuffer::graph::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::Error* GraphQueryResultHeader::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::Error>(GetArena());
    error_ = p;
  }
  return error_;
}
inline ::esriPBuffer::graph::Error* GraphQueryResultHeader::mutable_error() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphQueryResultHeader.error)
  return _internal_mutable_error();
}
inline void GraphQueryResultHeader::set_allocated_error(::esriPBuffer::graph::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphQueryResultHeader.error)
}

// repeated string field_names = 4;
inline int GraphQueryResultHeader::_internal_field_names_size() const {
  return field_names_.size();
}
inline int GraphQueryResultHeader::field_names_size() const {
  return _internal_field_names_size();
}
inline void GraphQueryResultHeader::clear_field_names() {
  field_names_.Clear();
}
inline std::string* GraphQueryResultHeader::add_field_names() {
  // @@protoc_insertion_point(field_add_mutable:esriPBuffer.graph.GraphQueryResultHeader.field_names)
  return _internal_add_field_names();
}
inline const std::string& GraphQueryResultHeader::_internal_field_names(int index) const {
  return field_names_.Get(index);
}
inline const std::string& GraphQueryResultHeader::field_names(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphQueryResultHeader.field_names)
  return _internal_field_names(index);
}
inline std::string* GraphQueryResultHeader::mutable_field_names(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphQueryResultHeader.field_names)
  return field_names_.Mutable(index);
}
inline void GraphQueryResultHeader::set_field_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphQueryResultHeader.field_names)
  field_names_.Mutable(index)->assign(value);
}
inline void GraphQueryResultHeader::set_field_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphQueryResultHeader.field_names)
  field_names_.Mutable(index)->assign(std::move(value));
}
inline void GraphQueryResultHeader::set_field_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphQueryResultHeader.field_names)
}
inline void GraphQueryResultHeader::set_field_names(int index, const char* value, size_t size) {
  field_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphQueryResultHeader.field_names)
}
inline std::string* GraphQueryResultHeader::_internal_add_field_names() {
  return field_names_.Add();
}
inline void GraphQueryResultHeader::add_field_names(const std::string& value) {
  field_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GraphQueryResultHeader.field_names)
}
inline void GraphQueryResultHeader::add_field_names(std::string&& value) {
  field_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GraphQueryResultHeader.field_names)
}
inline void GraphQueryResultHeader::add_field_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:esriPBuffer.graph.GraphQueryResultHeader.field_names)
}
inline void GraphQueryResultHeader::add_field_names(const char* value, size_t size) {
  field_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:esriPBuffer.graph.GraphQueryResultHeader.field_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GraphQueryResultHeader::field_names() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.GraphQueryResultHeader.field_names)
  return field_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GraphQueryResultHeader::mutable_field_names() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.GraphQueryResultHeader.field_names)
  return &field_names_;
}

// bool compressed_frames = 5;
inline void GraphQueryResultHeader::clear_compressed_frames() {
  compressed_frames_ = false;
}
inline bool GraphQueryResultHeader::_internal_compressed_frames() const {
  return compressed_frames_;
}
inline bool GraphQueryResultHeader::compressed_frames() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphQueryResultHeader.compressed_frames)
  return _internal_compressed_frames();
}
inline void GraphQueryResultHeader::_internal_set_compressed_frames(bool value) {
  
  compressed_frames_ = value;
}
inline void GraphQueryResultHeader::set_compressed_frames(bool value) {
  _internal_set_compressed_frames(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphQueryResultHeader.compressed_frames)
}

// -------------------------------------------------------------------

// GraphQueryRow

// repeated .esriPBuffer.graph.AnyValue values = 1;
inline int GraphQueryRow::_internal_values_size() const {
  return values_.size();
}
inline int GraphQueryRow::values_size() const {
  return _internal_values_size();
}
inline ::esriPBuffer::graph::AnyValue* GraphQueryRow::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphQueryRow.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::AnyValue >*
GraphQueryRow::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.GraphQueryRow.values)
  return &values_;
}
inline const ::esriPBuffer::graph::AnyValue& GraphQueryRow::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::esriPBuffer::graph::AnyValue& GraphQueryRow::values(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphQueryRow.values)
  return _internal_values(index);
}
inline ::esriPBuffer::graph::AnyValue* GraphQueryRow::_internal_add_values() {
  return values_.Add();
}
inline ::esriPBuffer::graph::AnyValue* GraphQueryRow::add_values() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GraphQueryRow.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::AnyValue >&
GraphQueryRow::values() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.GraphQueryRow.values)
  return values_;
}

// -------------------------------------------------------------------

// GraphQueryResultFrame

// .esriPBuffer.graph.Error error = 1;
inline bool GraphQueryResultFrame::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GraphQueryResultFrame::has_error() const {
  return _internal_has_error();
}
inline const ::esriPBuffer::graph::Error& GraphQueryResultFrame::_internal_error() const {
  const ::esriPBuffer::graph::Error* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::Error*>(
      &::esriPBuffer::graph::_Error_default_instance_);
}
inline const ::esriPBuffer::graph::Error& GraphQueryResultFrame::error() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphQueryResultFrame.error)
  return _internal_error();
}
inline void GraphQueryResultFrame::unsafe_arena_set_allocated_error(
    ::esriPBuffer::graph::Error* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphQueryResultFrame.error)
}
inline ::esriPBuffer::graph::Error* GraphQueryResultFrame::release_error() {
  
  ::esriPBuffer::graph::Error* temp = error_;
  error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::Error* GraphQueryResultFrame::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphQueryResultFrame.error)
  
  ::esriPBuffer::graph::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::Error* GraphQueryResultFrame::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::Error>(GetArena());
    error_ = p;
  }
  return error_;
}
inline ::esriPBuffer::graph::Error* GraphQueryResultFrame::mutable_error() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphQueryResultFrame.error)
  return _internal_mutable_error();
}
inline void GraphQueryResultFrame::set_allocated_error(::esriPBuffer::graph::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphQueryResultFrame.error)
}

// repeated .esriPBuffer.graph.GraphQueryRow rows = 2;
inline int GraphQueryResultFrame::_internal_rows_size() const {
  return rows_.size();
}
inline int GraphQueryResultFrame::rows_size() const {
  return _internal_rows_size();
}
inline void GraphQueryResultFrame::clear_rows() {
  rows_.Clear();
}
inline ::esriPBuffer::graph::GraphQueryRow* GraphQueryResultFrame::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphQueryResultFrame.rows)
  return rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GraphQueryRow >*
GraphQueryResultFrame::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.GraphQueryResultFrame.rows)
  return &rows_;
}
inline const ::esriPBuffer::graph::GraphQueryRow& GraphQueryResultFrame::_internal_rows(int index) const {
  return rows_.Get(index);
}
inline const ::esriPBuffer::graph::GraphQueryRow& GraphQueryResultFrame::rows(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphQueryResultFrame.rows)
  return _internal_rows(index);
}
inline ::esriPBuffer::graph::GraphQueryRow* GraphQueryResultFrame::_internal_add_rows() {
  return rows_.Add();
}
inline ::esriPBuffer::graph::GraphQueryRow* GraphQueryResultFrame::add_rows() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GraphQueryResultFrame.rows)
  return _internal_add_rows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GraphQueryRow >&
GraphQueryResultFrame::rows() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.GraphQueryResultFrame.rows)
  return rows_;
}

// bool exceeded_transfer_limit = 3;
inline void GraphQueryResultFrame::clear_exceeded_transfer_limit() {
  exceeded_transfer_limit_ = false;
}
inline bool GraphQueryResultFrame::_internal_exceeded_transfer_limit() const {
  return exceeded_transfer_limit_;
}
inline bool GraphQueryResultFrame::exceeded_transfer_limit() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphQueryResultFrame.exceeded_transfer_limit)
  return _internal_exceeded_transfer_limit();
}
inline void GraphQueryResultFrame::_internal_set_exceeded_transfer_limit(bool value) {
  
  exceeded_transfer_limit_ = value;
}
inline void GraphQueryResultFrame::set_exceeded_transfer_limit(bool value) {
  _internal_set_exceeded_transfer_limit(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphQueryResultFrame.exceeded_transfer_limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace esriPBuffer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fQueryResponse_2eproto
