// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/QueryRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fQueryRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fQueryRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
#include "esriPBuffer/EsriTypes.pb.h"
#include "esriPBuffer/graph/EsriGraphTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fQueryRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_esriPBuffer_2fgraph_2fQueryRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace esriPBuffer {
namespace graph {
class GraphQueryRequest;
class GraphQueryRequestDefaultTypeInternal;
extern GraphQueryRequestDefaultTypeInternal _GraphQueryRequest_default_instance_;
class GraphQueryRequest_ParametersEntry_DoNotUse;
class GraphQueryRequest_ParametersEntry_DoNotUseDefaultTypeInternal;
extern GraphQueryRequest_ParametersEntry_DoNotUseDefaultTypeInternal _GraphQueryRequest_ParametersEntry_DoNotUse_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> ::esriPBuffer::graph::GraphQueryRequest* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphQueryRequest>(Arena*);
template<> ::esriPBuffer::graph::GraphQueryRequest_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphQueryRequest_ParametersEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esriPBuffer {
namespace graph {

// ===================================================================

class GraphQueryRequest_ParametersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<GraphQueryRequest_ParametersEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::AnyValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<GraphQueryRequest_ParametersEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::AnyValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GraphQueryRequest_ParametersEntry_DoNotUse();
  explicit GraphQueryRequest_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GraphQueryRequest_ParametersEntry_DoNotUse& other);
  static const GraphQueryRequest_ParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GraphQueryRequest_ParametersEntry_DoNotUse*>(&_GraphQueryRequest_ParametersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "esriPBuffer.graph.GraphQueryRequest.ParametersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class GraphQueryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphQueryRequest) */ {
 public:
  inline GraphQueryRequest() : GraphQueryRequest(nullptr) {}
  virtual ~GraphQueryRequest();

  GraphQueryRequest(const GraphQueryRequest& from);
  GraphQueryRequest(GraphQueryRequest&& from) noexcept
    : GraphQueryRequest() {
    *this = ::std::move(from);
  }

  inline GraphQueryRequest& operator=(const GraphQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphQueryRequest& operator=(GraphQueryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphQueryRequest* internal_default_instance() {
    return reinterpret_cast<const GraphQueryRequest*>(
               &_GraphQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GraphQueryRequest& a, GraphQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphQueryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphQueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphQueryRequest* New() const final {
    return CreateMaybeMessage<GraphQueryRequest>(nullptr);
  }

  GraphQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphQueryRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphQueryRequest& from);
  void MergeFrom(const GraphQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphQueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphQueryRequest";
  }
  protected:
  explicit GraphQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 2,
    kOpenCypherQueryFieldNumber = 1,
    kOutSrFieldNumber = 4,
    kDatumTransformationFieldNumber = 5,
    kQuantizationParametersFieldNumber = 7,
    kInputTransformFieldNumber = 8,
    kFeatureEncodingFieldNumber = 3,
  };
  // map<string, .esriPBuffer.graph.AnyValue> parameters = 2;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
      _internal_parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
      _internal_mutable_parameters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
      parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
      mutable_parameters();

  // string open_cypher_query = 1;
  void clear_open_cypher_query();
  const std::string& open_cypher_query() const;
  void set_open_cypher_query(const std::string& value);
  void set_open_cypher_query(std::string&& value);
  void set_open_cypher_query(const char* value);
  void set_open_cypher_query(const char* value, size_t size);
  std::string* mutable_open_cypher_query();
  std::string* release_open_cypher_query();
  void set_allocated_open_cypher_query(std::string* open_cypher_query);
  private:
  const std::string& _internal_open_cypher_query() const;
  void _internal_set_open_cypher_query(const std::string& value);
  std::string* _internal_mutable_open_cypher_query();
  public:

  // .esriPBuffer.EsriTypes.SpatialReference out_sr = 4;
  bool has_out_sr() const;
  private:
  bool _internal_has_out_sr() const;
  public:
  void clear_out_sr();
  const ::esriPBuffer::EsriTypes_SpatialReference& out_sr() const;
  ::esriPBuffer::EsriTypes_SpatialReference* release_out_sr();
  ::esriPBuffer::EsriTypes_SpatialReference* mutable_out_sr();
  void set_allocated_out_sr(::esriPBuffer::EsriTypes_SpatialReference* out_sr);
  private:
  const ::esriPBuffer::EsriTypes_SpatialReference& _internal_out_sr() const;
  ::esriPBuffer::EsriTypes_SpatialReference* _internal_mutable_out_sr();
  public:
  void unsafe_arena_set_allocated_out_sr(
      ::esriPBuffer::EsriTypes_SpatialReference* out_sr);
  ::esriPBuffer::EsriTypes_SpatialReference* unsafe_arena_release_out_sr();

  // .esriPBuffer.EsriTypes.DatumTransformation datum_transformation = 5;
  bool has_datum_transformation() const;
  private:
  bool _internal_has_datum_transformation() const;
  public:
  void clear_datum_transformation();
  const ::esriPBuffer::EsriTypes_DatumTransformation& datum_transformation() const;
  ::esriPBuffer::EsriTypes_DatumTransformation* release_datum_transformation();
  ::esriPBuffer::EsriTypes_DatumTransformation* mutable_datum_transformation();
  void set_allocated_datum_transformation(::esriPBuffer::EsriTypes_DatumTransformation* datum_transformation);
  private:
  const ::esriPBuffer::EsriTypes_DatumTransformation& _internal_datum_transformation() const;
  ::esriPBuffer::EsriTypes_DatumTransformation* _internal_mutable_datum_transformation();
  public:
  void unsafe_arena_set_allocated_datum_transformation(
      ::esriPBuffer::EsriTypes_DatumTransformation* datum_transformation);
  ::esriPBuffer::EsriTypes_DatumTransformation* unsafe_arena_release_datum_transformation();

  // .esriPBuffer.graph.QuantizationParameters quantization_parameters = 7;
  bool has_quantization_parameters() const;
  private:
  bool _internal_has_quantization_parameters() const;
  public:
  void clear_quantization_parameters();
  const ::esriPBuffer::graph::QuantizationParameters& quantization_parameters() const;
  ::esriPBuffer::graph::QuantizationParameters* release_quantization_parameters();
  ::esriPBuffer::graph::QuantizationParameters* mutable_quantization_parameters();
  void set_allocated_quantization_parameters(::esriPBuffer::graph::QuantizationParameters* quantization_parameters);
  private:
  const ::esriPBuffer::graph::QuantizationParameters& _internal_quantization_parameters() const;
  ::esriPBuffer::graph::QuantizationParameters* _internal_mutable_quantization_parameters();
  public:
  void unsafe_arena_set_allocated_quantization_parameters(
      ::esriPBuffer::graph::QuantizationParameters* quantization_parameters);
  ::esriPBuffer::graph::QuantizationParameters* unsafe_arena_release_quantization_parameters();

  // .esriPBuffer.graph.Transform input_transform = 8;
  bool has_input_transform() const;
  private:
  bool _internal_has_input_transform() const;
  public:
  void clear_input_transform();
  const ::esriPBuffer::graph::Transform& input_transform() const;
  ::esriPBuffer::graph::Transform* release_input_transform();
  ::esriPBuffer::graph::Transform* mutable_input_transform();
  void set_allocated_input_transform(::esriPBuffer::graph::Transform* input_transform);
  private:
  const ::esriPBuffer::graph::Transform& _internal_input_transform() const;
  ::esriPBuffer::graph::Transform* _internal_mutable_input_transform();
  public:
  void unsafe_arena_set_allocated_input_transform(
      ::esriPBuffer::graph::Transform* input_transform);
  ::esriPBuffer::graph::Transform* unsafe_arena_release_input_transform();

  // .esriPBuffer.EsriTypes.esriFeatureEncoding feature_encoding = 3;
  void clear_feature_encoding();
  ::esriPBuffer::EsriTypes_esriFeatureEncoding feature_encoding() const;
  void set_feature_encoding(::esriPBuffer::EsriTypes_esriFeatureEncoding value);
  private:
  ::esriPBuffer::EsriTypes_esriFeatureEncoding _internal_feature_encoding() const;
  void _internal_set_feature_encoding(::esriPBuffer::EsriTypes_esriFeatureEncoding value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      GraphQueryRequest_ParametersEntry_DoNotUse,
      std::string, ::esriPBuffer::graph::AnyValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_cypher_query_;
  ::esriPBuffer::EsriTypes_SpatialReference* out_sr_;
  ::esriPBuffer::EsriTypes_DatumTransformation* datum_transformation_;
  ::esriPBuffer::graph::QuantizationParameters* quantization_parameters_;
  ::esriPBuffer::graph::Transform* input_transform_;
  int feature_encoding_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fQueryRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GraphQueryRequest

// string open_cypher_query = 1;
inline void GraphQueryRequest::clear_open_cypher_query() {
  open_cypher_query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphQueryRequest::open_cypher_query() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphQueryRequest.open_cypher_query)
  return _internal_open_cypher_query();
}
inline void GraphQueryRequest::set_open_cypher_query(const std::string& value) {
  _internal_set_open_cypher_query(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphQueryRequest.open_cypher_query)
}
inline std::string* GraphQueryRequest::mutable_open_cypher_query() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphQueryRequest.open_cypher_query)
  return _internal_mutable_open_cypher_query();
}
inline const std::string& GraphQueryRequest::_internal_open_cypher_query() const {
  return open_cypher_query_.Get();
}
inline void GraphQueryRequest::_internal_set_open_cypher_query(const std::string& value) {
  
  open_cypher_query_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphQueryRequest::set_open_cypher_query(std::string&& value) {
  
  open_cypher_query_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphQueryRequest.open_cypher_query)
}
inline void GraphQueryRequest::set_open_cypher_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  open_cypher_query_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphQueryRequest.open_cypher_query)
}
inline void GraphQueryRequest::set_open_cypher_query(const char* value,
    size_t size) {
  
  open_cypher_query_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphQueryRequest.open_cypher_query)
}
inline std::string* GraphQueryRequest::_internal_mutable_open_cypher_query() {
  
  return open_cypher_query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphQueryRequest::release_open_cypher_query() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphQueryRequest.open_cypher_query)
  return open_cypher_query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphQueryRequest::set_allocated_open_cypher_query(std::string* open_cypher_query) {
  if (open_cypher_query != nullptr) {
    
  } else {
    
  }
  open_cypher_query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), open_cypher_query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphQueryRequest.open_cypher_query)
}

// map<string, .esriPBuffer.graph.AnyValue> parameters = 2;
inline int GraphQueryRequest::_internal_parameters_size() const {
  return parameters_.size();
}
inline int GraphQueryRequest::parameters_size() const {
  return _internal_parameters_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
GraphQueryRequest::_internal_parameters() const {
  return parameters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
GraphQueryRequest::parameters() const {
  // @@protoc_insertion_point(field_map:esriPBuffer.graph.GraphQueryRequest.parameters)
  return _internal_parameters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
GraphQueryRequest::_internal_mutable_parameters() {
  return parameters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
GraphQueryRequest::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_map:esriPBuffer.graph.GraphQueryRequest.parameters)
  return _internal_mutable_parameters();
}

// .esriPBuffer.EsriTypes.esriFeatureEncoding feature_encoding = 3;
inline void GraphQueryRequest::clear_feature_encoding() {
  feature_encoding_ = 0;
}
inline ::esriPBuffer::EsriTypes_esriFeatureEncoding GraphQueryRequest::_internal_feature_encoding() const {
  return static_cast< ::esriPBuffer::EsriTypes_esriFeatureEncoding >(feature_encoding_);
}
inline ::esriPBuffer::EsriTypes_esriFeatureEncoding GraphQueryRequest::feature_encoding() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphQueryRequest.feature_encoding)
  return _internal_feature_encoding();
}
inline void GraphQueryRequest::_internal_set_feature_encoding(::esriPBuffer::EsriTypes_esriFeatureEncoding value) {
  
  feature_encoding_ = value;
}
inline void GraphQueryRequest::set_feature_encoding(::esriPBuffer::EsriTypes_esriFeatureEncoding value) {
  _internal_set_feature_encoding(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphQueryRequest.feature_encoding)
}

// .esriPBuffer.EsriTypes.SpatialReference out_sr = 4;
inline bool GraphQueryRequest::_internal_has_out_sr() const {
  return this != internal_default_instance() && out_sr_ != nullptr;
}
inline bool GraphQueryRequest::has_out_sr() const {
  return _internal_has_out_sr();
}
inline const ::esriPBuffer::EsriTypes_SpatialReference& GraphQueryRequest::_internal_out_sr() const {
  const ::esriPBuffer::EsriTypes_SpatialReference* p = out_sr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_SpatialReference*>(
      &::esriPBuffer::_EsriTypes_SpatialReference_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_SpatialReference& GraphQueryRequest::out_sr() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphQueryRequest.out_sr)
  return _internal_out_sr();
}
inline void GraphQueryRequest::unsafe_arena_set_allocated_out_sr(
    ::esriPBuffer::EsriTypes_SpatialReference* out_sr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(out_sr_);
  }
  out_sr_ = out_sr;
  if (out_sr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphQueryRequest.out_sr)
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphQueryRequest::release_out_sr() {
  
  ::esriPBuffer::EsriTypes_SpatialReference* temp = out_sr_;
  out_sr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphQueryRequest::unsafe_arena_release_out_sr() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphQueryRequest.out_sr)
  
  ::esriPBuffer::EsriTypes_SpatialReference* temp = out_sr_;
  out_sr_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphQueryRequest::_internal_mutable_out_sr() {
  
  if (out_sr_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_SpatialReference>(GetArena());
    out_sr_ = p;
  }
  return out_sr_;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphQueryRequest::mutable_out_sr() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphQueryRequest.out_sr)
  return _internal_mutable_out_sr();
}
inline void GraphQueryRequest::set_allocated_out_sr(::esriPBuffer::EsriTypes_SpatialReference* out_sr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(out_sr_);
  }
  if (out_sr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(out_sr)->GetArena();
    if (message_arena != submessage_arena) {
      out_sr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, out_sr, submessage_arena);
    }
    
  } else {
    
  }
  out_sr_ = out_sr;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphQueryRequest.out_sr)
}

// .esriPBuffer.EsriTypes.DatumTransformation datum_transformation = 5;
inline bool GraphQueryRequest::_internal_has_datum_transformation() const {
  return this != internal_default_instance() && datum_transformation_ != nullptr;
}
inline bool GraphQueryRequest::has_datum_transformation() const {
  return _internal_has_datum_transformation();
}
inline const ::esriPBuffer::EsriTypes_DatumTransformation& GraphQueryRequest::_internal_datum_transformation() const {
  const ::esriPBuffer::EsriTypes_DatumTransformation* p = datum_transformation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_DatumTransformation*>(
      &::esriPBuffer::_EsriTypes_DatumTransformation_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_DatumTransformation& GraphQueryRequest::datum_transformation() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphQueryRequest.datum_transformation)
  return _internal_datum_transformation();
}
inline void GraphQueryRequest::unsafe_arena_set_allocated_datum_transformation(
    ::esriPBuffer::EsriTypes_DatumTransformation* datum_transformation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datum_transformation_);
  }
  datum_transformation_ = datum_transformation;
  if (datum_transformation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphQueryRequest.datum_transformation)
}
inline ::esriPBuffer::EsriTypes_DatumTransformation* GraphQueryRequest::release_datum_transformation() {
  
  ::esriPBuffer::EsriTypes_DatumTransformation* temp = datum_transformation_;
  datum_transformation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_DatumTransformation* GraphQueryRequest::unsafe_arena_release_datum_transformation() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphQueryRequest.datum_transformation)
  
  ::esriPBuffer::EsriTypes_DatumTransformation* temp = datum_transformation_;
  datum_transformation_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_DatumTransformation* GraphQueryRequest::_internal_mutable_datum_transformation() {
  
  if (datum_transformation_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_DatumTransformation>(GetArena());
    datum_transformation_ = p;
  }
  return datum_transformation_;
}
inline ::esriPBuffer::EsriTypes_DatumTransformation* GraphQueryRequest::mutable_datum_transformation() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphQueryRequest.datum_transformation)
  return _internal_mutable_datum_transformation();
}
inline void GraphQueryRequest::set_allocated_datum_transformation(::esriPBuffer::EsriTypes_DatumTransformation* datum_transformation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(datum_transformation_);
  }
  if (datum_transformation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datum_transformation)->GetArena();
    if (message_arena != submessage_arena) {
      datum_transformation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datum_transformation, submessage_arena);
    }
    
  } else {
    
  }
  datum_transformation_ = datum_transformation;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphQueryRequest.datum_transformation)
}

// .esriPBuffer.graph.QuantizationParameters quantization_parameters = 7;
inline bool GraphQueryRequest::_internal_has_quantization_parameters() const {
  return this != internal_default_instance() && quantization_parameters_ != nullptr;
}
inline bool GraphQueryRequest::has_quantization_parameters() const {
  return _internal_has_quantization_parameters();
}
inline const ::esriPBuffer::graph::QuantizationParameters& GraphQueryRequest::_internal_quantization_parameters() const {
  const ::esriPBuffer::graph::QuantizationParameters* p = quantization_parameters_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::QuantizationParameters*>(
      &::esriPBuffer::graph::_QuantizationParameters_default_instance_);
}
inline const ::esriPBuffer::graph::QuantizationParameters& GraphQueryRequest::quantization_parameters() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphQueryRequest.quantization_parameters)
  return _internal_quantization_parameters();
}
inline void GraphQueryRequest::unsafe_arena_set_allocated_quantization_parameters(
    ::esriPBuffer::graph::QuantizationParameters* quantization_parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quantization_parameters_);
  }
  quantization_parameters_ = quantization_parameters;
  if (quantization_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphQueryRequest.quantization_parameters)
}
inline ::esriPBuffer::graph::QuantizationParameters* GraphQueryRequest::release_quantization_parameters() {
  
  ::esriPBuffer::graph::QuantizationParameters* temp = quantization_parameters_;
  quantization_parameters_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::QuantizationParameters* GraphQueryRequest::unsafe_arena_release_quantization_parameters() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphQueryRequest.quantization_parameters)
  
  ::esriPBuffer::graph::QuantizationParameters* temp = quantization_parameters_;
  quantization_parameters_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::QuantizationParameters* GraphQueryRequest::_internal_mutable_quantization_parameters() {
  
  if (quantization_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::QuantizationParameters>(GetArena());
    quantization_parameters_ = p;
  }
  return quantization_parameters_;
}
inline ::esriPBuffer::graph::QuantizationParameters* GraphQueryRequest::mutable_quantization_parameters() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphQueryRequest.quantization_parameters)
  return _internal_mutable_quantization_parameters();
}
inline void GraphQueryRequest::set_allocated_quantization_parameters(::esriPBuffer::graph::QuantizationParameters* quantization_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(quantization_parameters_);
  }
  if (quantization_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quantization_parameters)->GetArena();
    if (message_arena != submessage_arena) {
      quantization_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quantization_parameters, submessage_arena);
    }
    
  } else {
    
  }
  quantization_parameters_ = quantization_parameters;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphQueryRequest.quantization_parameters)
}

// .esriPBuffer.graph.Transform input_transform = 8;
inline bool GraphQueryRequest::_internal_has_input_transform() const {
  return this != internal_default_instance() && input_transform_ != nullptr;
}
inline bool GraphQueryRequest::has_input_transform() const {
  return _internal_has_input_transform();
}
inline const ::esriPBuffer::graph::Transform& GraphQueryRequest::_internal_input_transform() const {
  const ::esriPBuffer::graph::Transform* p = input_transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::Transform*>(
      &::esriPBuffer::graph::_Transform_default_instance_);
}
inline const ::esriPBuffer::graph::Transform& GraphQueryRequest::input_transform() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphQueryRequest.input_transform)
  return _internal_input_transform();
}
inline void GraphQueryRequest::unsafe_arena_set_allocated_input_transform(
    ::esriPBuffer::graph::Transform* input_transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_transform_);
  }
  input_transform_ = input_transform;
  if (input_transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphQueryRequest.input_transform)
}
inline ::esriPBuffer::graph::Transform* GraphQueryRequest::release_input_transform() {
  
  ::esriPBuffer::graph::Transform* temp = input_transform_;
  input_transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::Transform* GraphQueryRequest::unsafe_arena_release_input_transform() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphQueryRequest.input_transform)
  
  ::esriPBuffer::graph::Transform* temp = input_transform_;
  input_transform_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::Transform* GraphQueryRequest::_internal_mutable_input_transform() {
  
  if (input_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::Transform>(GetArena());
    input_transform_ = p;
  }
  return input_transform_;
}
inline ::esriPBuffer::graph::Transform* GraphQueryRequest::mutable_input_transform() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphQueryRequest.input_transform)
  return _internal_mutable_input_transform();
}
inline void GraphQueryRequest::set_allocated_input_transform(::esriPBuffer::graph::Transform* input_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_transform_);
  }
  if (input_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_transform)->GetArena();
    if (message_arena != submessage_arena) {
      input_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_transform, submessage_arena);
    }
    
  } else {
    
  }
  input_transform_ = input_transform;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphQueryRequest.input_transform)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace esriPBuffer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fQueryRequest_2eproto
