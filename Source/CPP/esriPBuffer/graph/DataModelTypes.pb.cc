// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/DataModelTypes.proto

#include "esriPBuffer/graph/DataModelTypes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fEsriTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EsriTypes_FieldIndex_esriPBuffer_2fEsriTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fDataModelTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphProperty_esriPBuffer_2fgraph_2fDataModelTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fDataModelTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NamedObjectType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PrimitiveValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
namespace esriPBuffer {
namespace graph {
class NamedObjectTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedObjectType> _instance;
} _NamedObjectType_default_instance_;
class EntityTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntityType> _instance;
} _EntityType_default_instance_;
class RelationshipTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelationshipType> _instance;
} _RelationshipType_default_instance_;
class GraphPropertyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphProperty> _instance;
} _GraphProperty_default_instance_;
class GraphDocumentEntityTypeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphDocumentEntityTypeInfo> _instance;
} _GraphDocumentEntityTypeInfo_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
static void InitDefaultsscc_info_EntityType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_EntityType_default_instance_;
    new (ptr) ::esriPBuffer::graph::EntityType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::EntityType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EntityType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EntityType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto}, {
      &scc_info_NamedObjectType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto.base,}};

static void InitDefaultsscc_info_GraphDocumentEntityTypeInfo_esriPBuffer_2fgraph_2fDataModelTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphDocumentEntityTypeInfo_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphDocumentEntityTypeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GraphDocumentEntityTypeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphDocumentEntityTypeInfo_esriPBuffer_2fgraph_2fDataModelTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GraphDocumentEntityTypeInfo_esriPBuffer_2fgraph_2fDataModelTypes_2eproto}, {}};

static void InitDefaultsscc_info_GraphProperty_esriPBuffer_2fgraph_2fDataModelTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphProperty_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphProperty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GraphProperty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphProperty_esriPBuffer_2fgraph_2fDataModelTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphProperty_esriPBuffer_2fgraph_2fDataModelTypes_2eproto}, {
      &scc_info_PrimitiveValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,}};

static void InitDefaultsscc_info_NamedObjectType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_NamedObjectType_default_instance_;
    new (ptr) ::esriPBuffer::graph::NamedObjectType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::NamedObjectType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NamedObjectType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NamedObjectType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto}, {
      &scc_info_GraphProperty_esriPBuffer_2fgraph_2fDataModelTypes_2eproto.base,
      &scc_info_EsriTypes_FieldIndex_esriPBuffer_2fEsriTypes_2eproto.base,}};

static void InitDefaultsscc_info_RelationshipType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_RelationshipType_default_instance_;
    new (ptr) ::esriPBuffer::graph::RelationshipType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::RelationshipType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelationshipType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RelationshipType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto}, {
      &scc_info_NamedObjectType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto.base,}};

namespace esriPBuffer {
namespace graph {
bool esriGraphNamedObjectRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> esriGraphNamedObjectRole_strings[3] = {};

static const char esriGraphNamedObjectRole_names[] =
  "esriGraphNamedObjectDocument"
  "esriGraphNamedObjectProvenance"
  "esriGraphNamedObjectRegular";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry esriGraphNamedObjectRole_entries[] = {
  { {esriGraphNamedObjectRole_names + 0, 28}, 2 },
  { {esriGraphNamedObjectRole_names + 28, 30}, 1 },
  { {esriGraphNamedObjectRole_names + 58, 27}, 0 },
};

static const int esriGraphNamedObjectRole_entries_by_number[] = {
  2, // 0 -> esriGraphNamedObjectRegular
  1, // 1 -> esriGraphNamedObjectProvenance
  0, // 2 -> esriGraphNamedObjectDocument
};

const std::string& esriGraphNamedObjectRole_Name(
    esriGraphNamedObjectRole value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          esriGraphNamedObjectRole_entries,
          esriGraphNamedObjectRole_entries_by_number,
          3, esriGraphNamedObjectRole_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      esriGraphNamedObjectRole_entries,
      esriGraphNamedObjectRole_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     esriGraphNamedObjectRole_strings[idx].get();
}
bool esriGraphNamedObjectRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, esriGraphNamedObjectRole* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      esriGraphNamedObjectRole_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<esriGraphNamedObjectRole>(int_value);
  }
  return success;
}

// ===================================================================

void NamedObjectType::InitAsDefaultInstance() {
}
class NamedObjectType::_Internal {
 public:
};

void NamedObjectType::clear_field_indexes() {
  field_indexes_.Clear();
}
NamedObjectType::NamedObjectType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  properties_(arena),
  field_indexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.NamedObjectType)
}
NamedObjectType::NamedObjectType(const NamedObjectType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      properties_(from.properties_),
      field_indexes_(from.field_indexes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alias(),
      GetArena());
  }
  ::memcpy(&role_, &from.role_,
    static_cast<size_t>(reinterpret_cast<char*>(&strict_) -
    reinterpret_cast<char*>(&role_)) + sizeof(strict_));
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.NamedObjectType)
}

void NamedObjectType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NamedObjectType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strict_) -
      reinterpret_cast<char*>(&role_)) + sizeof(strict_));
}

NamedObjectType::~NamedObjectType() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.NamedObjectType)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void NamedObjectType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NamedObjectType::ArenaDtor(void* object) {
  NamedObjectType* _this = reinterpret_cast< NamedObjectType* >(object);
  (void)_this;
}
void NamedObjectType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedObjectType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedObjectType& NamedObjectType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NamedObjectType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto.base);
  return *internal_default_instance();
}


void NamedObjectType::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.NamedObjectType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  field_indexes_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strict_) -
      reinterpret_cast<char*>(&role_)) + sizeof(strict_));
  _internal_metadata_.Clear<std::string>();
}

const char* NamedObjectType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.esriGraphNamedObjectRole role = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role(static_cast<::esriPBuffer::graph::esriGraphNamedObjectRole>(val));
        } else goto handle_unusual;
        continue;
      // repeated .esriPBuffer.graph.GraphProperty properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .esriPBuffer.EsriTypes.FieldIndex field_indexes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_indexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool strict = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          strict_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedObjectType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.NamedObjectType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.NamedObjectType.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.NamedObjectType.alias");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_alias(), target);
  }

  // .esriPBuffer.graph.esriGraphNamedObjectRole role = 4;
  if (this->role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_role(), target);
  }

  // repeated .esriPBuffer.graph.GraphProperty properties = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_properties(i), target, stream);
  }

  // repeated .esriPBuffer.EsriTypes.FieldIndex field_indexes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_indexes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_field_indexes(i), target, stream);
  }

  // bool strict = 7;
  if (this->strict() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_strict(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.NamedObjectType)
  return target;
}

size_t NamedObjectType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.NamedObjectType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .esriPBuffer.graph.GraphProperty properties = 5;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .esriPBuffer.EsriTypes.FieldIndex field_indexes = 6;
  total_size += 1UL * this->_internal_field_indexes_size();
  for (const auto& msg : this->field_indexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // .esriPBuffer.graph.esriGraphNamedObjectRole role = 4;
  if (this->role() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_role());
  }

  // bool strict = 7;
  if (this->strict() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedObjectType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NamedObjectType*>(
      &from));
}

void NamedObjectType::MergeFrom(const NamedObjectType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.NamedObjectType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  field_indexes_.MergeFrom(from.field_indexes_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.alias().size() > 0) {
    _internal_set_alias(from._internal_alias());
  }
  if (from.role() != 0) {
    _internal_set_role(from._internal_role());
  }
  if (from.strict() != 0) {
    _internal_set_strict(from._internal_strict());
  }
}

void NamedObjectType::CopyFrom(const NamedObjectType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.NamedObjectType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedObjectType::IsInitialized() const {
  return true;
}

void NamedObjectType::InternalSwap(NamedObjectType* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
  field_indexes_.InternalSwap(&other->field_indexes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NamedObjectType, strict_)
      + sizeof(NamedObjectType::strict_)
      - PROTOBUF_FIELD_OFFSET(NamedObjectType, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

std::string NamedObjectType::GetTypeName() const {
  return "esriPBuffer.graph.NamedObjectType";
}


// ===================================================================

void EntityType::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_EntityType_default_instance_._instance.get_mutable()->entity_ = const_cast< ::esriPBuffer::graph::NamedObjectType*>(
      ::esriPBuffer::graph::NamedObjectType::internal_default_instance());
}
class EntityType::_Internal {
 public:
  static const ::esriPBuffer::graph::NamedObjectType& entity(const EntityType* msg);
};

const ::esriPBuffer::graph::NamedObjectType&
EntityType::_Internal::entity(const EntityType* msg) {
  return *msg->entity_;
}
EntityType::EntityType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.EntityType)
}
EntityType::EntityType(const EntityType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_entity()) {
    entity_ = new ::esriPBuffer::graph::NamedObjectType(*from.entity_);
  } else {
    entity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.EntityType)
}

void EntityType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EntityType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto.base);
  entity_ = nullptr;
}

EntityType::~EntityType() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.EntityType)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EntityType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete entity_;
}

void EntityType::ArenaDtor(void* object) {
  EntityType* _this = reinterpret_cast< EntityType* >(object);
  (void)_this;
}
void EntityType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EntityType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntityType& EntityType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntityType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto.base);
  return *internal_default_instance();
}


void EntityType::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.EntityType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && entity_ != nullptr) {
    delete entity_;
  }
  entity_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* EntityType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.graph.NamedObjectType entity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntityType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.EntityType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.graph.NamedObjectType entity = 1;
  if (this->has_entity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::entity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.EntityType)
  return target;
}

size_t EntityType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.EntityType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .esriPBuffer.graph.NamedObjectType entity = 1;
  if (this->has_entity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntityType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EntityType*>(
      &from));
}

void EntityType::MergeFrom(const EntityType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.EntityType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_entity()) {
    _internal_mutable_entity()->::esriPBuffer::graph::NamedObjectType::MergeFrom(from._internal_entity());
  }
}

void EntityType::CopyFrom(const EntityType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.EntityType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityType::IsInitialized() const {
  return true;
}

void EntityType::InternalSwap(EntityType* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(entity_, other->entity_);
}

std::string EntityType::GetTypeName() const {
  return "esriPBuffer.graph.EntityType";
}


// ===================================================================

void RelationshipType::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_RelationshipType_default_instance_._instance.get_mutable()->relationship_ = const_cast< ::esriPBuffer::graph::NamedObjectType*>(
      ::esriPBuffer::graph::NamedObjectType::internal_default_instance());
}
class RelationshipType::_Internal {
 public:
  static const ::esriPBuffer::graph::NamedObjectType& relationship(const RelationshipType* msg);
};

const ::esriPBuffer::graph::NamedObjectType&
RelationshipType::_Internal::relationship(const RelationshipType* msg) {
  return *msg->relationship_;
}
RelationshipType::RelationshipType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  origin_entity_types_(arena),
  dest_entity_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.RelationshipType)
}
RelationshipType::RelationshipType(const RelationshipType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      origin_entity_types_(from.origin_entity_types_),
      dest_entity_types_(from.dest_entity_types_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_relationship()) {
    relationship_ = new ::esriPBuffer::graph::NamedObjectType(*from.relationship_);
  } else {
    relationship_ = nullptr;
  }
  ::memcpy(&strict_origin_, &from.strict_origin_,
    static_cast<size_t>(reinterpret_cast<char*>(&strict_dest_) -
    reinterpret_cast<char*>(&strict_origin_)) + sizeof(strict_dest_));
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.RelationshipType)
}

void RelationshipType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelationshipType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto.base);
  ::memset(&relationship_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strict_dest_) -
      reinterpret_cast<char*>(&relationship_)) + sizeof(strict_dest_));
}

RelationshipType::~RelationshipType() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.RelationshipType)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RelationshipType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete relationship_;
}

void RelationshipType::ArenaDtor(void* object) {
  RelationshipType* _this = reinterpret_cast< RelationshipType* >(object);
  (void)_this;
}
void RelationshipType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelationshipType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelationshipType& RelationshipType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelationshipType_esriPBuffer_2fgraph_2fDataModelTypes_2eproto.base);
  return *internal_default_instance();
}


void RelationshipType::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.RelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  origin_entity_types_.Clear();
  dest_entity_types_.Clear();
  if (GetArena() == nullptr && relationship_ != nullptr) {
    delete relationship_;
  }
  relationship_ = nullptr;
  ::memset(&strict_origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strict_dest_) -
      reinterpret_cast<char*>(&strict_origin_)) + sizeof(strict_dest_));
  _internal_metadata_.Clear<std::string>();
}

const char* RelationshipType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string origin_entity_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_origin_entity_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string dest_entity_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dest_entity_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.NamedObjectType relationship = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_relationship(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool strict_origin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          strict_origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool strict_dest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          strict_dest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelationshipType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.RelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string origin_entity_types = 1;
  for (int i = 0, n = this->_internal_origin_entity_types_size(); i < n; i++) {
    const auto& s = this->_internal_origin_entity_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.RelationshipType.origin_entity_types");
    target = stream->WriteString(1, s, target);
  }

  // repeated string dest_entity_types = 2;
  for (int i = 0, n = this->_internal_dest_entity_types_size(); i < n; i++) {
    const auto& s = this->_internal_dest_entity_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.RelationshipType.dest_entity_types");
    target = stream->WriteString(2, s, target);
  }

  // .esriPBuffer.graph.NamedObjectType relationship = 3;
  if (this->has_relationship()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::relationship(this), target, stream);
  }

  // bool strict_origin = 4;
  if (this->strict_origin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_strict_origin(), target);
  }

  // bool strict_dest = 5;
  if (this->strict_dest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_strict_dest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.RelationshipType)
  return target;
}

size_t RelationshipType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.RelationshipType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string origin_entity_types = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(origin_entity_types_.size());
  for (int i = 0, n = origin_entity_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      origin_entity_types_.Get(i));
  }

  // repeated string dest_entity_types = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dest_entity_types_.size());
  for (int i = 0, n = dest_entity_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dest_entity_types_.Get(i));
  }

  // .esriPBuffer.graph.NamedObjectType relationship = 3;
  if (this->has_relationship()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relationship_);
  }

  // bool strict_origin = 4;
  if (this->strict_origin() != 0) {
    total_size += 1 + 1;
  }

  // bool strict_dest = 5;
  if (this->strict_dest() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelationshipType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RelationshipType*>(
      &from));
}

void RelationshipType::MergeFrom(const RelationshipType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.RelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  origin_entity_types_.MergeFrom(from.origin_entity_types_);
  dest_entity_types_.MergeFrom(from.dest_entity_types_);
  if (from.has_relationship()) {
    _internal_mutable_relationship()->::esriPBuffer::graph::NamedObjectType::MergeFrom(from._internal_relationship());
  }
  if (from.strict_origin() != 0) {
    _internal_set_strict_origin(from._internal_strict_origin());
  }
  if (from.strict_dest() != 0) {
    _internal_set_strict_dest(from._internal_strict_dest());
  }
}

void RelationshipType::CopyFrom(const RelationshipType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.RelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationshipType::IsInitialized() const {
  return true;
}

void RelationshipType::InternalSwap(RelationshipType* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  origin_entity_types_.InternalSwap(&other->origin_entity_types_);
  dest_entity_types_.InternalSwap(&other->dest_entity_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelationshipType, strict_dest_)
      + sizeof(RelationshipType::strict_dest_)
      - PROTOBUF_FIELD_OFFSET(RelationshipType, relationship_)>(
          reinterpret_cast<char*>(&relationship_),
          reinterpret_cast<char*>(&other->relationship_));
}

std::string RelationshipType::GetTypeName() const {
  return "esriPBuffer.graph.RelationshipType";
}


// ===================================================================

void GraphProperty::InitAsDefaultInstance() {
}
class GraphProperty::_Internal {
 public:
};

void GraphProperty::clear_defaultvalue() {
  defaultvalue_.Clear();
}
GraphProperty::GraphProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  defaultvalue_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GraphProperty)
}
GraphProperty::GraphProperty(const GraphProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      defaultvalue_(from.defaultvalue_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alias(),
      GetArena());
  }
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_domain().empty()) {
    domain_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_domain(),
      GetArena());
  }
  ::memcpy(&fieldtype_, &from.fieldtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&searchable_) -
    reinterpret_cast<char*>(&fieldtype_)) + sizeof(searchable_));
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GraphProperty)
}

void GraphProperty::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphProperty_esriPBuffer_2fgraph_2fDataModelTypes_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fieldtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&searchable_) -
      reinterpret_cast<char*>(&fieldtype_)) + sizeof(searchable_));
}

GraphProperty::~GraphProperty() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GraphProperty)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GraphProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GraphProperty::ArenaDtor(void* object) {
  GraphProperty* _this = reinterpret_cast< GraphProperty* >(object);
  (void)_this;
}
void GraphProperty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphProperty& GraphProperty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphProperty_esriPBuffer_2fgraph_2fDataModelTypes_2eproto.base);
  return *internal_default_instance();
}


void GraphProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GraphProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defaultvalue_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&fieldtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&searchable_) -
      reinterpret_cast<char*>(&fieldtype_)) + sizeof(searchable_));
  _internal_metadata_.Clear<std::string>();
}

const char* GraphProperty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.EsriExtendedTypes.FieldType fieldType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fieldtype(static_cast<::esriPBuffer::EsriExtendedTypes::FieldType>(val));
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.EsriTypes.GeometryType geometryType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_geometrytype(static_cast<::esriPBuffer::EsriTypes_GeometryType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .esriPBuffer.graph.PrimitiveValue defaultValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_defaultvalue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool not_nullable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          not_nullable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool not_editable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          not_editable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool not_visible = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          not_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool required = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isSystemMaintained = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          issystemmaintained_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string domain = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasZ = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          hasz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasM = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          hasm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool searchable = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          searchable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphProperty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GraphProperty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.GraphProperty.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.GraphProperty.alias");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_alias(), target);
  }

  // .esriPBuffer.EsriExtendedTypes.FieldType fieldType = 3;
  if (this->fieldtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_fieldtype(), target);
  }

  // .esriPBuffer.EsriTypes.GeometryType geometryType = 4;
  if (this->geometrytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_geometrytype(), target);
  }

  // repeated .esriPBuffer.graph.PrimitiveValue defaultValue = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_defaultvalue_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_defaultvalue(i), target, stream);
  }

  // bool not_nullable = 6;
  if (this->not_nullable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_not_nullable(), target);
  }

  // bool not_editable = 7;
  if (this->not_editable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_not_editable(), target);
  }

  // bool not_visible = 8;
  if (this->not_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_not_visible(), target);
  }

  // bool required = 9;
  if (this->required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_required(), target);
  }

  // bool isSystemMaintained = 10;
  if (this->issystemmaintained() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_issystemmaintained(), target);
  }

  // string domain = 11;
  if (this->domain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.GraphProperty.domain");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_domain(), target);
  }

  // bool hasZ = 13;
  if (this->hasz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_hasz(), target);
  }

  // bool hasM = 14;
  if (this->hasm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_hasm(), target);
  }

  // bool searchable = 15;
  if (this->searchable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_searchable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GraphProperty)
  return target;
}

size_t GraphProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GraphProperty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .esriPBuffer.graph.PrimitiveValue defaultValue = 5;
  total_size += 1UL * this->_internal_defaultvalue_size();
  for (const auto& msg : this->defaultvalue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // string domain = 11;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domain());
  }

  // .esriPBuffer.EsriExtendedTypes.FieldType fieldType = 3;
  if (this->fieldtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fieldtype());
  }

  // .esriPBuffer.EsriTypes.GeometryType geometryType = 4;
  if (this->geometrytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_geometrytype());
  }

  // bool not_nullable = 6;
  if (this->not_nullable() != 0) {
    total_size += 1 + 1;
  }

  // bool not_editable = 7;
  if (this->not_editable() != 0) {
    total_size += 1 + 1;
  }

  // bool not_visible = 8;
  if (this->not_visible() != 0) {
    total_size += 1 + 1;
  }

  // bool required = 9;
  if (this->required() != 0) {
    total_size += 1 + 1;
  }

  // bool isSystemMaintained = 10;
  if (this->issystemmaintained() != 0) {
    total_size += 1 + 1;
  }

  // bool hasZ = 13;
  if (this->hasz() != 0) {
    total_size += 1 + 1;
  }

  // bool hasM = 14;
  if (this->hasm() != 0) {
    total_size += 1 + 1;
  }

  // bool searchable = 15;
  if (this->searchable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphProperty::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphProperty*>(
      &from));
}

void GraphProperty::MergeFrom(const GraphProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GraphProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  defaultvalue_.MergeFrom(from.defaultvalue_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.alias().size() > 0) {
    _internal_set_alias(from._internal_alias());
  }
  if (from.domain().size() > 0) {
    _internal_set_domain(from._internal_domain());
  }
  if (from.fieldtype() != 0) {
    _internal_set_fieldtype(from._internal_fieldtype());
  }
  if (from.geometrytype() != 0) {
    _internal_set_geometrytype(from._internal_geometrytype());
  }
  if (from.not_nullable() != 0) {
    _internal_set_not_nullable(from._internal_not_nullable());
  }
  if (from.not_editable() != 0) {
    _internal_set_not_editable(from._internal_not_editable());
  }
  if (from.not_visible() != 0) {
    _internal_set_not_visible(from._internal_not_visible());
  }
  if (from.required() != 0) {
    _internal_set_required(from._internal_required());
  }
  if (from.issystemmaintained() != 0) {
    _internal_set_issystemmaintained(from._internal_issystemmaintained());
  }
  if (from.hasz() != 0) {
    _internal_set_hasz(from._internal_hasz());
  }
  if (from.hasm() != 0) {
    _internal_set_hasm(from._internal_hasm());
  }
  if (from.searchable() != 0) {
    _internal_set_searchable(from._internal_searchable());
  }
}

void GraphProperty::CopyFrom(const GraphProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GraphProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphProperty::IsInitialized() const {
  return true;
}

void GraphProperty::InternalSwap(GraphProperty* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  defaultvalue_.InternalSwap(&other->defaultvalue_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domain_.Swap(&other->domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphProperty, searchable_)
      + sizeof(GraphProperty::searchable_)
      - PROTOBUF_FIELD_OFFSET(GraphProperty, fieldtype_)>(
          reinterpret_cast<char*>(&fieldtype_),
          reinterpret_cast<char*>(&other->fieldtype_));
}

std::string GraphProperty::GetTypeName() const {
  return "esriPBuffer.graph.GraphProperty";
}


// ===================================================================

void GraphDocumentEntityTypeInfo::InitAsDefaultInstance() {
}
class GraphDocumentEntityTypeInfo::_Internal {
 public:
};

GraphDocumentEntityTypeInfo::GraphDocumentEntityTypeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GraphDocumentEntityTypeInfo)
}
GraphDocumentEntityTypeInfo::GraphDocumentEntityTypeInfo(const GraphDocumentEntityTypeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_property().empty()) {
    name_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name_property(),
      GetArena());
  }
  title_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title_property().empty()) {
    title_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title_property(),
      GetArena());
  }
  url_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url_property().empty()) {
    url_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url_property(),
      GetArena());
  }
  text_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text_property().empty()) {
    text_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text_property(),
      GetArena());
  }
  keywords_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_keywords_property().empty()) {
    keywords_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_keywords_property(),
      GetArena());
  }
  content_type_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content_type_property().empty()) {
    content_type_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content_type_property(),
      GetArena());
  }
  metadata_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata_property().empty()) {
    metadata_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_metadata_property(),
      GetArena());
  }
  file_extension_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_extension_property().empty()) {
    file_extension_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file_extension_property(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GraphDocumentEntityTypeInfo)
}

void GraphDocumentEntityTypeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphDocumentEntityTypeInfo_esriPBuffer_2fgraph_2fDataModelTypes_2eproto.base);
  name_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keywords_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_type_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_extension_property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GraphDocumentEntityTypeInfo::~GraphDocumentEntityTypeInfo() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GraphDocumentEntityTypeInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GraphDocumentEntityTypeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keywords_property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_type_property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_extension_property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GraphDocumentEntityTypeInfo::ArenaDtor(void* object) {
  GraphDocumentEntityTypeInfo* _this = reinterpret_cast< GraphDocumentEntityTypeInfo* >(object);
  (void)_this;
}
void GraphDocumentEntityTypeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphDocumentEntityTypeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphDocumentEntityTypeInfo& GraphDocumentEntityTypeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphDocumentEntityTypeInfo_esriPBuffer_2fgraph_2fDataModelTypes_2eproto.base);
  return *internal_default_instance();
}


void GraphDocumentEntityTypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GraphDocumentEntityTypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  keywords_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_type_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_extension_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* GraphDocumentEntityTypeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name_property = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title_property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url_property = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text_property = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_text_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string keywords_property = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_keywords_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content_type_property = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_content_type_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string metadata_property = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_metadata_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_extension_property = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_file_extension_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphDocumentEntityTypeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GraphDocumentEntityTypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name_property = 1;
  if (this->name_property().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_property().data(), static_cast<int>(this->_internal_name_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.GraphDocumentEntityTypeInfo.name_property");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name_property(), target);
  }

  // string title_property = 2;
  if (this->title_property().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title_property().data(), static_cast<int>(this->_internal_title_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.GraphDocumentEntityTypeInfo.title_property");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title_property(), target);
  }

  // string url_property = 3;
  if (this->url_property().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url_property().data(), static_cast<int>(this->_internal_url_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.GraphDocumentEntityTypeInfo.url_property");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url_property(), target);
  }

  // string text_property = 4;
  if (this->text_property().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text_property().data(), static_cast<int>(this->_internal_text_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.GraphDocumentEntityTypeInfo.text_property");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text_property(), target);
  }

  // string keywords_property = 5;
  if (this->keywords_property().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_keywords_property().data(), static_cast<int>(this->_internal_keywords_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.GraphDocumentEntityTypeInfo.keywords_property");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_keywords_property(), target);
  }

  // string content_type_property = 6;
  if (this->content_type_property().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_type_property().data(), static_cast<int>(this->_internal_content_type_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.GraphDocumentEntityTypeInfo.content_type_property");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_content_type_property(), target);
  }

  // string metadata_property = 7;
  if (this->metadata_property().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata_property().data(), static_cast<int>(this->_internal_metadata_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.GraphDocumentEntityTypeInfo.metadata_property");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_metadata_property(), target);
  }

  // string file_extension_property = 8;
  if (this->file_extension_property().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_extension_property().data(), static_cast<int>(this->_internal_file_extension_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.GraphDocumentEntityTypeInfo.file_extension_property");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_file_extension_property(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GraphDocumentEntityTypeInfo)
  return target;
}

size_t GraphDocumentEntityTypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GraphDocumentEntityTypeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name_property = 1;
  if (this->name_property().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_property());
  }

  // string title_property = 2;
  if (this->title_property().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title_property());
  }

  // string url_property = 3;
  if (this->url_property().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url_property());
  }

  // string text_property = 4;
  if (this->text_property().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text_property());
  }

  // string keywords_property = 5;
  if (this->keywords_property().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_keywords_property());
  }

  // string content_type_property = 6;
  if (this->content_type_property().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_type_property());
  }

  // string metadata_property = 7;
  if (this->metadata_property().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata_property());
  }

  // string file_extension_property = 8;
  if (this->file_extension_property().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_extension_property());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphDocumentEntityTypeInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphDocumentEntityTypeInfo*>(
      &from));
}

void GraphDocumentEntityTypeInfo::MergeFrom(const GraphDocumentEntityTypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GraphDocumentEntityTypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name_property().size() > 0) {
    _internal_set_name_property(from._internal_name_property());
  }
  if (from.title_property().size() > 0) {
    _internal_set_title_property(from._internal_title_property());
  }
  if (from.url_property().size() > 0) {
    _internal_set_url_property(from._internal_url_property());
  }
  if (from.text_property().size() > 0) {
    _internal_set_text_property(from._internal_text_property());
  }
  if (from.keywords_property().size() > 0) {
    _internal_set_keywords_property(from._internal_keywords_property());
  }
  if (from.content_type_property().size() > 0) {
    _internal_set_content_type_property(from._internal_content_type_property());
  }
  if (from.metadata_property().size() > 0) {
    _internal_set_metadata_property(from._internal_metadata_property());
  }
  if (from.file_extension_property().size() > 0) {
    _internal_set_file_extension_property(from._internal_file_extension_property());
  }
}

void GraphDocumentEntityTypeInfo::CopyFrom(const GraphDocumentEntityTypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GraphDocumentEntityTypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphDocumentEntityTypeInfo::IsInitialized() const {
  return true;
}

void GraphDocumentEntityTypeInfo::InternalSwap(GraphDocumentEntityTypeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  name_property_.Swap(&other->name_property_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_property_.Swap(&other->title_property_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_property_.Swap(&other->url_property_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_property_.Swap(&other->text_property_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  keywords_property_.Swap(&other->keywords_property_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_type_property_.Swap(&other->content_type_property_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_property_.Swap(&other->metadata_property_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_extension_property_.Swap(&other->file_extension_property_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string GraphDocumentEntityTypeInfo::GetTypeName() const {
  return "esriPBuffer.graph.GraphDocumentEntityTypeInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::NamedObjectType* Arena::CreateMaybeMessage< ::esriPBuffer::graph::NamedObjectType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::NamedObjectType >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::EntityType* Arena::CreateMaybeMessage< ::esriPBuffer::graph::EntityType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::EntityType >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::RelationshipType* Arena::CreateMaybeMessage< ::esriPBuffer::graph::RelationshipType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::RelationshipType >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphProperty* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphDocumentEntityTypeInfo* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphDocumentEntityTypeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphDocumentEntityTypeInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
