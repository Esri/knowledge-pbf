// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/AddFieldsResponse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fAddFieldsResponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fAddFieldsResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "esriPBuffer/graph/EsriGraphTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fAddFieldsResponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_esriPBuffer_2fgraph_2fAddFieldsResponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace esriPBuffer {
namespace graph {
class GraphPropertyAddResult;
class GraphPropertyAddResultDefaultTypeInternal;
extern GraphPropertyAddResultDefaultTypeInternal _GraphPropertyAddResult_default_instance_;
class GraphPropertyAddsResponse;
class GraphPropertyAddsResponseDefaultTypeInternal;
extern GraphPropertyAddsResponseDefaultTypeInternal _GraphPropertyAddsResponse_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> ::esriPBuffer::graph::GraphPropertyAddResult* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphPropertyAddResult>(Arena*);
template<> ::esriPBuffer::graph::GraphPropertyAddsResponse* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphPropertyAddsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esriPBuffer {
namespace graph {

// ===================================================================

class GraphPropertyAddResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphPropertyAddResult) */ {
 public:
  inline GraphPropertyAddResult() : GraphPropertyAddResult(nullptr) {}
  virtual ~GraphPropertyAddResult();

  GraphPropertyAddResult(const GraphPropertyAddResult& from);
  GraphPropertyAddResult(GraphPropertyAddResult&& from) noexcept
    : GraphPropertyAddResult() {
    *this = ::std::move(from);
  }

  inline GraphPropertyAddResult& operator=(const GraphPropertyAddResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphPropertyAddResult& operator=(GraphPropertyAddResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphPropertyAddResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphPropertyAddResult* internal_default_instance() {
    return reinterpret_cast<const GraphPropertyAddResult*>(
               &_GraphPropertyAddResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GraphPropertyAddResult& a, GraphPropertyAddResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphPropertyAddResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphPropertyAddResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphPropertyAddResult* New() const final {
    return CreateMaybeMessage<GraphPropertyAddResult>(nullptr);
  }

  GraphPropertyAddResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphPropertyAddResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphPropertyAddResult& from);
  void MergeFrom(const GraphPropertyAddResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphPropertyAddResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphPropertyAddResult";
  }
  protected:
  explicit GraphPropertyAddResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .esriPBuffer.graph.Error error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::esriPBuffer::graph::Error& error() const;
  ::esriPBuffer::graph::Error* release_error();
  ::esriPBuffer::graph::Error* mutable_error();
  void set_allocated_error(::esriPBuffer::graph::Error* error);
  private:
  const ::esriPBuffer::graph::Error& _internal_error() const;
  ::esriPBuffer::graph::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::esriPBuffer::graph::Error* error);
  ::esriPBuffer::graph::Error* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphPropertyAddResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::esriPBuffer::graph::Error* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fAddFieldsResponse_2eproto;
};
// -------------------------------------------------------------------

class GraphPropertyAddsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphPropertyAddsResponse) */ {
 public:
  inline GraphPropertyAddsResponse() : GraphPropertyAddsResponse(nullptr) {}
  virtual ~GraphPropertyAddsResponse();

  GraphPropertyAddsResponse(const GraphPropertyAddsResponse& from);
  GraphPropertyAddsResponse(GraphPropertyAddsResponse&& from) noexcept
    : GraphPropertyAddsResponse() {
    *this = ::std::move(from);
  }

  inline GraphPropertyAddsResponse& operator=(const GraphPropertyAddsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphPropertyAddsResponse& operator=(GraphPropertyAddsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphPropertyAddsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphPropertyAddsResponse* internal_default_instance() {
    return reinterpret_cast<const GraphPropertyAddsResponse*>(
               &_GraphPropertyAddsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GraphPropertyAddsResponse& a, GraphPropertyAddsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphPropertyAddsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphPropertyAddsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphPropertyAddsResponse* New() const final {
    return CreateMaybeMessage<GraphPropertyAddsResponse>(nullptr);
  }

  GraphPropertyAddsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphPropertyAddsResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphPropertyAddsResponse& from);
  void MergeFrom(const GraphPropertyAddsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphPropertyAddsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphPropertyAddsResponse";
  }
  protected:
  explicit GraphPropertyAddsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyAddResultsFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated .esriPBuffer.graph.GraphPropertyAddResult property_add_results = 2;
  int property_add_results_size() const;
  private:
  int _internal_property_add_results_size() const;
  public:
  void clear_property_add_results();
  ::esriPBuffer::graph::GraphPropertyAddResult* mutable_property_add_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GraphPropertyAddResult >*
      mutable_property_add_results();
  private:
  const ::esriPBuffer::graph::GraphPropertyAddResult& _internal_property_add_results(int index) const;
  ::esriPBuffer::graph::GraphPropertyAddResult* _internal_add_property_add_results();
  public:
  const ::esriPBuffer::graph::GraphPropertyAddResult& property_add_results(int index) const;
  ::esriPBuffer::graph::GraphPropertyAddResult* add_property_add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GraphPropertyAddResult >&
      property_add_results() const;

  // .esriPBuffer.graph.Error error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::esriPBuffer::graph::Error& error() const;
  ::esriPBuffer::graph::Error* release_error();
  ::esriPBuffer::graph::Error* mutable_error();
  void set_allocated_error(::esriPBuffer::graph::Error* error);
  private:
  const ::esriPBuffer::graph::Error& _internal_error() const;
  ::esriPBuffer::graph::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::esriPBuffer::graph::Error* error);
  ::esriPBuffer::graph::Error* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphPropertyAddsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GraphPropertyAddResult > property_add_results_;
  ::esriPBuffer::graph::Error* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fAddFieldsResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GraphPropertyAddResult

// string name = 1;
inline void GraphPropertyAddResult::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphPropertyAddResult::name() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyAddResult.name)
  return _internal_name();
}
inline void GraphPropertyAddResult::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphPropertyAddResult.name)
}
inline std::string* GraphPropertyAddResult::mutable_name() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphPropertyAddResult.name)
  return _internal_mutable_name();
}
inline const std::string& GraphPropertyAddResult::_internal_name() const {
  return name_.Get();
}
inline void GraphPropertyAddResult::_internal_set_name(const std::string& value) {
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphPropertyAddResult::set_name(std::string&& value) {
  
  name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphPropertyAddResult.name)
}
inline void GraphPropertyAddResult::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphPropertyAddResult.name)
}
inline void GraphPropertyAddResult::set_name(const char* value,
    size_t size) {
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphPropertyAddResult.name)
}
inline std::string* GraphPropertyAddResult::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphPropertyAddResult::release_name() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphPropertyAddResult.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphPropertyAddResult::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphPropertyAddResult.name)
}

// .esriPBuffer.graph.Error error = 2;
inline bool GraphPropertyAddResult::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GraphPropertyAddResult::has_error() const {
  return _internal_has_error();
}
inline const ::esriPBuffer::graph::Error& GraphPropertyAddResult::_internal_error() const {
  const ::esriPBuffer::graph::Error* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::Error*>(
      &::esriPBuffer::graph::_Error_default_instance_);
}
inline const ::esriPBuffer::graph::Error& GraphPropertyAddResult::error() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyAddResult.error)
  return _internal_error();
}
inline void GraphPropertyAddResult::unsafe_arena_set_allocated_error(
    ::esriPBuffer::graph::Error* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphPropertyAddResult.error)
}
inline ::esriPBuffer::graph::Error* GraphPropertyAddResult::release_error() {
  
  ::esriPBuffer::graph::Error* temp = error_;
  error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::Error* GraphPropertyAddResult::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphPropertyAddResult.error)
  
  ::esriPBuffer::graph::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::Error* GraphPropertyAddResult::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::Error>(GetArena());
    error_ = p;
  }
  return error_;
}
inline ::esriPBuffer::graph::Error* GraphPropertyAddResult::mutable_error() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphPropertyAddResult.error)
  return _internal_mutable_error();
}
inline void GraphPropertyAddResult::set_allocated_error(::esriPBuffer::graph::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphPropertyAddResult.error)
}

// -------------------------------------------------------------------

// GraphPropertyAddsResponse

// .esriPBuffer.graph.Error error = 1;
inline bool GraphPropertyAddsResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GraphPropertyAddsResponse::has_error() const {
  return _internal_has_error();
}
inline const ::esriPBuffer::graph::Error& GraphPropertyAddsResponse::_internal_error() const {
  const ::esriPBuffer::graph::Error* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::Error*>(
      &::esriPBuffer::graph::_Error_default_instance_);
}
inline const ::esriPBuffer::graph::Error& GraphPropertyAddsResponse::error() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyAddsResponse.error)
  return _internal_error();
}
inline void GraphPropertyAddsResponse::unsafe_arena_set_allocated_error(
    ::esriPBuffer::graph::Error* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphPropertyAddsResponse.error)
}
inline ::esriPBuffer::graph::Error* GraphPropertyAddsResponse::release_error() {
  
  ::esriPBuffer::graph::Error* temp = error_;
  error_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::Error* GraphPropertyAddsResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphPropertyAddsResponse.error)
  
  ::esriPBuffer::graph::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::Error* GraphPropertyAddsResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::Error>(GetArena());
    error_ = p;
  }
  return error_;
}
inline ::esriPBuffer::graph::Error* GraphPropertyAddsResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphPropertyAddsResponse.error)
  return _internal_mutable_error();
}
inline void GraphPropertyAddsResponse::set_allocated_error(::esriPBuffer::graph::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphPropertyAddsResponse.error)
}

// repeated .esriPBuffer.graph.GraphPropertyAddResult property_add_results = 2;
inline int GraphPropertyAddsResponse::_internal_property_add_results_size() const {
  return property_add_results_.size();
}
inline int GraphPropertyAddsResponse::property_add_results_size() const {
  return _internal_property_add_results_size();
}
inline void GraphPropertyAddsResponse::clear_property_add_results() {
  property_add_results_.Clear();
}
inline ::esriPBuffer::graph::GraphPropertyAddResult* GraphPropertyAddsResponse::mutable_property_add_results(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphPropertyAddsResponse.property_add_results)
  return property_add_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GraphPropertyAddResult >*
GraphPropertyAddsResponse::mutable_property_add_results() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.GraphPropertyAddsResponse.property_add_results)
  return &property_add_results_;
}
inline const ::esriPBuffer::graph::GraphPropertyAddResult& GraphPropertyAddsResponse::_internal_property_add_results(int index) const {
  return property_add_results_.Get(index);
}
inline const ::esriPBuffer::graph::GraphPropertyAddResult& GraphPropertyAddsResponse::property_add_results(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyAddsResponse.property_add_results)
  return _internal_property_add_results(index);
}
inline ::esriPBuffer::graph::GraphPropertyAddResult* GraphPropertyAddsResponse::_internal_add_property_add_results() {
  return property_add_results_.Add();
}
inline ::esriPBuffer::graph::GraphPropertyAddResult* GraphPropertyAddsResponse::add_property_add_results() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GraphPropertyAddsResponse.property_add_results)
  return _internal_add_property_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GraphPropertyAddResult >&
GraphPropertyAddsResponse::property_add_results() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.GraphPropertyAddsResponse.property_add_results)
  return property_add_results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace esriPBuffer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fAddFieldsResponse_2eproto
