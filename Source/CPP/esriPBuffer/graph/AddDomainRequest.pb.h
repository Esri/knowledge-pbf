// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/AddDomainRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fAddDomainRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fAddDomainRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "esriPBuffer/EsriTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fAddDomainRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_esriPBuffer_2fgraph_2fAddDomainRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace esriPBuffer {
namespace graph {
class GraphDomainAddRequest;
class GraphDomainAddRequestDefaultTypeInternal;
extern GraphDomainAddRequestDefaultTypeInternal _GraphDomainAddRequest_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> ::esriPBuffer::graph::GraphDomainAddRequest* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphDomainAddRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esriPBuffer {
namespace graph {

// ===================================================================

class GraphDomainAddRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphDomainAddRequest) */ {
 public:
  inline GraphDomainAddRequest() : GraphDomainAddRequest(nullptr) {}
  virtual ~GraphDomainAddRequest();

  GraphDomainAddRequest(const GraphDomainAddRequest& from);
  GraphDomainAddRequest(GraphDomainAddRequest&& from) noexcept
    : GraphDomainAddRequest() {
    *this = ::std::move(from);
  }

  inline GraphDomainAddRequest& operator=(const GraphDomainAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphDomainAddRequest& operator=(GraphDomainAddRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphDomainAddRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphDomainAddRequest* internal_default_instance() {
    return reinterpret_cast<const GraphDomainAddRequest*>(
               &_GraphDomainAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GraphDomainAddRequest& a, GraphDomainAddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphDomainAddRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphDomainAddRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphDomainAddRequest* New() const final {
    return CreateMaybeMessage<GraphDomainAddRequest>(nullptr);
  }

  GraphDomainAddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphDomainAddRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphDomainAddRequest& from);
  void MergeFrom(const GraphDomainAddRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphDomainAddRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphDomainAddRequest";
  }
  protected:
  explicit GraphDomainAddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainsFieldNumber = 1,
  };
  // .esriPBuffer.EsriTypes.Domain domains = 1;
  bool has_domains() const;
  private:
  bool _internal_has_domains() const;
  public:
  void clear_domains();
  const ::esriPBuffer::EsriTypes_Domain& domains() const;
  ::esriPBuffer::EsriTypes_Domain* release_domains();
  ::esriPBuffer::EsriTypes_Domain* mutable_domains();
  void set_allocated_domains(::esriPBuffer::EsriTypes_Domain* domains);
  private:
  const ::esriPBuffer::EsriTypes_Domain& _internal_domains() const;
  ::esriPBuffer::EsriTypes_Domain* _internal_mutable_domains();
  public:
  void unsafe_arena_set_allocated_domains(
      ::esriPBuffer::EsriTypes_Domain* domains);
  ::esriPBuffer::EsriTypes_Domain* unsafe_arena_release_domains();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphDomainAddRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::esriPBuffer::EsriTypes_Domain* domains_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fAddDomainRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GraphDomainAddRequest

// .esriPBuffer.EsriTypes.Domain domains = 1;
inline bool GraphDomainAddRequest::_internal_has_domains() const {
  return this != internal_default_instance() && domains_ != nullptr;
}
inline bool GraphDomainAddRequest::has_domains() const {
  return _internal_has_domains();
}
inline const ::esriPBuffer::EsriTypes_Domain& GraphDomainAddRequest::_internal_domains() const {
  const ::esriPBuffer::EsriTypes_Domain* p = domains_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_Domain*>(
      &::esriPBuffer::_EsriTypes_Domain_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_Domain& GraphDomainAddRequest::domains() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDomainAddRequest.domains)
  return _internal_domains();
}
inline void GraphDomainAddRequest::unsafe_arena_set_allocated_domains(
    ::esriPBuffer::EsriTypes_Domain* domains) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(domains_);
  }
  domains_ = domains;
  if (domains) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphDomainAddRequest.domains)
}
inline ::esriPBuffer::EsriTypes_Domain* GraphDomainAddRequest::release_domains() {
  
  ::esriPBuffer::EsriTypes_Domain* temp = domains_;
  domains_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_Domain* GraphDomainAddRequest::unsafe_arena_release_domains() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphDomainAddRequest.domains)
  
  ::esriPBuffer::EsriTypes_Domain* temp = domains_;
  domains_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_Domain* GraphDomainAddRequest::_internal_mutable_domains() {
  
  if (domains_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_Domain>(GetArena());
    domains_ = p;
  }
  return domains_;
}
inline ::esriPBuffer::EsriTypes_Domain* GraphDomainAddRequest::mutable_domains() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDomainAddRequest.domains)
  return _internal_mutable_domains();
}
inline void GraphDomainAddRequest::set_allocated_domains(::esriPBuffer::EsriTypes_Domain* domains) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(domains_);
  }
  if (domains) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(domains)->GetArena();
    if (message_arena != submessage_arena) {
      domains = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, domains, submessage_arena);
    }
    
  } else {
    
  }
  domains_ = domains;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphDomainAddRequest.domains)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace esriPBuffer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fAddDomainRequest_2eproto
