// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/SearchQueryRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fSearchQueryRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fSearchQueryRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "esriPBuffer/EsriTypes.pb.h"
#include "esriPBuffer/graph/EsriGraphTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fSearchQueryRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_esriPBuffer_2fgraph_2fSearchQueryRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace esriPBuffer {
namespace graph {
class GraphSearchRequest;
class GraphSearchRequestDefaultTypeInternal;
extern GraphSearchRequestDefaultTypeInternal _GraphSearchRequest_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> ::esriPBuffer::graph::GraphSearchRequest* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphSearchRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esriPBuffer {
namespace graph {

enum GraphSearchRequest_esriNamedTypeCategory : int {
  GraphSearchRequest_esriNamedTypeCategory_esriType_UNSPECIFIED = 0,
  GraphSearchRequest_esriNamedTypeCategory_esriTypeEntity = 1,
  GraphSearchRequest_esriNamedTypeCategory_esriTypeRelationship = 2,
  GraphSearchRequest_esriNamedTypeCategory_esriTypeBoth = 3,
  GraphSearchRequest_esriNamedTypeCategory_GraphSearchRequest_esriNamedTypeCategory_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GraphSearchRequest_esriNamedTypeCategory_GraphSearchRequest_esriNamedTypeCategory_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GraphSearchRequest_esriNamedTypeCategory_IsValid(int value);
constexpr GraphSearchRequest_esriNamedTypeCategory GraphSearchRequest_esriNamedTypeCategory_esriNamedTypeCategory_MIN = GraphSearchRequest_esriNamedTypeCategory_esriType_UNSPECIFIED;
constexpr GraphSearchRequest_esriNamedTypeCategory GraphSearchRequest_esriNamedTypeCategory_esriNamedTypeCategory_MAX = GraphSearchRequest_esriNamedTypeCategory_esriTypeBoth;
constexpr int GraphSearchRequest_esriNamedTypeCategory_esriNamedTypeCategory_ARRAYSIZE = GraphSearchRequest_esriNamedTypeCategory_esriNamedTypeCategory_MAX + 1;

const std::string& GraphSearchRequest_esriNamedTypeCategory_Name(GraphSearchRequest_esriNamedTypeCategory value);
template<typename T>
inline const std::string& GraphSearchRequest_esriNamedTypeCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GraphSearchRequest_esriNamedTypeCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GraphSearchRequest_esriNamedTypeCategory_Name.");
  return GraphSearchRequest_esriNamedTypeCategory_Name(static_cast<GraphSearchRequest_esriNamedTypeCategory>(enum_t_value));
}
bool GraphSearchRequest_esriNamedTypeCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GraphSearchRequest_esriNamedTypeCategory* value);
// ===================================================================

class GraphSearchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphSearchRequest) */ {
 public:
  inline GraphSearchRequest() : GraphSearchRequest(nullptr) {}
  virtual ~GraphSearchRequest();

  GraphSearchRequest(const GraphSearchRequest& from);
  GraphSearchRequest(GraphSearchRequest&& from) noexcept
    : GraphSearchRequest() {
    *this = ::std::move(from);
  }

  inline GraphSearchRequest& operator=(const GraphSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphSearchRequest& operator=(GraphSearchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphSearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphSearchRequest* internal_default_instance() {
    return reinterpret_cast<const GraphSearchRequest*>(
               &_GraphSearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GraphSearchRequest& a, GraphSearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphSearchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphSearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphSearchRequest* New() const final {
    return CreateMaybeMessage<GraphSearchRequest>(nullptr);
  }

  GraphSearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphSearchRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphSearchRequest& from);
  void MergeFrom(const GraphSearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphSearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphSearchRequest";
  }
  protected:
  explicit GraphSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GraphSearchRequest_esriNamedTypeCategory esriNamedTypeCategory;
  static constexpr esriNamedTypeCategory esriType_UNSPECIFIED =
    GraphSearchRequest_esriNamedTypeCategory_esriType_UNSPECIFIED;
  static constexpr esriNamedTypeCategory esriTypeEntity =
    GraphSearchRequest_esriNamedTypeCategory_esriTypeEntity;
  static constexpr esriNamedTypeCategory esriTypeRelationship =
    GraphSearchRequest_esriNamedTypeCategory_esriTypeRelationship;
  static constexpr esriNamedTypeCategory esriTypeBoth =
    GraphSearchRequest_esriNamedTypeCategory_esriTypeBoth;
  static inline bool esriNamedTypeCategory_IsValid(int value) {
    return GraphSearchRequest_esriNamedTypeCategory_IsValid(value);
  }
  static constexpr esriNamedTypeCategory esriNamedTypeCategory_MIN =
    GraphSearchRequest_esriNamedTypeCategory_esriNamedTypeCategory_MIN;
  static constexpr esriNamedTypeCategory esriNamedTypeCategory_MAX =
    GraphSearchRequest_esriNamedTypeCategory_esriNamedTypeCategory_MAX;
  static constexpr int esriNamedTypeCategory_ARRAYSIZE =
    GraphSearchRequest_esriNamedTypeCategory_esriNamedTypeCategory_ARRAYSIZE;
  template<typename T>
  static inline const std::string& esriNamedTypeCategory_Name(T enum_t_value) {
    static_assert(::std::is_same<T, esriNamedTypeCategory>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function esriNamedTypeCategory_Name.");
    return GraphSearchRequest_esriNamedTypeCategory_Name(enum_t_value);
  }
  static inline bool esriNamedTypeCategory_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      esriNamedTypeCategory* value) {
    return GraphSearchRequest_esriNamedTypeCategory_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNamedTypeFilterFieldNumber = 3,
    kSearchQueryFieldNumber = 1,
    kGlobalidArrayFieldNumber = 2,
    kSpatialFilterFieldNumber = 5,
    kInputTransformFieldNumber = 6,
    kInputSpatRefFieldNumber = 7,
    kOutSpatRefFieldNumber = 11,
    kDatumTransformFieldNumber = 12,
    kQuantizationParamsFieldNumber = 14,
    kTypeCategoryFilterFieldNumber = 4,
    kSpatialRelationFieldNumber = 8,
    kFeatureEncodingFieldNumber = 10,
    kReturnGeometryFieldNumber = 9,
    kReturnSearchContextFieldNumber = 17,
    kStartIndexFieldNumber = 15,
    kMaxNumResultsFieldNumber = 16,
  };
  // repeated string named_type_filter = 3;
  int named_type_filter_size() const;
  private:
  int _internal_named_type_filter_size() const;
  public:
  void clear_named_type_filter();
  const std::string& named_type_filter(int index) const;
  std::string* mutable_named_type_filter(int index);
  void set_named_type_filter(int index, const std::string& value);
  void set_named_type_filter(int index, std::string&& value);
  void set_named_type_filter(int index, const char* value);
  void set_named_type_filter(int index, const char* value, size_t size);
  std::string* add_named_type_filter();
  void add_named_type_filter(const std::string& value);
  void add_named_type_filter(std::string&& value);
  void add_named_type_filter(const char* value);
  void add_named_type_filter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& named_type_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_named_type_filter();
  private:
  const std::string& _internal_named_type_filter(int index) const;
  std::string* _internal_add_named_type_filter();
  public:

  // string search_query = 1;
  void clear_search_query();
  const std::string& search_query() const;
  void set_search_query(const std::string& value);
  void set_search_query(std::string&& value);
  void set_search_query(const char* value);
  void set_search_query(const char* value, size_t size);
  std::string* mutable_search_query();
  std::string* release_search_query();
  void set_allocated_search_query(std::string* search_query);
  private:
  const std::string& _internal_search_query() const;
  void _internal_set_search_query(const std::string& value);
  std::string* _internal_mutable_search_query();
  public:

  // bytes globalid_array = 2;
  void clear_globalid_array();
  const std::string& globalid_array() const;
  void set_globalid_array(const std::string& value);
  void set_globalid_array(std::string&& value);
  void set_globalid_array(const char* value);
  void set_globalid_array(const void* value, size_t size);
  std::string* mutable_globalid_array();
  std::string* release_globalid_array();
  void set_allocated_globalid_array(std::string* globalid_array);
  private:
  const std::string& _internal_globalid_array() const;
  void _internal_set_globalid_array(const std::string& value);
  std::string* _internal_mutable_globalid_array();
  public:

  // .esriPBuffer.graph.GeometryValue spatial_filter = 5;
  bool has_spatial_filter() const;
  private:
  bool _internal_has_spatial_filter() const;
  public:
  void clear_spatial_filter();
  const ::esriPBuffer::graph::GeometryValue& spatial_filter() const;
  ::esriPBuffer::graph::GeometryValue* release_spatial_filter();
  ::esriPBuffer::graph::GeometryValue* mutable_spatial_filter();
  void set_allocated_spatial_filter(::esriPBuffer::graph::GeometryValue* spatial_filter);
  private:
  const ::esriPBuffer::graph::GeometryValue& _internal_spatial_filter() const;
  ::esriPBuffer::graph::GeometryValue* _internal_mutable_spatial_filter();
  public:
  void unsafe_arena_set_allocated_spatial_filter(
      ::esriPBuffer::graph::GeometryValue* spatial_filter);
  ::esriPBuffer::graph::GeometryValue* unsafe_arena_release_spatial_filter();

  // .esriPBuffer.graph.Transform input_transform = 6;
  bool has_input_transform() const;
  private:
  bool _internal_has_input_transform() const;
  public:
  void clear_input_transform();
  const ::esriPBuffer::graph::Transform& input_transform() const;
  ::esriPBuffer::graph::Transform* release_input_transform();
  ::esriPBuffer::graph::Transform* mutable_input_transform();
  void set_allocated_input_transform(::esriPBuffer::graph::Transform* input_transform);
  private:
  const ::esriPBuffer::graph::Transform& _internal_input_transform() const;
  ::esriPBuffer::graph::Transform* _internal_mutable_input_transform();
  public:
  void unsafe_arena_set_allocated_input_transform(
      ::esriPBuffer::graph::Transform* input_transform);
  ::esriPBuffer::graph::Transform* unsafe_arena_release_input_transform();

  // .esriPBuffer.EsriTypes.SpatialReference input_spat_ref = 7;
  bool has_input_spat_ref() const;
  private:
  bool _internal_has_input_spat_ref() const;
  public:
  void clear_input_spat_ref();
  const ::esriPBuffer::EsriTypes_SpatialReference& input_spat_ref() const;
  ::esriPBuffer::EsriTypes_SpatialReference* release_input_spat_ref();
  ::esriPBuffer::EsriTypes_SpatialReference* mutable_input_spat_ref();
  void set_allocated_input_spat_ref(::esriPBuffer::EsriTypes_SpatialReference* input_spat_ref);
  private:
  const ::esriPBuffer::EsriTypes_SpatialReference& _internal_input_spat_ref() const;
  ::esriPBuffer::EsriTypes_SpatialReference* _internal_mutable_input_spat_ref();
  public:
  void unsafe_arena_set_allocated_input_spat_ref(
      ::esriPBuffer::EsriTypes_SpatialReference* input_spat_ref);
  ::esriPBuffer::EsriTypes_SpatialReference* unsafe_arena_release_input_spat_ref();

  // .esriPBuffer.EsriTypes.SpatialReference out_spat_ref = 11;
  bool has_out_spat_ref() const;
  private:
  bool _internal_has_out_spat_ref() const;
  public:
  void clear_out_spat_ref();
  const ::esriPBuffer::EsriTypes_SpatialReference& out_spat_ref() const;
  ::esriPBuffer::EsriTypes_SpatialReference* release_out_spat_ref();
  ::esriPBuffer::EsriTypes_SpatialReference* mutable_out_spat_ref();
  void set_allocated_out_spat_ref(::esriPBuffer::EsriTypes_SpatialReference* out_spat_ref);
  private:
  const ::esriPBuffer::EsriTypes_SpatialReference& _internal_out_spat_ref() const;
  ::esriPBuffer::EsriTypes_SpatialReference* _internal_mutable_out_spat_ref();
  public:
  void unsafe_arena_set_allocated_out_spat_ref(
      ::esriPBuffer::EsriTypes_SpatialReference* out_spat_ref);
  ::esriPBuffer::EsriTypes_SpatialReference* unsafe_arena_release_out_spat_ref();

  // .esriPBuffer.EsriTypes.DatumTransformation datum_transform = 12;
  bool has_datum_transform() const;
  private:
  bool _internal_has_datum_transform() const;
  public:
  void clear_datum_transform();
  const ::esriPBuffer::EsriTypes_DatumTransformation& datum_transform() const;
  ::esriPBuffer::EsriTypes_DatumTransformation* release_datum_transform();
  ::esriPBuffer::EsriTypes_DatumTransformation* mutable_datum_transform();
  void set_allocated_datum_transform(::esriPBuffer::EsriTypes_DatumTransformation* datum_transform);
  private:
  const ::esriPBuffer::EsriTypes_DatumTransformation& _internal_datum_transform() const;
  ::esriPBuffer::EsriTypes_DatumTransformation* _internal_mutable_datum_transform();
  public:
  void unsafe_arena_set_allocated_datum_transform(
      ::esriPBuffer::EsriTypes_DatumTransformation* datum_transform);
  ::esriPBuffer::EsriTypes_DatumTransformation* unsafe_arena_release_datum_transform();

  // .esriPBuffer.graph.QuantizationParameters quantization_params = 14;
  bool has_quantization_params() const;
  private:
  bool _internal_has_quantization_params() const;
  public:
  void clear_quantization_params();
  const ::esriPBuffer::graph::QuantizationParameters& quantization_params() const;
  ::esriPBuffer::graph::QuantizationParameters* release_quantization_params();
  ::esriPBuffer::graph::QuantizationParameters* mutable_quantization_params();
  void set_allocated_quantization_params(::esriPBuffer::graph::QuantizationParameters* quantization_params);
  private:
  const ::esriPBuffer::graph::QuantizationParameters& _internal_quantization_params() const;
  ::esriPBuffer::graph::QuantizationParameters* _internal_mutable_quantization_params();
  public:
  void unsafe_arena_set_allocated_quantization_params(
      ::esriPBuffer::graph::QuantizationParameters* quantization_params);
  ::esriPBuffer::graph::QuantizationParameters* unsafe_arena_release_quantization_params();

  // .esriPBuffer.graph.GraphSearchRequest.esriNamedTypeCategory type_category_filter = 4;
  void clear_type_category_filter();
  ::esriPBuffer::graph::GraphSearchRequest_esriNamedTypeCategory type_category_filter() const;
  void set_type_category_filter(::esriPBuffer::graph::GraphSearchRequest_esriNamedTypeCategory value);
  private:
  ::esriPBuffer::graph::GraphSearchRequest_esriNamedTypeCategory _internal_type_category_filter() const;
  void _internal_set_type_category_filter(::esriPBuffer::graph::GraphSearchRequest_esriNamedTypeCategory value);
  public:

  // .esriPBuffer.EsriTypes.esriSpatialRel spatial_relation = 8;
  void clear_spatial_relation();
  ::esriPBuffer::EsriTypes_esriSpatialRel spatial_relation() const;
  void set_spatial_relation(::esriPBuffer::EsriTypes_esriSpatialRel value);
  private:
  ::esriPBuffer::EsriTypes_esriSpatialRel _internal_spatial_relation() const;
  void _internal_set_spatial_relation(::esriPBuffer::EsriTypes_esriSpatialRel value);
  public:

  // .esriPBuffer.EsriTypes.esriFeatureEncoding feature_encoding = 10;
  void clear_feature_encoding();
  ::esriPBuffer::EsriTypes_esriFeatureEncoding feature_encoding() const;
  void set_feature_encoding(::esriPBuffer::EsriTypes_esriFeatureEncoding value);
  private:
  ::esriPBuffer::EsriTypes_esriFeatureEncoding _internal_feature_encoding() const;
  void _internal_set_feature_encoding(::esriPBuffer::EsriTypes_esriFeatureEncoding value);
  public:

  // bool return_geometry = 9;
  void clear_return_geometry();
  bool return_geometry() const;
  void set_return_geometry(bool value);
  private:
  bool _internal_return_geometry() const;
  void _internal_set_return_geometry(bool value);
  public:

  // bool return_search_context = 17;
  void clear_return_search_context();
  bool return_search_context() const;
  void set_return_search_context(bool value);
  private:
  bool _internal_return_search_context() const;
  void _internal_set_return_search_context(bool value);
  public:

  // sint32 start_index = 15;
  void clear_start_index();
  ::PROTOBUF_NAMESPACE_ID::int32 start_index() const;
  void set_start_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_index() const;
  void _internal_set_start_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 max_num_results = 16;
  void clear_max_num_results();
  ::PROTOBUF_NAMESPACE_ID::int32 max_num_results() const;
  void set_max_num_results(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_num_results() const;
  void _internal_set_max_num_results(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphSearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> named_type_filter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr globalid_array_;
  ::esriPBuffer::graph::GeometryValue* spatial_filter_;
  ::esriPBuffer::graph::Transform* input_transform_;
  ::esriPBuffer::EsriTypes_SpatialReference* input_spat_ref_;
  ::esriPBuffer::EsriTypes_SpatialReference* out_spat_ref_;
  ::esriPBuffer::EsriTypes_DatumTransformation* datum_transform_;
  ::esriPBuffer::graph::QuantizationParameters* quantization_params_;
  int type_category_filter_;
  int spatial_relation_;
  int feature_encoding_;
  bool return_geometry_;
  bool return_search_context_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_num_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fSearchQueryRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GraphSearchRequest

// string search_query = 1;
inline void GraphSearchRequest::clear_search_query() {
  search_query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphSearchRequest::search_query() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphSearchRequest.search_query)
  return _internal_search_query();
}
inline void GraphSearchRequest::set_search_query(const std::string& value) {
  _internal_set_search_query(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphSearchRequest.search_query)
}
inline std::string* GraphSearchRequest::mutable_search_query() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphSearchRequest.search_query)
  return _internal_mutable_search_query();
}
inline const std::string& GraphSearchRequest::_internal_search_query() const {
  return search_query_.Get();
}
inline void GraphSearchRequest::_internal_set_search_query(const std::string& value) {
  
  search_query_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphSearchRequest::set_search_query(std::string&& value) {
  
  search_query_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphSearchRequest.search_query)
}
inline void GraphSearchRequest::set_search_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  search_query_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphSearchRequest.search_query)
}
inline void GraphSearchRequest::set_search_query(const char* value,
    size_t size) {
  
  search_query_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphSearchRequest.search_query)
}
inline std::string* GraphSearchRequest::_internal_mutable_search_query() {
  
  return search_query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphSearchRequest::release_search_query() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphSearchRequest.search_query)
  return search_query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphSearchRequest::set_allocated_search_query(std::string* search_query) {
  if (search_query != nullptr) {
    
  } else {
    
  }
  search_query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphSearchRequest.search_query)
}

// bytes globalid_array = 2;
inline void GraphSearchRequest::clear_globalid_array() {
  globalid_array_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphSearchRequest::globalid_array() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphSearchRequest.globalid_array)
  return _internal_globalid_array();
}
inline void GraphSearchRequest::set_globalid_array(const std::string& value) {
  _internal_set_globalid_array(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphSearchRequest.globalid_array)
}
inline std::string* GraphSearchRequest::mutable_globalid_array() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphSearchRequest.globalid_array)
  return _internal_mutable_globalid_array();
}
inline const std::string& GraphSearchRequest::_internal_globalid_array() const {
  return globalid_array_.Get();
}
inline void GraphSearchRequest::_internal_set_globalid_array(const std::string& value) {
  
  globalid_array_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphSearchRequest::set_globalid_array(std::string&& value) {
  
  globalid_array_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphSearchRequest.globalid_array)
}
inline void GraphSearchRequest::set_globalid_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  globalid_array_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphSearchRequest.globalid_array)
}
inline void GraphSearchRequest::set_globalid_array(const void* value,
    size_t size) {
  
  globalid_array_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphSearchRequest.globalid_array)
}
inline std::string* GraphSearchRequest::_internal_mutable_globalid_array() {
  
  return globalid_array_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphSearchRequest::release_globalid_array() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphSearchRequest.globalid_array)
  return globalid_array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphSearchRequest::set_allocated_globalid_array(std::string* globalid_array) {
  if (globalid_array != nullptr) {
    
  } else {
    
  }
  globalid_array_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), globalid_array,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphSearchRequest.globalid_array)
}

// repeated string named_type_filter = 3;
inline int GraphSearchRequest::_internal_named_type_filter_size() const {
  return named_type_filter_.size();
}
inline int GraphSearchRequest::named_type_filter_size() const {
  return _internal_named_type_filter_size();
}
inline void GraphSearchRequest::clear_named_type_filter() {
  named_type_filter_.Clear();
}
inline std::string* GraphSearchRequest::add_named_type_filter() {
  // @@protoc_insertion_point(field_add_mutable:esriPBuffer.graph.GraphSearchRequest.named_type_filter)
  return _internal_add_named_type_filter();
}
inline const std::string& GraphSearchRequest::_internal_named_type_filter(int index) const {
  return named_type_filter_.Get(index);
}
inline const std::string& GraphSearchRequest::named_type_filter(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphSearchRequest.named_type_filter)
  return _internal_named_type_filter(index);
}
inline std::string* GraphSearchRequest::mutable_named_type_filter(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphSearchRequest.named_type_filter)
  return named_type_filter_.Mutable(index);
}
inline void GraphSearchRequest::set_named_type_filter(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphSearchRequest.named_type_filter)
  named_type_filter_.Mutable(index)->assign(value);
}
inline void GraphSearchRequest::set_named_type_filter(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphSearchRequest.named_type_filter)
  named_type_filter_.Mutable(index)->assign(std::move(value));
}
inline void GraphSearchRequest::set_named_type_filter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  named_type_filter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphSearchRequest.named_type_filter)
}
inline void GraphSearchRequest::set_named_type_filter(int index, const char* value, size_t size) {
  named_type_filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphSearchRequest.named_type_filter)
}
inline std::string* GraphSearchRequest::_internal_add_named_type_filter() {
  return named_type_filter_.Add();
}
inline void GraphSearchRequest::add_named_type_filter(const std::string& value) {
  named_type_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GraphSearchRequest.named_type_filter)
}
inline void GraphSearchRequest::add_named_type_filter(std::string&& value) {
  named_type_filter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GraphSearchRequest.named_type_filter)
}
inline void GraphSearchRequest::add_named_type_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  named_type_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:esriPBuffer.graph.GraphSearchRequest.named_type_filter)
}
inline void GraphSearchRequest::add_named_type_filter(const char* value, size_t size) {
  named_type_filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:esriPBuffer.graph.GraphSearchRequest.named_type_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GraphSearchRequest::named_type_filter() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.GraphSearchRequest.named_type_filter)
  return named_type_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GraphSearchRequest::mutable_named_type_filter() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.GraphSearchRequest.named_type_filter)
  return &named_type_filter_;
}

// .esriPBuffer.graph.GraphSearchRequest.esriNamedTypeCategory type_category_filter = 4;
inline void GraphSearchRequest::clear_type_category_filter() {
  type_category_filter_ = 0;
}
inline ::esriPBuffer::graph::GraphSearchRequest_esriNamedTypeCategory GraphSearchRequest::_internal_type_category_filter() const {
  return static_cast< ::esriPBuffer::graph::GraphSearchRequest_esriNamedTypeCategory >(type_category_filter_);
}
inline ::esriPBuffer::graph::GraphSearchRequest_esriNamedTypeCategory GraphSearchRequest::type_category_filter() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphSearchRequest.type_category_filter)
  return _internal_type_category_filter();
}
inline void GraphSearchRequest::_internal_set_type_category_filter(::esriPBuffer::graph::GraphSearchRequest_esriNamedTypeCategory value) {
  
  type_category_filter_ = value;
}
inline void GraphSearchRequest::set_type_category_filter(::esriPBuffer::graph::GraphSearchRequest_esriNamedTypeCategory value) {
  _internal_set_type_category_filter(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphSearchRequest.type_category_filter)
}

// .esriPBuffer.graph.GeometryValue spatial_filter = 5;
inline bool GraphSearchRequest::_internal_has_spatial_filter() const {
  return this != internal_default_instance() && spatial_filter_ != nullptr;
}
inline bool GraphSearchRequest::has_spatial_filter() const {
  return _internal_has_spatial_filter();
}
inline const ::esriPBuffer::graph::GeometryValue& GraphSearchRequest::_internal_spatial_filter() const {
  const ::esriPBuffer::graph::GeometryValue* p = spatial_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::GeometryValue*>(
      &::esriPBuffer::graph::_GeometryValue_default_instance_);
}
inline const ::esriPBuffer::graph::GeometryValue& GraphSearchRequest::spatial_filter() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphSearchRequest.spatial_filter)
  return _internal_spatial_filter();
}
inline void GraphSearchRequest::unsafe_arena_set_allocated_spatial_filter(
    ::esriPBuffer::graph::GeometryValue* spatial_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_filter_);
  }
  spatial_filter_ = spatial_filter;
  if (spatial_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphSearchRequest.spatial_filter)
}
inline ::esriPBuffer::graph::GeometryValue* GraphSearchRequest::release_spatial_filter() {
  
  ::esriPBuffer::graph::GeometryValue* temp = spatial_filter_;
  spatial_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::GeometryValue* GraphSearchRequest::unsafe_arena_release_spatial_filter() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphSearchRequest.spatial_filter)
  
  ::esriPBuffer::graph::GeometryValue* temp = spatial_filter_;
  spatial_filter_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::GeometryValue* GraphSearchRequest::_internal_mutable_spatial_filter() {
  
  if (spatial_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::GeometryValue>(GetArena());
    spatial_filter_ = p;
  }
  return spatial_filter_;
}
inline ::esriPBuffer::graph::GeometryValue* GraphSearchRequest::mutable_spatial_filter() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphSearchRequest.spatial_filter)
  return _internal_mutable_spatial_filter();
}
inline void GraphSearchRequest::set_allocated_spatial_filter(::esriPBuffer::graph::GeometryValue* spatial_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_filter_);
  }
  if (spatial_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_filter)->GetArena();
    if (message_arena != submessage_arena) {
      spatial_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spatial_filter, submessage_arena);
    }
    
  } else {
    
  }
  spatial_filter_ = spatial_filter;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphSearchRequest.spatial_filter)
}

// .esriPBuffer.graph.Transform input_transform = 6;
inline bool GraphSearchRequest::_internal_has_input_transform() const {
  return this != internal_default_instance() && input_transform_ != nullptr;
}
inline bool GraphSearchRequest::has_input_transform() const {
  return _internal_has_input_transform();
}
inline const ::esriPBuffer::graph::Transform& GraphSearchRequest::_internal_input_transform() const {
  const ::esriPBuffer::graph::Transform* p = input_transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::Transform*>(
      &::esriPBuffer::graph::_Transform_default_instance_);
}
inline const ::esriPBuffer::graph::Transform& GraphSearchRequest::input_transform() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphSearchRequest.input_transform)
  return _internal_input_transform();
}
inline void GraphSearchRequest::unsafe_arena_set_allocated_input_transform(
    ::esriPBuffer::graph::Transform* input_transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_transform_);
  }
  input_transform_ = input_transform;
  if (input_transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphSearchRequest.input_transform)
}
inline ::esriPBuffer::graph::Transform* GraphSearchRequest::release_input_transform() {
  
  ::esriPBuffer::graph::Transform* temp = input_transform_;
  input_transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::Transform* GraphSearchRequest::unsafe_arena_release_input_transform() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphSearchRequest.input_transform)
  
  ::esriPBuffer::graph::Transform* temp = input_transform_;
  input_transform_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::Transform* GraphSearchRequest::_internal_mutable_input_transform() {
  
  if (input_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::Transform>(GetArena());
    input_transform_ = p;
  }
  return input_transform_;
}
inline ::esriPBuffer::graph::Transform* GraphSearchRequest::mutable_input_transform() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphSearchRequest.input_transform)
  return _internal_mutable_input_transform();
}
inline void GraphSearchRequest::set_allocated_input_transform(::esriPBuffer::graph::Transform* input_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_transform_);
  }
  if (input_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_transform)->GetArena();
    if (message_arena != submessage_arena) {
      input_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_transform, submessage_arena);
    }
    
  } else {
    
  }
  input_transform_ = input_transform;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphSearchRequest.input_transform)
}

// .esriPBuffer.EsriTypes.SpatialReference input_spat_ref = 7;
inline bool GraphSearchRequest::_internal_has_input_spat_ref() const {
  return this != internal_default_instance() && input_spat_ref_ != nullptr;
}
inline bool GraphSearchRequest::has_input_spat_ref() const {
  return _internal_has_input_spat_ref();
}
inline const ::esriPBuffer::EsriTypes_SpatialReference& GraphSearchRequest::_internal_input_spat_ref() const {
  const ::esriPBuffer::EsriTypes_SpatialReference* p = input_spat_ref_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_SpatialReference*>(
      &::esriPBuffer::_EsriTypes_SpatialReference_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_SpatialReference& GraphSearchRequest::input_spat_ref() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphSearchRequest.input_spat_ref)
  return _internal_input_spat_ref();
}
inline void GraphSearchRequest::unsafe_arena_set_allocated_input_spat_ref(
    ::esriPBuffer::EsriTypes_SpatialReference* input_spat_ref) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_spat_ref_);
  }
  input_spat_ref_ = input_spat_ref;
  if (input_spat_ref) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphSearchRequest.input_spat_ref)
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphSearchRequest::release_input_spat_ref() {
  
  ::esriPBuffer::EsriTypes_SpatialReference* temp = input_spat_ref_;
  input_spat_ref_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphSearchRequest::unsafe_arena_release_input_spat_ref() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphSearchRequest.input_spat_ref)
  
  ::esriPBuffer::EsriTypes_SpatialReference* temp = input_spat_ref_;
  input_spat_ref_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphSearchRequest::_internal_mutable_input_spat_ref() {
  
  if (input_spat_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_SpatialReference>(GetArena());
    input_spat_ref_ = p;
  }
  return input_spat_ref_;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphSearchRequest::mutable_input_spat_ref() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphSearchRequest.input_spat_ref)
  return _internal_mutable_input_spat_ref();
}
inline void GraphSearchRequest::set_allocated_input_spat_ref(::esriPBuffer::EsriTypes_SpatialReference* input_spat_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_spat_ref_);
  }
  if (input_spat_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_spat_ref)->GetArena();
    if (message_arena != submessage_arena) {
      input_spat_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_spat_ref, submessage_arena);
    }
    
  } else {
    
  }
  input_spat_ref_ = input_spat_ref;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphSearchRequest.input_spat_ref)
}

// .esriPBuffer.EsriTypes.esriSpatialRel spatial_relation = 8;
inline void GraphSearchRequest::clear_spatial_relation() {
  spatial_relation_ = 0;
}
inline ::esriPBuffer::EsriTypes_esriSpatialRel GraphSearchRequest::_internal_spatial_relation() const {
  return static_cast< ::esriPBuffer::EsriTypes_esriSpatialRel >(spatial_relation_);
}
inline ::esriPBuffer::EsriTypes_esriSpatialRel GraphSearchRequest::spatial_relation() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphSearchRequest.spatial_relation)
  return _internal_spatial_relation();
}
inline void GraphSearchRequest::_internal_set_spatial_relation(::esriPBuffer::EsriTypes_esriSpatialRel value) {
  
  spatial_relation_ = value;
}
inline void GraphSearchRequest::set_spatial_relation(::esriPBuffer::EsriTypes_esriSpatialRel value) {
  _internal_set_spatial_relation(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphSearchRequest.spatial_relation)
}

// bool return_geometry = 9;
inline void GraphSearchRequest::clear_return_geometry() {
  return_geometry_ = false;
}
inline bool GraphSearchRequest::_internal_return_geometry() const {
  return return_geometry_;
}
inline bool GraphSearchRequest::return_geometry() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphSearchRequest.return_geometry)
  return _internal_return_geometry();
}
inline void GraphSearchRequest::_internal_set_return_geometry(bool value) {
  
  return_geometry_ = value;
}
inline void GraphSearchRequest::set_return_geometry(bool value) {
  _internal_set_return_geometry(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphSearchRequest.return_geometry)
}

// .esriPBuffer.EsriTypes.esriFeatureEncoding feature_encoding = 10;
inline void GraphSearchRequest::clear_feature_encoding() {
  feature_encoding_ = 0;
}
inline ::esriPBuffer::EsriTypes_esriFeatureEncoding GraphSearchRequest::_internal_feature_encoding() const {
  return static_cast< ::esriPBuffer::EsriTypes_esriFeatureEncoding >(feature_encoding_);
}
inline ::esriPBuffer::EsriTypes_esriFeatureEncoding GraphSearchRequest::feature_encoding() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphSearchRequest.feature_encoding)
  return _internal_feature_encoding();
}
inline void GraphSearchRequest::_internal_set_feature_encoding(::esriPBuffer::EsriTypes_esriFeatureEncoding value) {
  
  feature_encoding_ = value;
}
inline void GraphSearchRequest::set_feature_encoding(::esriPBuffer::EsriTypes_esriFeatureEncoding value) {
  _internal_set_feature_encoding(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphSearchRequest.feature_encoding)
}

// .esriPBuffer.EsriTypes.SpatialReference out_spat_ref = 11;
inline bool GraphSearchRequest::_internal_has_out_spat_ref() const {
  return this != internal_default_instance() && out_spat_ref_ != nullptr;
}
inline bool GraphSearchRequest::has_out_spat_ref() const {
  return _internal_has_out_spat_ref();
}
inline const ::esriPBuffer::EsriTypes_SpatialReference& GraphSearchRequest::_internal_out_spat_ref() const {
  const ::esriPBuffer::EsriTypes_SpatialReference* p = out_spat_ref_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_SpatialReference*>(
      &::esriPBuffer::_EsriTypes_SpatialReference_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_SpatialReference& GraphSearchRequest::out_spat_ref() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphSearchRequest.out_spat_ref)
  return _internal_out_spat_ref();
}
inline void GraphSearchRequest::unsafe_arena_set_allocated_out_spat_ref(
    ::esriPBuffer::EsriTypes_SpatialReference* out_spat_ref) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(out_spat_ref_);
  }
  out_spat_ref_ = out_spat_ref;
  if (out_spat_ref) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphSearchRequest.out_spat_ref)
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphSearchRequest::release_out_spat_ref() {
  
  ::esriPBuffer::EsriTypes_SpatialReference* temp = out_spat_ref_;
  out_spat_ref_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphSearchRequest::unsafe_arena_release_out_spat_ref() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphSearchRequest.out_spat_ref)
  
  ::esriPBuffer::EsriTypes_SpatialReference* temp = out_spat_ref_;
  out_spat_ref_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphSearchRequest::_internal_mutable_out_spat_ref() {
  
  if (out_spat_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_SpatialReference>(GetArena());
    out_spat_ref_ = p;
  }
  return out_spat_ref_;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphSearchRequest::mutable_out_spat_ref() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphSearchRequest.out_spat_ref)
  return _internal_mutable_out_spat_ref();
}
inline void GraphSearchRequest::set_allocated_out_spat_ref(::esriPBuffer::EsriTypes_SpatialReference* out_spat_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(out_spat_ref_);
  }
  if (out_spat_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(out_spat_ref)->GetArena();
    if (message_arena != submessage_arena) {
      out_spat_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, out_spat_ref, submessage_arena);
    }
    
  } else {
    
  }
  out_spat_ref_ = out_spat_ref;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphSearchRequest.out_spat_ref)
}

// .esriPBuffer.EsriTypes.DatumTransformation datum_transform = 12;
inline bool GraphSearchRequest::_internal_has_datum_transform() const {
  return this != internal_default_instance() && datum_transform_ != nullptr;
}
inline bool GraphSearchRequest::has_datum_transform() const {
  return _internal_has_datum_transform();
}
inline const ::esriPBuffer::EsriTypes_DatumTransformation& GraphSearchRequest::_internal_datum_transform() const {
  const ::esriPBuffer::EsriTypes_DatumTransformation* p = datum_transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_DatumTransformation*>(
      &::esriPBuffer::_EsriTypes_DatumTransformation_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_DatumTransformation& GraphSearchRequest::datum_transform() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphSearchRequest.datum_transform)
  return _internal_datum_transform();
}
inline void GraphSearchRequest::unsafe_arena_set_allocated_datum_transform(
    ::esriPBuffer::EsriTypes_DatumTransformation* datum_transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datum_transform_);
  }
  datum_transform_ = datum_transform;
  if (datum_transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphSearchRequest.datum_transform)
}
inline ::esriPBuffer::EsriTypes_DatumTransformation* GraphSearchRequest::release_datum_transform() {
  
  ::esriPBuffer::EsriTypes_DatumTransformation* temp = datum_transform_;
  datum_transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_DatumTransformation* GraphSearchRequest::unsafe_arena_release_datum_transform() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphSearchRequest.datum_transform)
  
  ::esriPBuffer::EsriTypes_DatumTransformation* temp = datum_transform_;
  datum_transform_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_DatumTransformation* GraphSearchRequest::_internal_mutable_datum_transform() {
  
  if (datum_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_DatumTransformation>(GetArena());
    datum_transform_ = p;
  }
  return datum_transform_;
}
inline ::esriPBuffer::EsriTypes_DatumTransformation* GraphSearchRequest::mutable_datum_transform() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphSearchRequest.datum_transform)
  return _internal_mutable_datum_transform();
}
inline void GraphSearchRequest::set_allocated_datum_transform(::esriPBuffer::EsriTypes_DatumTransformation* datum_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(datum_transform_);
  }
  if (datum_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datum_transform)->GetArena();
    if (message_arena != submessage_arena) {
      datum_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datum_transform, submessage_arena);
    }
    
  } else {
    
  }
  datum_transform_ = datum_transform;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphSearchRequest.datum_transform)
}

// .esriPBuffer.graph.QuantizationParameters quantization_params = 14;
inline bool GraphSearchRequest::_internal_has_quantization_params() const {
  return this != internal_default_instance() && quantization_params_ != nullptr;
}
inline bool GraphSearchRequest::has_quantization_params() const {
  return _internal_has_quantization_params();
}
inline const ::esriPBuffer::graph::QuantizationParameters& GraphSearchRequest::_internal_quantization_params() const {
  const ::esriPBuffer::graph::QuantizationParameters* p = quantization_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::QuantizationParameters*>(
      &::esriPBuffer::graph::_QuantizationParameters_default_instance_);
}
inline const ::esriPBuffer::graph::QuantizationParameters& GraphSearchRequest::quantization_params() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphSearchRequest.quantization_params)
  return _internal_quantization_params();
}
inline void GraphSearchRequest::unsafe_arena_set_allocated_quantization_params(
    ::esriPBuffer::graph::QuantizationParameters* quantization_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quantization_params_);
  }
  quantization_params_ = quantization_params;
  if (quantization_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphSearchRequest.quantization_params)
}
inline ::esriPBuffer::graph::QuantizationParameters* GraphSearchRequest::release_quantization_params() {
  
  ::esriPBuffer::graph::QuantizationParameters* temp = quantization_params_;
  quantization_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::QuantizationParameters* GraphSearchRequest::unsafe_arena_release_quantization_params() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphSearchRequest.quantization_params)
  
  ::esriPBuffer::graph::QuantizationParameters* temp = quantization_params_;
  quantization_params_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::QuantizationParameters* GraphSearchRequest::_internal_mutable_quantization_params() {
  
  if (quantization_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::QuantizationParameters>(GetArena());
    quantization_params_ = p;
  }
  return quantization_params_;
}
inline ::esriPBuffer::graph::QuantizationParameters* GraphSearchRequest::mutable_quantization_params() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphSearchRequest.quantization_params)
  return _internal_mutable_quantization_params();
}
inline void GraphSearchRequest::set_allocated_quantization_params(::esriPBuffer::graph::QuantizationParameters* quantization_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(quantization_params_);
  }
  if (quantization_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quantization_params)->GetArena();
    if (message_arena != submessage_arena) {
      quantization_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quantization_params, submessage_arena);
    }
    
  } else {
    
  }
  quantization_params_ = quantization_params;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphSearchRequest.quantization_params)
}

// sint32 start_index = 15;
inline void GraphSearchRequest::clear_start_index() {
  start_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphSearchRequest::_internal_start_index() const {
  return start_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphSearchRequest::start_index() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphSearchRequest.start_index)
  return _internal_start_index();
}
inline void GraphSearchRequest::_internal_set_start_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_index_ = value;
}
inline void GraphSearchRequest::set_start_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_index(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphSearchRequest.start_index)
}

// sint32 max_num_results = 16;
inline void GraphSearchRequest::clear_max_num_results() {
  max_num_results_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphSearchRequest::_internal_max_num_results() const {
  return max_num_results_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphSearchRequest::max_num_results() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphSearchRequest.max_num_results)
  return _internal_max_num_results();
}
inline void GraphSearchRequest::_internal_set_max_num_results(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_num_results_ = value;
}
inline void GraphSearchRequest::set_max_num_results(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_num_results(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphSearchRequest.max_num_results)
}

// bool return_search_context = 17;
inline void GraphSearchRequest::clear_return_search_context() {
  return_search_context_ = false;
}
inline bool GraphSearchRequest::_internal_return_search_context() const {
  return return_search_context_;
}
inline bool GraphSearchRequest::return_search_context() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphSearchRequest.return_search_context)
  return _internal_return_search_context();
}
inline void GraphSearchRequest::_internal_set_return_search_context(bool value) {
  
  return_search_context_ = value;
}
inline void GraphSearchRequest::set_return_search_context(bool value) {
  _internal_set_return_search_context(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphSearchRequest.return_search_context)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace esriPBuffer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::esriPBuffer::graph::GraphSearchRequest_esriNamedTypeCategory> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fSearchQueryRequest_2eproto
