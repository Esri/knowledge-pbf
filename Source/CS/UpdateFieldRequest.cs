// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: esriPBuffer/graph/UpdateFieldRequest.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EsriPBuffer.Graph {

  /// <summary>Holder for reflection information generated from esriPBuffer/graph/UpdateFieldRequest.proto</summary>
  public static partial class UpdateFieldRequestReflection {

    #region Descriptor
    /// <summary>File descriptor for esriPBuffer/graph/UpdateFieldRequest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UpdateFieldRequestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ciplc3JpUEJ1ZmZlci9ncmFwaC9VcGRhdGVGaWVsZFJlcXVlc3QucHJvdG8S",
            "EWVzcmlQQnVmZmVyLmdyYXBoGiZlc3JpUEJ1ZmZlci9ncmFwaC9EYXRhTW9k",
            "ZWxUeXBlcy5wcm90byLWAgoRR3JhcGhQcm9wZXJ0eU1hc2sSEwoLdXBkYXRl",
            "X25hbWUYASABKAgSFAoMdXBkYXRlX2FsaWFzGAIgASgIEhkKEXVwZGF0ZV9m",
            "aWVsZF90eXBlGAMgASgIEhwKFHVwZGF0ZV9nZW9tZXRyeV90eXBlGAQgASgI",
            "EhwKFHVwZGF0ZV9kZWZhdWx0X3ZhbHVlGAUgASgIEhcKD3VwZGF0ZV9udWxs",
            "YWJsZRgGIAEoCBIXCg91cGRhdGVfZWRpdGFibGUYByABKAgSFgoOdXBkYXRl",
            "X3Zpc2libGUYCCABKAgSFwoPdXBkYXRlX3JlcXVpcmVkGAkgASgIEhUKDXVw",
            "ZGF0ZV9kb21haW4YCiABKAgSFAoMdXBkYXRlX2hhc196GAwgASgIEhQKDHVw",
            "ZGF0ZV9oYXNfbRgNIAEoCBIZChF1cGRhdGVfc2VhcmNoYWJsZRgOIAEoCCKh",
            "AQoaR3JhcGhQcm9wZXJ0eVVwZGF0ZVJlcXVlc3QSMgoEbWFzaxgBIAEoCzIk",
            "LmVzcmlQQnVmZmVyLmdyYXBoLkdyYXBoUHJvcGVydHlNYXNrEjgKDmdyYXBo",
            "X3Byb3BlcnR5GAIgASgLMiAuZXNyaVBCdWZmZXIuZ3JhcGguR3JhcGhQcm9w",
            "ZXJ0eRIVCg1wcm9wZXJ0eV9uYW1lGAMgASgJQiUKHmNvbS5lc3JpLmFyY2dp",
            "cy5wcm90b2J1Zi5ncmFwaEgD+AEBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::EsriPBuffer.Graph.DataModelTypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EsriPBuffer.Graph.GraphPropertyMask), global::EsriPBuffer.Graph.GraphPropertyMask.Parser, new[]{ "UpdateName", "UpdateAlias", "UpdateFieldType", "UpdateGeometryType", "UpdateDefaultValue", "UpdateNullable", "UpdateEditable", "UpdateVisible", "UpdateRequired", "UpdateDomain", "UpdateHasZ", "UpdateHasM", "UpdateSearchable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EsriPBuffer.Graph.GraphPropertyUpdateRequest), global::EsriPBuffer.Graph.GraphPropertyUpdateRequest.Parser, new[]{ "Mask", "GraphProperty", "PropertyName" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GraphPropertyMask : pb::IMessage<GraphPropertyMask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GraphPropertyMask> _parser = new pb::MessageParser<GraphPropertyMask>(() => new GraphPropertyMask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GraphPropertyMask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EsriPBuffer.Graph.UpdateFieldRequestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphPropertyMask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphPropertyMask(GraphPropertyMask other) : this() {
      updateName_ = other.updateName_;
      updateAlias_ = other.updateAlias_;
      updateFieldType_ = other.updateFieldType_;
      updateGeometryType_ = other.updateGeometryType_;
      updateDefaultValue_ = other.updateDefaultValue_;
      updateNullable_ = other.updateNullable_;
      updateEditable_ = other.updateEditable_;
      updateVisible_ = other.updateVisible_;
      updateRequired_ = other.updateRequired_;
      updateDomain_ = other.updateDomain_;
      updateHasZ_ = other.updateHasZ_;
      updateHasM_ = other.updateHasM_;
      updateSearchable_ = other.updateSearchable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphPropertyMask Clone() {
      return new GraphPropertyMask(this);
    }

    /// <summary>Field number for the "update_name" field.</summary>
    public const int UpdateNameFieldNumber = 1;
    private bool updateName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateName {
      get { return updateName_; }
      set {
        updateName_ = value;
      }
    }

    /// <summary>Field number for the "update_alias" field.</summary>
    public const int UpdateAliasFieldNumber = 2;
    private bool updateAlias_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateAlias {
      get { return updateAlias_; }
      set {
        updateAlias_ = value;
      }
    }

    /// <summary>Field number for the "update_field_type" field.</summary>
    public const int UpdateFieldTypeFieldNumber = 3;
    private bool updateFieldType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateFieldType {
      get { return updateFieldType_; }
      set {
        updateFieldType_ = value;
      }
    }

    /// <summary>Field number for the "update_geometry_type" field.</summary>
    public const int UpdateGeometryTypeFieldNumber = 4;
    private bool updateGeometryType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateGeometryType {
      get { return updateGeometryType_; }
      set {
        updateGeometryType_ = value;
      }
    }

    /// <summary>Field number for the "update_default_value" field.</summary>
    public const int UpdateDefaultValueFieldNumber = 5;
    private bool updateDefaultValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateDefaultValue {
      get { return updateDefaultValue_; }
      set {
        updateDefaultValue_ = value;
      }
    }

    /// <summary>Field number for the "update_nullable" field.</summary>
    public const int UpdateNullableFieldNumber = 6;
    private bool updateNullable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateNullable {
      get { return updateNullable_; }
      set {
        updateNullable_ = value;
      }
    }

    /// <summary>Field number for the "update_editable" field.</summary>
    public const int UpdateEditableFieldNumber = 7;
    private bool updateEditable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateEditable {
      get { return updateEditable_; }
      set {
        updateEditable_ = value;
      }
    }

    /// <summary>Field number for the "update_visible" field.</summary>
    public const int UpdateVisibleFieldNumber = 8;
    private bool updateVisible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateVisible {
      get { return updateVisible_; }
      set {
        updateVisible_ = value;
      }
    }

    /// <summary>Field number for the "update_required" field.</summary>
    public const int UpdateRequiredFieldNumber = 9;
    private bool updateRequired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateRequired {
      get { return updateRequired_; }
      set {
        updateRequired_ = value;
      }
    }

    /// <summary>Field number for the "update_domain" field.</summary>
    public const int UpdateDomainFieldNumber = 10;
    private bool updateDomain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateDomain {
      get { return updateDomain_; }
      set {
        updateDomain_ = value;
      }
    }

    /// <summary>Field number for the "update_has_z" field.</summary>
    public const int UpdateHasZFieldNumber = 12;
    private bool updateHasZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateHasZ {
      get { return updateHasZ_; }
      set {
        updateHasZ_ = value;
      }
    }

    /// <summary>Field number for the "update_has_m" field.</summary>
    public const int UpdateHasMFieldNumber = 13;
    private bool updateHasM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateHasM {
      get { return updateHasM_; }
      set {
        updateHasM_ = value;
      }
    }

    /// <summary>Field number for the "update_searchable" field.</summary>
    public const int UpdateSearchableFieldNumber = 14;
    private bool updateSearchable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpdateSearchable {
      get { return updateSearchable_; }
      set {
        updateSearchable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GraphPropertyMask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GraphPropertyMask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UpdateName != other.UpdateName) return false;
      if (UpdateAlias != other.UpdateAlias) return false;
      if (UpdateFieldType != other.UpdateFieldType) return false;
      if (UpdateGeometryType != other.UpdateGeometryType) return false;
      if (UpdateDefaultValue != other.UpdateDefaultValue) return false;
      if (UpdateNullable != other.UpdateNullable) return false;
      if (UpdateEditable != other.UpdateEditable) return false;
      if (UpdateVisible != other.UpdateVisible) return false;
      if (UpdateRequired != other.UpdateRequired) return false;
      if (UpdateDomain != other.UpdateDomain) return false;
      if (UpdateHasZ != other.UpdateHasZ) return false;
      if (UpdateHasM != other.UpdateHasM) return false;
      if (UpdateSearchable != other.UpdateSearchable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UpdateName != false) hash ^= UpdateName.GetHashCode();
      if (UpdateAlias != false) hash ^= UpdateAlias.GetHashCode();
      if (UpdateFieldType != false) hash ^= UpdateFieldType.GetHashCode();
      if (UpdateGeometryType != false) hash ^= UpdateGeometryType.GetHashCode();
      if (UpdateDefaultValue != false) hash ^= UpdateDefaultValue.GetHashCode();
      if (UpdateNullable != false) hash ^= UpdateNullable.GetHashCode();
      if (UpdateEditable != false) hash ^= UpdateEditable.GetHashCode();
      if (UpdateVisible != false) hash ^= UpdateVisible.GetHashCode();
      if (UpdateRequired != false) hash ^= UpdateRequired.GetHashCode();
      if (UpdateDomain != false) hash ^= UpdateDomain.GetHashCode();
      if (UpdateHasZ != false) hash ^= UpdateHasZ.GetHashCode();
      if (UpdateHasM != false) hash ^= UpdateHasM.GetHashCode();
      if (UpdateSearchable != false) hash ^= UpdateSearchable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UpdateName != false) {
        output.WriteRawTag(8);
        output.WriteBool(UpdateName);
      }
      if (UpdateAlias != false) {
        output.WriteRawTag(16);
        output.WriteBool(UpdateAlias);
      }
      if (UpdateFieldType != false) {
        output.WriteRawTag(24);
        output.WriteBool(UpdateFieldType);
      }
      if (UpdateGeometryType != false) {
        output.WriteRawTag(32);
        output.WriteBool(UpdateGeometryType);
      }
      if (UpdateDefaultValue != false) {
        output.WriteRawTag(40);
        output.WriteBool(UpdateDefaultValue);
      }
      if (UpdateNullable != false) {
        output.WriteRawTag(48);
        output.WriteBool(UpdateNullable);
      }
      if (UpdateEditable != false) {
        output.WriteRawTag(56);
        output.WriteBool(UpdateEditable);
      }
      if (UpdateVisible != false) {
        output.WriteRawTag(64);
        output.WriteBool(UpdateVisible);
      }
      if (UpdateRequired != false) {
        output.WriteRawTag(72);
        output.WriteBool(UpdateRequired);
      }
      if (UpdateDomain != false) {
        output.WriteRawTag(80);
        output.WriteBool(UpdateDomain);
      }
      if (UpdateHasZ != false) {
        output.WriteRawTag(96);
        output.WriteBool(UpdateHasZ);
      }
      if (UpdateHasM != false) {
        output.WriteRawTag(104);
        output.WriteBool(UpdateHasM);
      }
      if (UpdateSearchable != false) {
        output.WriteRawTag(112);
        output.WriteBool(UpdateSearchable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UpdateName != false) {
        output.WriteRawTag(8);
        output.WriteBool(UpdateName);
      }
      if (UpdateAlias != false) {
        output.WriteRawTag(16);
        output.WriteBool(UpdateAlias);
      }
      if (UpdateFieldType != false) {
        output.WriteRawTag(24);
        output.WriteBool(UpdateFieldType);
      }
      if (UpdateGeometryType != false) {
        output.WriteRawTag(32);
        output.WriteBool(UpdateGeometryType);
      }
      if (UpdateDefaultValue != false) {
        output.WriteRawTag(40);
        output.WriteBool(UpdateDefaultValue);
      }
      if (UpdateNullable != false) {
        output.WriteRawTag(48);
        output.WriteBool(UpdateNullable);
      }
      if (UpdateEditable != false) {
        output.WriteRawTag(56);
        output.WriteBool(UpdateEditable);
      }
      if (UpdateVisible != false) {
        output.WriteRawTag(64);
        output.WriteBool(UpdateVisible);
      }
      if (UpdateRequired != false) {
        output.WriteRawTag(72);
        output.WriteBool(UpdateRequired);
      }
      if (UpdateDomain != false) {
        output.WriteRawTag(80);
        output.WriteBool(UpdateDomain);
      }
      if (UpdateHasZ != false) {
        output.WriteRawTag(96);
        output.WriteBool(UpdateHasZ);
      }
      if (UpdateHasM != false) {
        output.WriteRawTag(104);
        output.WriteBool(UpdateHasM);
      }
      if (UpdateSearchable != false) {
        output.WriteRawTag(112);
        output.WriteBool(UpdateSearchable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UpdateName != false) {
        size += 1 + 1;
      }
      if (UpdateAlias != false) {
        size += 1 + 1;
      }
      if (UpdateFieldType != false) {
        size += 1 + 1;
      }
      if (UpdateGeometryType != false) {
        size += 1 + 1;
      }
      if (UpdateDefaultValue != false) {
        size += 1 + 1;
      }
      if (UpdateNullable != false) {
        size += 1 + 1;
      }
      if (UpdateEditable != false) {
        size += 1 + 1;
      }
      if (UpdateVisible != false) {
        size += 1 + 1;
      }
      if (UpdateRequired != false) {
        size += 1 + 1;
      }
      if (UpdateDomain != false) {
        size += 1 + 1;
      }
      if (UpdateHasZ != false) {
        size += 1 + 1;
      }
      if (UpdateHasM != false) {
        size += 1 + 1;
      }
      if (UpdateSearchable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GraphPropertyMask other) {
      if (other == null) {
        return;
      }
      if (other.UpdateName != false) {
        UpdateName = other.UpdateName;
      }
      if (other.UpdateAlias != false) {
        UpdateAlias = other.UpdateAlias;
      }
      if (other.UpdateFieldType != false) {
        UpdateFieldType = other.UpdateFieldType;
      }
      if (other.UpdateGeometryType != false) {
        UpdateGeometryType = other.UpdateGeometryType;
      }
      if (other.UpdateDefaultValue != false) {
        UpdateDefaultValue = other.UpdateDefaultValue;
      }
      if (other.UpdateNullable != false) {
        UpdateNullable = other.UpdateNullable;
      }
      if (other.UpdateEditable != false) {
        UpdateEditable = other.UpdateEditable;
      }
      if (other.UpdateVisible != false) {
        UpdateVisible = other.UpdateVisible;
      }
      if (other.UpdateRequired != false) {
        UpdateRequired = other.UpdateRequired;
      }
      if (other.UpdateDomain != false) {
        UpdateDomain = other.UpdateDomain;
      }
      if (other.UpdateHasZ != false) {
        UpdateHasZ = other.UpdateHasZ;
      }
      if (other.UpdateHasM != false) {
        UpdateHasM = other.UpdateHasM;
      }
      if (other.UpdateSearchable != false) {
        UpdateSearchable = other.UpdateSearchable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UpdateName = input.ReadBool();
            break;
          }
          case 16: {
            UpdateAlias = input.ReadBool();
            break;
          }
          case 24: {
            UpdateFieldType = input.ReadBool();
            break;
          }
          case 32: {
            UpdateGeometryType = input.ReadBool();
            break;
          }
          case 40: {
            UpdateDefaultValue = input.ReadBool();
            break;
          }
          case 48: {
            UpdateNullable = input.ReadBool();
            break;
          }
          case 56: {
            UpdateEditable = input.ReadBool();
            break;
          }
          case 64: {
            UpdateVisible = input.ReadBool();
            break;
          }
          case 72: {
            UpdateRequired = input.ReadBool();
            break;
          }
          case 80: {
            UpdateDomain = input.ReadBool();
            break;
          }
          case 96: {
            UpdateHasZ = input.ReadBool();
            break;
          }
          case 104: {
            UpdateHasM = input.ReadBool();
            break;
          }
          case 112: {
            UpdateSearchable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UpdateName = input.ReadBool();
            break;
          }
          case 16: {
            UpdateAlias = input.ReadBool();
            break;
          }
          case 24: {
            UpdateFieldType = input.ReadBool();
            break;
          }
          case 32: {
            UpdateGeometryType = input.ReadBool();
            break;
          }
          case 40: {
            UpdateDefaultValue = input.ReadBool();
            break;
          }
          case 48: {
            UpdateNullable = input.ReadBool();
            break;
          }
          case 56: {
            UpdateEditable = input.ReadBool();
            break;
          }
          case 64: {
            UpdateVisible = input.ReadBool();
            break;
          }
          case 72: {
            UpdateRequired = input.ReadBool();
            break;
          }
          case 80: {
            UpdateDomain = input.ReadBool();
            break;
          }
          case 96: {
            UpdateHasZ = input.ReadBool();
            break;
          }
          case 104: {
            UpdateHasM = input.ReadBool();
            break;
          }
          case 112: {
            UpdateSearchable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GraphPropertyUpdateRequest : pb::IMessage<GraphPropertyUpdateRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GraphPropertyUpdateRequest> _parser = new pb::MessageParser<GraphPropertyUpdateRequest>(() => new GraphPropertyUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GraphPropertyUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EsriPBuffer.Graph.UpdateFieldRequestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphPropertyUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphPropertyUpdateRequest(GraphPropertyUpdateRequest other) : this() {
      mask_ = other.mask_ != null ? other.mask_.Clone() : null;
      graphProperty_ = other.graphProperty_ != null ? other.graphProperty_.Clone() : null;
      propertyName_ = other.propertyName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphPropertyUpdateRequest Clone() {
      return new GraphPropertyUpdateRequest(this);
    }

    /// <summary>Field number for the "mask" field.</summary>
    public const int MaskFieldNumber = 1;
    private global::EsriPBuffer.Graph.GraphPropertyMask mask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EsriPBuffer.Graph.GraphPropertyMask Mask {
      get { return mask_; }
      set {
        mask_ = value;
      }
    }

    /// <summary>Field number for the "graph_property" field.</summary>
    public const int GraphPropertyFieldNumber = 2;
    private global::EsriPBuffer.Graph.GraphProperty graphProperty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EsriPBuffer.Graph.GraphProperty GraphProperty {
      get { return graphProperty_; }
      set {
        graphProperty_ = value;
      }
    }

    /// <summary>Field number for the "property_name" field.</summary>
    public const int PropertyNameFieldNumber = 3;
    private string propertyName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PropertyName {
      get { return propertyName_; }
      set {
        propertyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GraphPropertyUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GraphPropertyUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mask, other.Mask)) return false;
      if (!object.Equals(GraphProperty, other.GraphProperty)) return false;
      if (PropertyName != other.PropertyName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mask_ != null) hash ^= Mask.GetHashCode();
      if (graphProperty_ != null) hash ^= GraphProperty.GetHashCode();
      if (PropertyName.Length != 0) hash ^= PropertyName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (mask_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mask);
      }
      if (graphProperty_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GraphProperty);
      }
      if (PropertyName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PropertyName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (mask_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mask);
      }
      if (graphProperty_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GraphProperty);
      }
      if (PropertyName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PropertyName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mask);
      }
      if (graphProperty_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GraphProperty);
      }
      if (PropertyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PropertyName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GraphPropertyUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.mask_ != null) {
        if (mask_ == null) {
          Mask = new global::EsriPBuffer.Graph.GraphPropertyMask();
        }
        Mask.MergeFrom(other.Mask);
      }
      if (other.graphProperty_ != null) {
        if (graphProperty_ == null) {
          GraphProperty = new global::EsriPBuffer.Graph.GraphProperty();
        }
        GraphProperty.MergeFrom(other.GraphProperty);
      }
      if (other.PropertyName.Length != 0) {
        PropertyName = other.PropertyName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mask_ == null) {
              Mask = new global::EsriPBuffer.Graph.GraphPropertyMask();
            }
            input.ReadMessage(Mask);
            break;
          }
          case 18: {
            if (graphProperty_ == null) {
              GraphProperty = new global::EsriPBuffer.Graph.GraphProperty();
            }
            input.ReadMessage(GraphProperty);
            break;
          }
          case 26: {
            PropertyName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (mask_ == null) {
              Mask = new global::EsriPBuffer.Graph.GraphPropertyMask();
            }
            input.ReadMessage(Mask);
            break;
          }
          case 18: {
            if (graphProperty_ == null) {
              GraphProperty = new global::EsriPBuffer.Graph.GraphProperty();
            }
            input.ReadMessage(GraphProperty);
            break;
          }
          case 26: {
            PropertyName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
