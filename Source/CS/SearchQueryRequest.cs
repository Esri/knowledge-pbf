// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: esriPBuffer/graph/SearchQueryRequest.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EsriPBuffer.Graph {

  /// <summary>Holder for reflection information generated from esriPBuffer/graph/SearchQueryRequest.proto</summary>
  public static partial class SearchQueryRequestReflection {

    #region Descriptor
    /// <summary>File descriptor for esriPBuffer/graph/SearchQueryRequest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SearchQueryRequestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ciplc3JpUEJ1ZmZlci9ncmFwaC9TZWFyY2hRdWVyeVJlcXVlc3QucHJvdG8S",
            "EWVzcmlQQnVmZmVyLmdyYXBoGhtlc3JpUEJ1ZmZlci9Fc3JpVHlwZXMucHJv",
            "dG8aJmVzcmlQQnVmZmVyL2dyYXBoL0VzcmlHcmFwaFR5cGVzLnByb3RvIpYH",
            "ChJHcmFwaFNlYXJjaFJlcXVlc3QSFAoMc2VhcmNoX3F1ZXJ5GAEgASgJEhYK",
            "Dmdsb2JhbGlkX2FycmF5GAIgASgMEhkKEW5hbWVkX3R5cGVfZmlsdGVyGAMg",
            "AygJElkKFHR5cGVfY2F0ZWdvcnlfZmlsdGVyGAQgASgOMjsuZXNyaVBCdWZm",
            "ZXIuZ3JhcGguR3JhcGhTZWFyY2hSZXF1ZXN0LmVzcmlOYW1lZFR5cGVDYXRl",
            "Z29yeRI4Cg5zcGF0aWFsX2ZpbHRlchgFIAEoCzIgLmVzcmlQQnVmZmVyLmdy",
            "YXBoLkdlb21ldHJ5VmFsdWUSNQoPaW5wdXRfdHJhbnNmb3JtGAYgASgLMhwu",
            "ZXNyaVBCdWZmZXIuZ3JhcGguVHJhbnNmb3JtEj8KDmlucHV0X3NwYXRfcmVm",
            "GAcgASgLMicuZXNyaVBCdWZmZXIuRXNyaVR5cGVzLlNwYXRpYWxSZWZlcmVu",
            "Y2USPwoQc3BhdGlhbF9yZWxhdGlvbhgIIAEoDjIlLmVzcmlQQnVmZmVyLkVz",
            "cmlUeXBlcy5lc3JpU3BhdGlhbFJlbBIXCg9yZXR1cm5fZ2VvbWV0cnkYCSAB",
            "KAgSRAoQZmVhdHVyZV9lbmNvZGluZxgKIAEoDjIqLmVzcmlQQnVmZmVyLkVz",
            "cmlUeXBlcy5lc3JpRmVhdHVyZUVuY29kaW5nEj0KDG91dF9zcGF0X3JlZhgL",
            "IAEoCzInLmVzcmlQQnVmZmVyLkVzcmlUeXBlcy5TcGF0aWFsUmVmZXJlbmNl",
            "EkMKD2RhdHVtX3RyYW5zZm9ybRgMIAEoCzIqLmVzcmlQQnVmZmVyLkVzcmlU",
            "eXBlcy5EYXR1bVRyYW5zZm9ybWF0aW9uEkYKE3F1YW50aXphdGlvbl9wYXJh",
            "bXMYDiABKAsyKS5lc3JpUEJ1ZmZlci5ncmFwaC5RdWFudGl6YXRpb25QYXJh",
            "bWV0ZXJzEhMKC3N0YXJ0X2luZGV4GA8gASgREhcKD21heF9udW1fcmVzdWx0",
            "cxgQIAEoERIdChVyZXR1cm5fc2VhcmNoX2NvbnRleHQYESABKAgicQoVZXNy",
            "aU5hbWVkVHlwZUNhdGVnb3J5EhgKFGVzcmlUeXBlX1VOU1BFQ0lGSUVEEAAS",
            "EgoOZXNyaVR5cGVFbnRpdHkQARIYChRlc3JpVHlwZVJlbGF0aW9uc2hpcBAC",
            "EhAKDGVzcmlUeXBlQm90aBADQiUKHmNvbS5lc3JpLmFyY2dpcy5wcm90b2J1",
            "Zi5ncmFwaEgD+AEBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::EsriPBuffer.EsriTypesReflection.Descriptor, global::EsriPBuffer.Graph.EsriGraphTypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EsriPBuffer.Graph.GraphSearchRequest), global::EsriPBuffer.Graph.GraphSearchRequest.Parser, new[]{ "SearchQuery", "GlobalidArray", "NamedTypeFilter", "TypeCategoryFilter", "SpatialFilter", "InputTransform", "InputSpatRef", "SpatialRelation", "ReturnGeometry", "FeatureEncoding", "OutSpatRef", "DatumTransform", "QuantizationParams", "StartIndex", "MaxNumResults", "ReturnSearchContext" }, null, new[]{ typeof(global::EsriPBuffer.Graph.GraphSearchRequest.Types.esriNamedTypeCategory) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GraphSearchRequest : pb::IMessage<GraphSearchRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GraphSearchRequest> _parser = new pb::MessageParser<GraphSearchRequest>(() => new GraphSearchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GraphSearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EsriPBuffer.Graph.SearchQueryRequestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphSearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphSearchRequest(GraphSearchRequest other) : this() {
      searchQuery_ = other.searchQuery_;
      globalidArray_ = other.globalidArray_;
      namedTypeFilter_ = other.namedTypeFilter_.Clone();
      typeCategoryFilter_ = other.typeCategoryFilter_;
      spatialFilter_ = other.spatialFilter_ != null ? other.spatialFilter_.Clone() : null;
      inputTransform_ = other.inputTransform_ != null ? other.inputTransform_.Clone() : null;
      inputSpatRef_ = other.inputSpatRef_ != null ? other.inputSpatRef_.Clone() : null;
      spatialRelation_ = other.spatialRelation_;
      returnGeometry_ = other.returnGeometry_;
      featureEncoding_ = other.featureEncoding_;
      outSpatRef_ = other.outSpatRef_ != null ? other.outSpatRef_.Clone() : null;
      datumTransform_ = other.datumTransform_ != null ? other.datumTransform_.Clone() : null;
      quantizationParams_ = other.quantizationParams_ != null ? other.quantizationParams_.Clone() : null;
      startIndex_ = other.startIndex_;
      maxNumResults_ = other.maxNumResults_;
      returnSearchContext_ = other.returnSearchContext_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphSearchRequest Clone() {
      return new GraphSearchRequest(this);
    }

    /// <summary>Field number for the "search_query" field.</summary>
    public const int SearchQueryFieldNumber = 1;
    private string searchQuery_ = "";
    /// <summary>
    /// Search Query Parameters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SearchQuery {
      get { return searchQuery_; }
      set {
        searchQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "globalid_array" field.</summary>
    public const int GlobalidArrayFieldNumber = 2;
    private pb::ByteString globalidArray_ = pb::ByteString.Empty;
    /// <summary>
    /// `globalid_array` is a concatenation of 1..N RFC4122 UUIDs. Size must be multiple of 16. Used as a search filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GlobalidArray {
      get { return globalidArray_; }
      set {
        globalidArray_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "named_type_filter" field.</summary>
    public const int NamedTypeFilterFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_namedTypeFilter_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> namedTypeFilter_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Search execution is limited to specified named types.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NamedTypeFilter {
      get { return namedTypeFilter_; }
    }

    /// <summary>Field number for the "type_category_filter" field.</summary>
    public const int TypeCategoryFilterFieldNumber = 4;
    private global::EsriPBuffer.Graph.GraphSearchRequest.Types.esriNamedTypeCategory typeCategoryFilter_ = global::EsriPBuffer.Graph.GraphSearchRequest.Types.esriNamedTypeCategory.EsriTypeUnspecified;
    /// <summary>
    /// Limit search results to entity types, relationship types or both. Check service definition for capabilities of underlying drivers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EsriPBuffer.Graph.GraphSearchRequest.Types.esriNamedTypeCategory TypeCategoryFilter {
      get { return typeCategoryFilter_; }
      set {
        typeCategoryFilter_ = value;
      }
    }

    /// <summary>Field number for the "spatial_filter" field.</summary>
    public const int SpatialFilterFieldNumber = 5;
    private global::EsriPBuffer.Graph.GeometryValue spatialFilter_;
    /// <summary>
    /// Input Filter Geometry Parameters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EsriPBuffer.Graph.GeometryValue SpatialFilter {
      get { return spatialFilter_; }
      set {
        spatialFilter_ = value;
      }
    }

    /// <summary>Field number for the "input_transform" field.</summary>
    public const int InputTransformFieldNumber = 6;
    private global::EsriPBuffer.Graph.Transform inputTransform_;
    /// <summary>
    /// Transformation parameters for server to decode spatial filter geometry.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EsriPBuffer.Graph.Transform InputTransform {
      get { return inputTransform_; }
      set {
        inputTransform_ = value;
      }
    }

    /// <summary>Field number for the "input_spat_ref" field.</summary>
    public const int InputSpatRefFieldNumber = 7;
    private global::EsriPBuffer.EsriTypes.Types.SpatialReference inputSpatRef_;
    /// <summary>
    /// The input geometry spatial reference.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EsriPBuffer.EsriTypes.Types.SpatialReference InputSpatRef {
      get { return inputSpatRef_; }
      set {
        inputSpatRef_ = value;
      }
    }

    /// <summary>Field number for the "spatial_relation" field.</summary>
    public const int SpatialRelationFieldNumber = 8;
    private global::EsriPBuffer.EsriTypes.Types.esriSpatialRel spatialRelation_ = global::EsriPBuffer.EsriTypes.Types.esriSpatialRel.Intersects;
    /// <summary>
    /// The spatial relationship to be applied to the input geometry. Defaults to esriSpatialRelIntersects.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EsriPBuffer.EsriTypes.Types.esriSpatialRel SpatialRelation {
      get { return spatialRelation_; }
      set {
        spatialRelation_ = value;
      }
    }

    /// <summary>Field number for the "return_geometry" field.</summary>
    public const int ReturnGeometryFieldNumber = 9;
    private bool returnGeometry_;
    /// <summary>
    /// Output Geometry Parameters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReturnGeometry {
      get { return returnGeometry_; }
      set {
        returnGeometry_ = value;
      }
    }

    /// <summary>Field number for the "feature_encoding" field.</summary>
    public const int FeatureEncodingFieldNumber = 10;
    private global::EsriPBuffer.EsriTypes.Types.esriFeatureEncoding featureEncoding_ = global::EsriPBuffer.EsriTypes.Types.esriFeatureEncoding.Unspecified;
    /// <summary>
    /// Enumeration indicating the method of encoding return geometries.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EsriPBuffer.EsriTypes.Types.esriFeatureEncoding FeatureEncoding {
      get { return featureEncoding_; }
      set {
        featureEncoding_ = value;
      }
    }

    /// <summary>Field number for the "out_spat_ref" field.</summary>
    public const int OutSpatRefFieldNumber = 11;
    private global::EsriPBuffer.EsriTypes.Types.SpatialReference outSpatRef_;
    /// <summary>
    /// The output spatial reference of the return geometries.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EsriPBuffer.EsriTypes.Types.SpatialReference OutSpatRef {
      get { return outSpatRef_; }
      set {
        outSpatRef_ = value;
      }
    }

    /// <summary>Field number for the "datum_transform" field.</summary>
    public const int DatumTransformFieldNumber = 12;
    private global::EsriPBuffer.EsriTypes.Types.DatumTransformation datumTransform_;
    /// <summary>
    /// The transformation to apply to the return geometries.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EsriPBuffer.EsriTypes.Types.DatumTransformation DatumTransform {
      get { return datumTransform_; }
      set {
        datumTransform_ = value;
      }
    }

    /// <summary>Field number for the "quantization_params" field.</summary>
    public const int QuantizationParamsFieldNumber = 14;
    private global::EsriPBuffer.Graph.QuantizationParameters quantizationParams_;
    /// <summary>
    /// code 13 is reserved                                      // A flag to indicate whether the vertical coordinate system requires projection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EsriPBuffer.Graph.QuantizationParameters QuantizationParams {
      get { return quantizationParams_; }
      set {
        quantizationParams_ = value;
      }
    }

    /// <summary>Field number for the "start_index" field.</summary>
    public const int StartIndexFieldNumber = 15;
    private int startIndex_;
    /// <summary>
    /// Search Result Set Options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartIndex {
      get { return startIndex_; }
      set {
        startIndex_ = value;
      }
    }

    /// <summary>Field number for the "max_num_results" field.</summary>
    public const int MaxNumResultsFieldNumber = 16;
    private int maxNumResults_;
    /// <summary>
    /// The maximum number results to return.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxNumResults {
      get { return maxNumResults_; }
      set {
        maxNumResults_ = value;
      }
    }

    /// <summary>Field number for the "return_search_context" field.</summary>
    public const int ReturnSearchContextFieldNumber = 17;
    private bool returnSearchContext_;
    /// <summary>
    /// Include search context fields: propertyNames, scores &amp; highlights in the result set. Ignores the cypher_clause, and returns exactly the tuple { id(doc), [propertyName1, ..., propertyNameN], [score1,..., scoreN], [highlight1, ..., highlightN]} for each document
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReturnSearchContext {
      get { return returnSearchContext_; }
      set {
        returnSearchContext_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GraphSearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GraphSearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SearchQuery != other.SearchQuery) return false;
      if (GlobalidArray != other.GlobalidArray) return false;
      if(!namedTypeFilter_.Equals(other.namedTypeFilter_)) return false;
      if (TypeCategoryFilter != other.TypeCategoryFilter) return false;
      if (!object.Equals(SpatialFilter, other.SpatialFilter)) return false;
      if (!object.Equals(InputTransform, other.InputTransform)) return false;
      if (!object.Equals(InputSpatRef, other.InputSpatRef)) return false;
      if (SpatialRelation != other.SpatialRelation) return false;
      if (ReturnGeometry != other.ReturnGeometry) return false;
      if (FeatureEncoding != other.FeatureEncoding) return false;
      if (!object.Equals(OutSpatRef, other.OutSpatRef)) return false;
      if (!object.Equals(DatumTransform, other.DatumTransform)) return false;
      if (!object.Equals(QuantizationParams, other.QuantizationParams)) return false;
      if (StartIndex != other.StartIndex) return false;
      if (MaxNumResults != other.MaxNumResults) return false;
      if (ReturnSearchContext != other.ReturnSearchContext) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SearchQuery.Length != 0) hash ^= SearchQuery.GetHashCode();
      if (GlobalidArray.Length != 0) hash ^= GlobalidArray.GetHashCode();
      hash ^= namedTypeFilter_.GetHashCode();
      if (TypeCategoryFilter != global::EsriPBuffer.Graph.GraphSearchRequest.Types.esriNamedTypeCategory.EsriTypeUnspecified) hash ^= TypeCategoryFilter.GetHashCode();
      if (spatialFilter_ != null) hash ^= SpatialFilter.GetHashCode();
      if (inputTransform_ != null) hash ^= InputTransform.GetHashCode();
      if (inputSpatRef_ != null) hash ^= InputSpatRef.GetHashCode();
      if (SpatialRelation != global::EsriPBuffer.EsriTypes.Types.esriSpatialRel.Intersects) hash ^= SpatialRelation.GetHashCode();
      if (ReturnGeometry != false) hash ^= ReturnGeometry.GetHashCode();
      if (FeatureEncoding != global::EsriPBuffer.EsriTypes.Types.esriFeatureEncoding.Unspecified) hash ^= FeatureEncoding.GetHashCode();
      if (outSpatRef_ != null) hash ^= OutSpatRef.GetHashCode();
      if (datumTransform_ != null) hash ^= DatumTransform.GetHashCode();
      if (quantizationParams_ != null) hash ^= QuantizationParams.GetHashCode();
      if (StartIndex != 0) hash ^= StartIndex.GetHashCode();
      if (MaxNumResults != 0) hash ^= MaxNumResults.GetHashCode();
      if (ReturnSearchContext != false) hash ^= ReturnSearchContext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SearchQuery.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SearchQuery);
      }
      if (GlobalidArray.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(GlobalidArray);
      }
      namedTypeFilter_.WriteTo(output, _repeated_namedTypeFilter_codec);
      if (TypeCategoryFilter != global::EsriPBuffer.Graph.GraphSearchRequest.Types.esriNamedTypeCategory.EsriTypeUnspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TypeCategoryFilter);
      }
      if (spatialFilter_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SpatialFilter);
      }
      if (inputTransform_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(InputTransform);
      }
      if (inputSpatRef_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(InputSpatRef);
      }
      if (SpatialRelation != global::EsriPBuffer.EsriTypes.Types.esriSpatialRel.Intersects) {
        output.WriteRawTag(64);
        output.WriteEnum((int) SpatialRelation);
      }
      if (ReturnGeometry != false) {
        output.WriteRawTag(72);
        output.WriteBool(ReturnGeometry);
      }
      if (FeatureEncoding != global::EsriPBuffer.EsriTypes.Types.esriFeatureEncoding.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) FeatureEncoding);
      }
      if (outSpatRef_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(OutSpatRef);
      }
      if (datumTransform_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DatumTransform);
      }
      if (quantizationParams_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(QuantizationParams);
      }
      if (StartIndex != 0) {
        output.WriteRawTag(120);
        output.WriteSInt32(StartIndex);
      }
      if (MaxNumResults != 0) {
        output.WriteRawTag(128, 1);
        output.WriteSInt32(MaxNumResults);
      }
      if (ReturnSearchContext != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(ReturnSearchContext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SearchQuery.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SearchQuery);
      }
      if (GlobalidArray.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(GlobalidArray);
      }
      namedTypeFilter_.WriteTo(ref output, _repeated_namedTypeFilter_codec);
      if (TypeCategoryFilter != global::EsriPBuffer.Graph.GraphSearchRequest.Types.esriNamedTypeCategory.EsriTypeUnspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TypeCategoryFilter);
      }
      if (spatialFilter_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SpatialFilter);
      }
      if (inputTransform_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(InputTransform);
      }
      if (inputSpatRef_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(InputSpatRef);
      }
      if (SpatialRelation != global::EsriPBuffer.EsriTypes.Types.esriSpatialRel.Intersects) {
        output.WriteRawTag(64);
        output.WriteEnum((int) SpatialRelation);
      }
      if (ReturnGeometry != false) {
        output.WriteRawTag(72);
        output.WriteBool(ReturnGeometry);
      }
      if (FeatureEncoding != global::EsriPBuffer.EsriTypes.Types.esriFeatureEncoding.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) FeatureEncoding);
      }
      if (outSpatRef_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(OutSpatRef);
      }
      if (datumTransform_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DatumTransform);
      }
      if (quantizationParams_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(QuantizationParams);
      }
      if (StartIndex != 0) {
        output.WriteRawTag(120);
        output.WriteSInt32(StartIndex);
      }
      if (MaxNumResults != 0) {
        output.WriteRawTag(128, 1);
        output.WriteSInt32(MaxNumResults);
      }
      if (ReturnSearchContext != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(ReturnSearchContext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SearchQuery.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SearchQuery);
      }
      if (GlobalidArray.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GlobalidArray);
      }
      size += namedTypeFilter_.CalculateSize(_repeated_namedTypeFilter_codec);
      if (TypeCategoryFilter != global::EsriPBuffer.Graph.GraphSearchRequest.Types.esriNamedTypeCategory.EsriTypeUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TypeCategoryFilter);
      }
      if (spatialFilter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpatialFilter);
      }
      if (inputTransform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputTransform);
      }
      if (inputSpatRef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InputSpatRef);
      }
      if (SpatialRelation != global::EsriPBuffer.EsriTypes.Types.esriSpatialRel.Intersects) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpatialRelation);
      }
      if (ReturnGeometry != false) {
        size += 1 + 1;
      }
      if (FeatureEncoding != global::EsriPBuffer.EsriTypes.Types.esriFeatureEncoding.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FeatureEncoding);
      }
      if (outSpatRef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutSpatRef);
      }
      if (datumTransform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DatumTransform);
      }
      if (quantizationParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuantizationParams);
      }
      if (StartIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(StartIndex);
      }
      if (MaxNumResults != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(MaxNumResults);
      }
      if (ReturnSearchContext != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GraphSearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.SearchQuery.Length != 0) {
        SearchQuery = other.SearchQuery;
      }
      if (other.GlobalidArray.Length != 0) {
        GlobalidArray = other.GlobalidArray;
      }
      namedTypeFilter_.Add(other.namedTypeFilter_);
      if (other.TypeCategoryFilter != global::EsriPBuffer.Graph.GraphSearchRequest.Types.esriNamedTypeCategory.EsriTypeUnspecified) {
        TypeCategoryFilter = other.TypeCategoryFilter;
      }
      if (other.spatialFilter_ != null) {
        if (spatialFilter_ == null) {
          SpatialFilter = new global::EsriPBuffer.Graph.GeometryValue();
        }
        SpatialFilter.MergeFrom(other.SpatialFilter);
      }
      if (other.inputTransform_ != null) {
        if (inputTransform_ == null) {
          InputTransform = new global::EsriPBuffer.Graph.Transform();
        }
        InputTransform.MergeFrom(other.InputTransform);
      }
      if (other.inputSpatRef_ != null) {
        if (inputSpatRef_ == null) {
          InputSpatRef = new global::EsriPBuffer.EsriTypes.Types.SpatialReference();
        }
        InputSpatRef.MergeFrom(other.InputSpatRef);
      }
      if (other.SpatialRelation != global::EsriPBuffer.EsriTypes.Types.esriSpatialRel.Intersects) {
        SpatialRelation = other.SpatialRelation;
      }
      if (other.ReturnGeometry != false) {
        ReturnGeometry = other.ReturnGeometry;
      }
      if (other.FeatureEncoding != global::EsriPBuffer.EsriTypes.Types.esriFeatureEncoding.Unspecified) {
        FeatureEncoding = other.FeatureEncoding;
      }
      if (other.outSpatRef_ != null) {
        if (outSpatRef_ == null) {
          OutSpatRef = new global::EsriPBuffer.EsriTypes.Types.SpatialReference();
        }
        OutSpatRef.MergeFrom(other.OutSpatRef);
      }
      if (other.datumTransform_ != null) {
        if (datumTransform_ == null) {
          DatumTransform = new global::EsriPBuffer.EsriTypes.Types.DatumTransformation();
        }
        DatumTransform.MergeFrom(other.DatumTransform);
      }
      if (other.quantizationParams_ != null) {
        if (quantizationParams_ == null) {
          QuantizationParams = new global::EsriPBuffer.Graph.QuantizationParameters();
        }
        QuantizationParams.MergeFrom(other.QuantizationParams);
      }
      if (other.StartIndex != 0) {
        StartIndex = other.StartIndex;
      }
      if (other.MaxNumResults != 0) {
        MaxNumResults = other.MaxNumResults;
      }
      if (other.ReturnSearchContext != false) {
        ReturnSearchContext = other.ReturnSearchContext;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SearchQuery = input.ReadString();
            break;
          }
          case 18: {
            GlobalidArray = input.ReadBytes();
            break;
          }
          case 26: {
            namedTypeFilter_.AddEntriesFrom(input, _repeated_namedTypeFilter_codec);
            break;
          }
          case 32: {
            TypeCategoryFilter = (global::EsriPBuffer.Graph.GraphSearchRequest.Types.esriNamedTypeCategory) input.ReadEnum();
            break;
          }
          case 42: {
            if (spatialFilter_ == null) {
              SpatialFilter = new global::EsriPBuffer.Graph.GeometryValue();
            }
            input.ReadMessage(SpatialFilter);
            break;
          }
          case 50: {
            if (inputTransform_ == null) {
              InputTransform = new global::EsriPBuffer.Graph.Transform();
            }
            input.ReadMessage(InputTransform);
            break;
          }
          case 58: {
            if (inputSpatRef_ == null) {
              InputSpatRef = new global::EsriPBuffer.EsriTypes.Types.SpatialReference();
            }
            input.ReadMessage(InputSpatRef);
            break;
          }
          case 64: {
            SpatialRelation = (global::EsriPBuffer.EsriTypes.Types.esriSpatialRel) input.ReadEnum();
            break;
          }
          case 72: {
            ReturnGeometry = input.ReadBool();
            break;
          }
          case 80: {
            FeatureEncoding = (global::EsriPBuffer.EsriTypes.Types.esriFeatureEncoding) input.ReadEnum();
            break;
          }
          case 90: {
            if (outSpatRef_ == null) {
              OutSpatRef = new global::EsriPBuffer.EsriTypes.Types.SpatialReference();
            }
            input.ReadMessage(OutSpatRef);
            break;
          }
          case 98: {
            if (datumTransform_ == null) {
              DatumTransform = new global::EsriPBuffer.EsriTypes.Types.DatumTransformation();
            }
            input.ReadMessage(DatumTransform);
            break;
          }
          case 114: {
            if (quantizationParams_ == null) {
              QuantizationParams = new global::EsriPBuffer.Graph.QuantizationParameters();
            }
            input.ReadMessage(QuantizationParams);
            break;
          }
          case 120: {
            StartIndex = input.ReadSInt32();
            break;
          }
          case 128: {
            MaxNumResults = input.ReadSInt32();
            break;
          }
          case 136: {
            ReturnSearchContext = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SearchQuery = input.ReadString();
            break;
          }
          case 18: {
            GlobalidArray = input.ReadBytes();
            break;
          }
          case 26: {
            namedTypeFilter_.AddEntriesFrom(ref input, _repeated_namedTypeFilter_codec);
            break;
          }
          case 32: {
            TypeCategoryFilter = (global::EsriPBuffer.Graph.GraphSearchRequest.Types.esriNamedTypeCategory) input.ReadEnum();
            break;
          }
          case 42: {
            if (spatialFilter_ == null) {
              SpatialFilter = new global::EsriPBuffer.Graph.GeometryValue();
            }
            input.ReadMessage(SpatialFilter);
            break;
          }
          case 50: {
            if (inputTransform_ == null) {
              InputTransform = new global::EsriPBuffer.Graph.Transform();
            }
            input.ReadMessage(InputTransform);
            break;
          }
          case 58: {
            if (inputSpatRef_ == null) {
              InputSpatRef = new global::EsriPBuffer.EsriTypes.Types.SpatialReference();
            }
            input.ReadMessage(InputSpatRef);
            break;
          }
          case 64: {
            SpatialRelation = (global::EsriPBuffer.EsriTypes.Types.esriSpatialRel) input.ReadEnum();
            break;
          }
          case 72: {
            ReturnGeometry = input.ReadBool();
            break;
          }
          case 80: {
            FeatureEncoding = (global::EsriPBuffer.EsriTypes.Types.esriFeatureEncoding) input.ReadEnum();
            break;
          }
          case 90: {
            if (outSpatRef_ == null) {
              OutSpatRef = new global::EsriPBuffer.EsriTypes.Types.SpatialReference();
            }
            input.ReadMessage(OutSpatRef);
            break;
          }
          case 98: {
            if (datumTransform_ == null) {
              DatumTransform = new global::EsriPBuffer.EsriTypes.Types.DatumTransformation();
            }
            input.ReadMessage(DatumTransform);
            break;
          }
          case 114: {
            if (quantizationParams_ == null) {
              QuantizationParams = new global::EsriPBuffer.Graph.QuantizationParameters();
            }
            input.ReadMessage(QuantizationParams);
            break;
          }
          case 120: {
            StartIndex = input.ReadSInt32();
            break;
          }
          case 128: {
            MaxNumResults = input.ReadSInt32();
            break;
          }
          case 136: {
            ReturnSearchContext = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the GraphSearchRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum esriNamedTypeCategory {
        [pbr::OriginalName("esriType_UNSPECIFIED")] EsriTypeUnspecified = 0,
        [pbr::OriginalName("esriTypeEntity")] EsriTypeEntity = 1,
        [pbr::OriginalName("esriTypeRelationship")] EsriTypeRelationship = 2,
        [pbr::OriginalName("esriTypeBoth")] EsriTypeBoth = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
