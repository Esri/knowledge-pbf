// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/ObjectIdentifierSet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fObjectIdentifierSet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fObjectIdentifierSet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fObjectIdentifierSet_2eproto EXT_CLASS
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct EXT_CLASS TableStruct_esriPBuffer_2fObjectIdentifierSet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace esriPBuffer {
class ObjectIdArray;
class ObjectIdArrayDefaultTypeInternal;
EXT_CLASS extern ObjectIdArrayDefaultTypeInternal _ObjectIdArray_default_instance_;
class ObjectIdentifierSet;
class ObjectIdentifierSetDefaultTypeInternal;
EXT_CLASS extern ObjectIdentifierSetDefaultTypeInternal _ObjectIdentifierSet_default_instance_;
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> EXT_CLASS ::esriPBuffer::ObjectIdArray* Arena::CreateMaybeMessage<::esriPBuffer::ObjectIdArray>(Arena*);
template<> EXT_CLASS ::esriPBuffer::ObjectIdentifierSet* Arena::CreateMaybeMessage<::esriPBuffer::ObjectIdentifierSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esriPBuffer {

// ===================================================================

class EXT_CLASS ObjectIdArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.ObjectIdArray) */ {
 public:
  inline ObjectIdArray() : ObjectIdArray(nullptr) {}
  virtual ~ObjectIdArray();

  ObjectIdArray(const ObjectIdArray& from);
  ObjectIdArray(ObjectIdArray&& from) noexcept
    : ObjectIdArray() {
    *this = ::std::move(from);
  }

  inline ObjectIdArray& operator=(const ObjectIdArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectIdArray& operator=(ObjectIdArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ObjectIdArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectIdArray* internal_default_instance() {
    return reinterpret_cast<const ObjectIdArray*>(
               &_ObjectIdArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObjectIdArray& a, ObjectIdArray& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectIdArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectIdArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectIdArray* New() const final {
    return CreateMaybeMessage<ObjectIdArray>(nullptr);
  }

  ObjectIdArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectIdArray>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ObjectIdArray& from);
  void MergeFrom(const ObjectIdArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectIdArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.ObjectIdArray";
  }
  protected:
  explicit ObjectIdArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated uint64 value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:esriPBuffer.ObjectIdArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fObjectIdentifierSet_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS ObjectIdentifierSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.ObjectIdentifierSet) */ {
 public:
  inline ObjectIdentifierSet() : ObjectIdentifierSet(nullptr) {}
  virtual ~ObjectIdentifierSet();

  ObjectIdentifierSet(const ObjectIdentifierSet& from);
  ObjectIdentifierSet(ObjectIdentifierSet&& from) noexcept
    : ObjectIdentifierSet() {
    *this = ::std::move(from);
  }

  inline ObjectIdentifierSet& operator=(const ObjectIdentifierSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectIdentifierSet& operator=(ObjectIdentifierSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ObjectIdentifierSet& default_instance();

  enum IdArrayCase {
    kOidArray = 1,
    kGlobalidArray = 2,
    ID_ARRAY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectIdentifierSet* internal_default_instance() {
    return reinterpret_cast<const ObjectIdentifierSet*>(
               &_ObjectIdentifierSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjectIdentifierSet& a, ObjectIdentifierSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectIdentifierSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectIdentifierSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectIdentifierSet* New() const final {
    return CreateMaybeMessage<ObjectIdentifierSet>(nullptr);
  }

  ObjectIdentifierSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectIdentifierSet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ObjectIdentifierSet& from);
  void MergeFrom(const ObjectIdentifierSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectIdentifierSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.ObjectIdentifierSet";
  }
  protected:
  explicit ObjectIdentifierSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOidArrayFieldNumber = 1,
    kGlobalidArrayFieldNumber = 2,
  };
  // .esriPBuffer.ObjectIdArray oid_array = 1;
  bool has_oid_array() const;
  private:
  bool _internal_has_oid_array() const;
  public:
  void clear_oid_array();
  const ::esriPBuffer::ObjectIdArray& oid_array() const;
  ::esriPBuffer::ObjectIdArray* release_oid_array();
  ::esriPBuffer::ObjectIdArray* mutable_oid_array();
  void set_allocated_oid_array(::esriPBuffer::ObjectIdArray* oid_array);
  private:
  const ::esriPBuffer::ObjectIdArray& _internal_oid_array() const;
  ::esriPBuffer::ObjectIdArray* _internal_mutable_oid_array();
  public:
  void unsafe_arena_set_allocated_oid_array(
      ::esriPBuffer::ObjectIdArray* oid_array);
  ::esriPBuffer::ObjectIdArray* unsafe_arena_release_oid_array();

  // bytes globalid_array = 2;
  private:
  bool _internal_has_globalid_array() const;
  public:
  void clear_globalid_array();
  const std::string& globalid_array() const;
  void set_globalid_array(const std::string& value);
  void set_globalid_array(std::string&& value);
  void set_globalid_array(const char* value);
  void set_globalid_array(const void* value, size_t size);
  std::string* mutable_globalid_array();
  std::string* release_globalid_array();
  void set_allocated_globalid_array(std::string* globalid_array);
  private:
  const std::string& _internal_globalid_array() const;
  void _internal_set_globalid_array(const std::string& value);
  std::string* _internal_mutable_globalid_array();
  public:

  void clear_id_array();
  IdArrayCase id_array_case() const;
  // @@protoc_insertion_point(class_scope:esriPBuffer.ObjectIdentifierSet)
 private:
  class _Internal;
  void set_has_oid_array();
  void set_has_globalid_array();

  inline bool has_id_array() const;
  inline void clear_has_id_array();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union IdArrayUnion {
    IdArrayUnion() {}
    ::esriPBuffer::ObjectIdArray* oid_array_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr globalid_array_;
  } id_array_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_esriPBuffer_2fObjectIdentifierSet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectIdArray

// repeated uint64 value = 1 [packed = true];
inline int ObjectIdArray::_internal_value_size() const {
  return value_.size();
}
inline int ObjectIdArray::value_size() const {
  return _internal_value_size();
}
inline void ObjectIdArray::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectIdArray::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ObjectIdArray::value(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.ObjectIdArray.value)
  return _internal_value(index);
}
inline void ObjectIdArray::set_value(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:esriPBuffer.ObjectIdArray.value)
}
inline void ObjectIdArray::_internal_add_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  value_.Add(value);
}
inline void ObjectIdArray::add_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:esriPBuffer.ObjectIdArray.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ObjectIdArray::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ObjectIdArray::value() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.ObjectIdArray.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ObjectIdArray::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ObjectIdArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.ObjectIdArray.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// ObjectIdentifierSet

// .esriPBuffer.ObjectIdArray oid_array = 1;
inline bool ObjectIdentifierSet::_internal_has_oid_array() const {
  return id_array_case() == kOidArray;
}
inline bool ObjectIdentifierSet::has_oid_array() const {
  return _internal_has_oid_array();
}
inline void ObjectIdentifierSet::set_has_oid_array() {
  _oneof_case_[0] = kOidArray;
}
inline void ObjectIdentifierSet::clear_oid_array() {
  if (_internal_has_oid_array()) {
    if (GetArena() == nullptr) {
      delete id_array_.oid_array_;
    }
    clear_has_id_array();
  }
}
inline ::esriPBuffer::ObjectIdArray* ObjectIdentifierSet::release_oid_array() {
  // @@protoc_insertion_point(field_release:esriPBuffer.ObjectIdentifierSet.oid_array)
  if (_internal_has_oid_array()) {
    clear_has_id_array();
      ::esriPBuffer::ObjectIdArray* temp = id_array_.oid_array_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    id_array_.oid_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::ObjectIdArray& ObjectIdentifierSet::_internal_oid_array() const {
  return _internal_has_oid_array()
      ? *id_array_.oid_array_
      : *reinterpret_cast< ::esriPBuffer::ObjectIdArray*>(&::esriPBuffer::_ObjectIdArray_default_instance_);
}
inline const ::esriPBuffer::ObjectIdArray& ObjectIdentifierSet::oid_array() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.ObjectIdentifierSet.oid_array)
  return _internal_oid_array();
}
inline ::esriPBuffer::ObjectIdArray* ObjectIdentifierSet::unsafe_arena_release_oid_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.ObjectIdentifierSet.oid_array)
  if (_internal_has_oid_array()) {
    clear_has_id_array();
    ::esriPBuffer::ObjectIdArray* temp = id_array_.oid_array_;
    id_array_.oid_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ObjectIdentifierSet::unsafe_arena_set_allocated_oid_array(::esriPBuffer::ObjectIdArray* oid_array) {
  clear_id_array();
  if (oid_array) {
    set_has_oid_array();
    id_array_.oid_array_ = oid_array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.ObjectIdentifierSet.oid_array)
}
inline ::esriPBuffer::ObjectIdArray* ObjectIdentifierSet::_internal_mutable_oid_array() {
  if (!_internal_has_oid_array()) {
    clear_id_array();
    set_has_oid_array();
    id_array_.oid_array_ = CreateMaybeMessage< ::esriPBuffer::ObjectIdArray >(GetArena());
  }
  return id_array_.oid_array_;
}
inline ::esriPBuffer::ObjectIdArray* ObjectIdentifierSet::mutable_oid_array() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.ObjectIdentifierSet.oid_array)
  return _internal_mutable_oid_array();
}

// bytes globalid_array = 2;
inline bool ObjectIdentifierSet::_internal_has_globalid_array() const {
  return id_array_case() == kGlobalidArray;
}
inline void ObjectIdentifierSet::set_has_globalid_array() {
  _oneof_case_[0] = kGlobalidArray;
}
inline void ObjectIdentifierSet::clear_globalid_array() {
  if (_internal_has_globalid_array()) {
    id_array_.globalid_array_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id_array();
  }
}
inline const std::string& ObjectIdentifierSet::globalid_array() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.ObjectIdentifierSet.globalid_array)
  return _internal_globalid_array();
}
inline void ObjectIdentifierSet::set_globalid_array(const std::string& value) {
  _internal_set_globalid_array(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.ObjectIdentifierSet.globalid_array)
}
inline std::string* ObjectIdentifierSet::mutable_globalid_array() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.ObjectIdentifierSet.globalid_array)
  return _internal_mutable_globalid_array();
}
inline const std::string& ObjectIdentifierSet::_internal_globalid_array() const {
  if (_internal_has_globalid_array()) {
    return id_array_.globalid_array_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ObjectIdentifierSet::_internal_set_globalid_array(const std::string& value) {
  if (!_internal_has_globalid_array()) {
    clear_id_array();
    set_has_globalid_array();
    id_array_.globalid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_array_.globalid_array_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ObjectIdentifierSet::set_globalid_array(std::string&& value) {
  // @@protoc_insertion_point(field_set:esriPBuffer.ObjectIdentifierSet.globalid_array)
  if (!_internal_has_globalid_array()) {
    clear_id_array();
    set_has_globalid_array();
    id_array_.globalid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_array_.globalid_array_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.ObjectIdentifierSet.globalid_array)
}
inline void ObjectIdentifierSet::set_globalid_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_globalid_array()) {
    clear_id_array();
    set_has_globalid_array();
    id_array_.globalid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_array_.globalid_array_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.ObjectIdentifierSet.globalid_array)
}
inline void ObjectIdentifierSet::set_globalid_array(const void* value,
                             size_t size) {
  if (!_internal_has_globalid_array()) {
    clear_id_array();
    set_has_globalid_array();
    id_array_.globalid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_array_.globalid_array_.SetLite(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.ObjectIdentifierSet.globalid_array)
}
inline std::string* ObjectIdentifierSet::_internal_mutable_globalid_array() {
  if (!_internal_has_globalid_array()) {
    clear_id_array();
    set_has_globalid_array();
    id_array_.globalid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_array_.globalid_array_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ObjectIdentifierSet::release_globalid_array() {
  // @@protoc_insertion_point(field_release:esriPBuffer.ObjectIdentifierSet.globalid_array)
  if (_internal_has_globalid_array()) {
    clear_has_id_array();
    return id_array_.globalid_array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ObjectIdentifierSet::set_allocated_globalid_array(std::string* globalid_array) {
  if (has_id_array()) {
    clear_id_array();
  }
  if (globalid_array != nullptr) {
    set_has_globalid_array();
    id_array_.globalid_array_.UnsafeSetDefault(globalid_array);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(globalid_array);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.ObjectIdentifierSet.globalid_array)
}

inline bool ObjectIdentifierSet::has_id_array() const {
  return id_array_case() != ID_ARRAY_NOT_SET;
}
inline void ObjectIdentifierSet::clear_has_id_array() {
  _oneof_case_[0] = ID_ARRAY_NOT_SET;
}
inline ObjectIdentifierSet::IdArrayCase ObjectIdentifierSet::id_array_case() const {
  return ObjectIdentifierSet::IdArrayCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace esriPBuffer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fObjectIdentifierSet_2eproto
