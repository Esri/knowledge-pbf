// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/ApplyEditsRequest.proto

#include "esriPBuffer/graph/ApplyEditsRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fEsriTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EsriTypes_SpatialReference_esriPBuffer_2fEsriTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fObjectIdentifierSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectIdentifierSet_esriPBuffer_2fObjectIdentifierSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Adds_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Adds_EntitiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Adds_RelationshipsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Deletes_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Deletes_DeletedEntityIdsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Deletes_DeletedRelationshipIdsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedObjectAdd_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedObjectAdd_PropertiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedObjectAdds_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedObjectUpdate_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedObjectUpdate_PropertiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedObjectUpdates_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transform_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Updates_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Updates_EntitiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Updates_RelationshipsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto;
namespace esriPBuffer {
namespace graph {
class NamedObjectAdd_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedObjectAdd_PropertiesEntry_DoNotUse> _instance;
} _NamedObjectAdd_PropertiesEntry_DoNotUse_default_instance_;
class NamedObjectAddDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedObjectAdd> _instance;
} _NamedObjectAdd_default_instance_;
class NamedObjectAddsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedObjectAdds> _instance;
} _NamedObjectAdds_default_instance_;
class Adds_EntitiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Adds_EntitiesEntry_DoNotUse> _instance;
} _Adds_EntitiesEntry_DoNotUse_default_instance_;
class Adds_RelationshipsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Adds_RelationshipsEntry_DoNotUse> _instance;
} _Adds_RelationshipsEntry_DoNotUse_default_instance_;
class AddsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Adds> _instance;
} _Adds_default_instance_;
class NamedObjectUpdate_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedObjectUpdate_PropertiesEntry_DoNotUse> _instance;
} _NamedObjectUpdate_PropertiesEntry_DoNotUse_default_instance_;
class NamedObjectUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedObjectUpdate> _instance;
  ::PROTOBUF_NAMESPACE_ID::int64 oid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr globalid_;
} _NamedObjectUpdate_default_instance_;
class NamedObjectUpdatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedObjectUpdates> _instance;
} _NamedObjectUpdates_default_instance_;
class Updates_EntitiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Updates_EntitiesEntry_DoNotUse> _instance;
} _Updates_EntitiesEntry_DoNotUse_default_instance_;
class Updates_RelationshipsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Updates_RelationshipsEntry_DoNotUse> _instance;
} _Updates_RelationshipsEntry_DoNotUse_default_instance_;
class UpdatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Updates> _instance;
} _Updates_default_instance_;
class Deletes_DeletedEntityIdsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Deletes_DeletedEntityIdsEntry_DoNotUse> _instance;
} _Deletes_DeletedEntityIdsEntry_DoNotUse_default_instance_;
class Deletes_DeletedRelationshipIdsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Deletes_DeletedRelationshipIdsEntry_DoNotUse> _instance;
} _Deletes_DeletedRelationshipIdsEntry_DoNotUse_default_instance_;
class DeletesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Deletes> _instance;
} _Deletes_default_instance_;
class GraphApplyEditsHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphApplyEditsHeader> _instance;
} _GraphApplyEditsHeader_default_instance_;
class GraphApplyEditsFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphApplyEditsFrame> _instance;
} _GraphApplyEditsFrame_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
static void InitDefaultsscc_info_Adds_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_Adds_default_instance_;
    new (ptr) ::esriPBuffer::graph::Adds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::Adds::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Adds_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Adds_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_Adds_EntitiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,
      &scc_info_Adds_RelationshipsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,}};

static void InitDefaultsscc_info_Adds_EntitiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_Adds_EntitiesEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::Adds_EntitiesEntry_DoNotUse();
  }
  ::esriPBuffer::graph::Adds_EntitiesEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Adds_EntitiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Adds_EntitiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_NamedObjectAdds_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,}};

static void InitDefaultsscc_info_Adds_RelationshipsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_Adds_RelationshipsEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::Adds_RelationshipsEntry_DoNotUse();
  }
  ::esriPBuffer::graph::Adds_RelationshipsEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Adds_RelationshipsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Adds_RelationshipsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_NamedObjectAdds_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,}};

static void InitDefaultsscc_info_Deletes_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_Deletes_default_instance_;
    new (ptr) ::esriPBuffer::graph::Deletes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::Deletes::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Deletes_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Deletes_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_Deletes_DeletedEntityIdsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,
      &scc_info_Deletes_DeletedRelationshipIdsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,}};

static void InitDefaultsscc_info_Deletes_DeletedEntityIdsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_Deletes_DeletedEntityIdsEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::Deletes_DeletedEntityIdsEntry_DoNotUse();
  }
  ::esriPBuffer::graph::Deletes_DeletedEntityIdsEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Deletes_DeletedEntityIdsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Deletes_DeletedEntityIdsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_ObjectIdentifierSet_esriPBuffer_2fObjectIdentifierSet_2eproto.base,}};

static void InitDefaultsscc_info_Deletes_DeletedRelationshipIdsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_Deletes_DeletedRelationshipIdsEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::Deletes_DeletedRelationshipIdsEntry_DoNotUse();
  }
  ::esriPBuffer::graph::Deletes_DeletedRelationshipIdsEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Deletes_DeletedRelationshipIdsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Deletes_DeletedRelationshipIdsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_ObjectIdentifierSet_esriPBuffer_2fObjectIdentifierSet_2eproto.base,}};

static void InitDefaultsscc_info_GraphApplyEditsFrame_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphApplyEditsFrame_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphApplyEditsFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GraphApplyEditsFrame::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GraphApplyEditsFrame_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GraphApplyEditsFrame_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_Adds_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,
      &scc_info_Updates_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,
      &scc_info_Deletes_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,}};

static void InitDefaultsscc_info_GraphApplyEditsHeader_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphApplyEditsHeader_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphApplyEditsHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GraphApplyEditsHeader::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GraphApplyEditsHeader_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GraphApplyEditsHeader_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_EsriTypes_SpatialReference_esriPBuffer_2fEsriTypes_2eproto.base,
      &scc_info_Transform_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,}};

static void InitDefaultsscc_info_NamedObjectAdd_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_NamedObjectAdd_default_instance_;
    new (ptr) ::esriPBuffer::graph::NamedObjectAdd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::NamedObjectAdd::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedObjectAdd_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NamedObjectAdd_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_NamedObjectAdd_PropertiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,}};

static void InitDefaultsscc_info_NamedObjectAdd_PropertiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_NamedObjectAdd_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::NamedObjectAdd_PropertiesEntry_DoNotUse();
  }
  ::esriPBuffer::graph::NamedObjectAdd_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedObjectAdd_PropertiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NamedObjectAdd_PropertiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,}};

static void InitDefaultsscc_info_NamedObjectAdds_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_NamedObjectAdds_default_instance_;
    new (ptr) ::esriPBuffer::graph::NamedObjectAdds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::NamedObjectAdds::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedObjectAdds_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NamedObjectAdds_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_NamedObjectAdd_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,}};

static void InitDefaultsscc_info_NamedObjectUpdate_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_NamedObjectUpdate_default_instance_;
    new (ptr) ::esriPBuffer::graph::NamedObjectUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::NamedObjectUpdate::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedObjectUpdate_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NamedObjectUpdate_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_NamedObjectUpdate_PropertiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,}};

static void InitDefaultsscc_info_NamedObjectUpdate_PropertiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_NamedObjectUpdate_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::NamedObjectUpdate_PropertiesEntry_DoNotUse();
  }
  ::esriPBuffer::graph::NamedObjectUpdate_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedObjectUpdate_PropertiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NamedObjectUpdate_PropertiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,}};

static void InitDefaultsscc_info_NamedObjectUpdates_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_NamedObjectUpdates_default_instance_;
    new (ptr) ::esriPBuffer::graph::NamedObjectUpdates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::NamedObjectUpdates::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NamedObjectUpdates_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NamedObjectUpdates_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_NamedObjectUpdate_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,}};

static void InitDefaultsscc_info_Updates_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_Updates_default_instance_;
    new (ptr) ::esriPBuffer::graph::Updates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::Updates::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Updates_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Updates_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_Updates_EntitiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,
      &scc_info_Updates_RelationshipsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,}};

static void InitDefaultsscc_info_Updates_EntitiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_Updates_EntitiesEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::Updates_EntitiesEntry_DoNotUse();
  }
  ::esriPBuffer::graph::Updates_EntitiesEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Updates_EntitiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Updates_EntitiesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_NamedObjectUpdates_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,}};

static void InitDefaultsscc_info_Updates_RelationshipsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_Updates_RelationshipsEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::Updates_RelationshipsEntry_DoNotUse();
  }
  ::esriPBuffer::graph::Updates_RelationshipsEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Updates_RelationshipsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Updates_RelationshipsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto}, {
      &scc_info_NamedObjectUpdates_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base,}};

namespace esriPBuffer {
namespace graph {

// ===================================================================

NamedObjectAdd_PropertiesEntry_DoNotUse::NamedObjectAdd_PropertiesEntry_DoNotUse() {}
NamedObjectAdd_PropertiesEntry_DoNotUse::NamedObjectAdd_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NamedObjectAdd_PropertiesEntry_DoNotUse::MergeFrom(const NamedObjectAdd_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void NamedObjectAdd::InitAsDefaultInstance() {
}
class NamedObjectAdd::_Internal {
 public:
};

void NamedObjectAdd::clear_properties() {
  properties_.Clear();
}
NamedObjectAdd::NamedObjectAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.NamedObjectAdd)
}
NamedObjectAdd::NamedObjectAdd(const NamedObjectAdd& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.NamedObjectAdd)
}

void NamedObjectAdd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NamedObjectAdd_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
}

NamedObjectAdd::~NamedObjectAdd() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.NamedObjectAdd)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void NamedObjectAdd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NamedObjectAdd::ArenaDtor(void* object) {
  NamedObjectAdd* _this = reinterpret_cast< NamedObjectAdd* >(object);
  (void)_this;
}
void NamedObjectAdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedObjectAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedObjectAdd& NamedObjectAdd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NamedObjectAdd_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
  return *internal_default_instance();
}


void NamedObjectAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.NamedObjectAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NamedObjectAdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .esriPBuffer.graph.AnyValue> properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedObjectAdd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.NamedObjectAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .esriPBuffer.graph.AnyValue> properties = 1;
  if (!this->_internal_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.NamedObjectAdd.PropertiesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NamedObjectAdd_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it) {
        target = NamedObjectAdd_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.NamedObjectAdd)
  return target;
}

size_t NamedObjectAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.NamedObjectAdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .esriPBuffer.graph.AnyValue> properties = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += NamedObjectAdd_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedObjectAdd::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NamedObjectAdd*>(
      &from));
}

void NamedObjectAdd::MergeFrom(const NamedObjectAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.NamedObjectAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
}

void NamedObjectAdd::CopyFrom(const NamedObjectAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.NamedObjectAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedObjectAdd::IsInitialized() const {
  return true;
}

void NamedObjectAdd::InternalSwap(NamedObjectAdd* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
}

std::string NamedObjectAdd::GetTypeName() const {
  return "esriPBuffer.graph.NamedObjectAdd";
}


// ===================================================================

void NamedObjectAdds::InitAsDefaultInstance() {
}
class NamedObjectAdds::_Internal {
 public:
};

NamedObjectAdds::NamedObjectAdds(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  namedobjectadds_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.NamedObjectAdds)
}
NamedObjectAdds::NamedObjectAdds(const NamedObjectAdds& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      namedobjectadds_(from.namedobjectadds_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.NamedObjectAdds)
}

void NamedObjectAdds::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NamedObjectAdds_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
}

NamedObjectAdds::~NamedObjectAdds() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.NamedObjectAdds)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void NamedObjectAdds::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NamedObjectAdds::ArenaDtor(void* object) {
  NamedObjectAdds* _this = reinterpret_cast< NamedObjectAdds* >(object);
  (void)_this;
}
void NamedObjectAdds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedObjectAdds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedObjectAdds& NamedObjectAdds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NamedObjectAdds_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
  return *internal_default_instance();
}


void NamedObjectAdds::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.NamedObjectAdds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namedobjectadds_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NamedObjectAdds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .esriPBuffer.graph.NamedObjectAdd namedObjectAdds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_namedobjectadds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedObjectAdds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.NamedObjectAdds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .esriPBuffer.graph.NamedObjectAdd namedObjectAdds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_namedobjectadds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_namedobjectadds(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.NamedObjectAdds)
  return target;
}

size_t NamedObjectAdds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.NamedObjectAdds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .esriPBuffer.graph.NamedObjectAdd namedObjectAdds = 1;
  total_size += 1UL * this->_internal_namedobjectadds_size();
  for (const auto& msg : this->namedobjectadds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedObjectAdds::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NamedObjectAdds*>(
      &from));
}

void NamedObjectAdds::MergeFrom(const NamedObjectAdds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.NamedObjectAdds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  namedobjectadds_.MergeFrom(from.namedobjectadds_);
}

void NamedObjectAdds::CopyFrom(const NamedObjectAdds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.NamedObjectAdds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedObjectAdds::IsInitialized() const {
  return true;
}

void NamedObjectAdds::InternalSwap(NamedObjectAdds* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  namedobjectadds_.InternalSwap(&other->namedobjectadds_);
}

std::string NamedObjectAdds::GetTypeName() const {
  return "esriPBuffer.graph.NamedObjectAdds";
}


// ===================================================================

Adds_EntitiesEntry_DoNotUse::Adds_EntitiesEntry_DoNotUse() {}
Adds_EntitiesEntry_DoNotUse::Adds_EntitiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Adds_EntitiesEntry_DoNotUse::MergeFrom(const Adds_EntitiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

Adds_RelationshipsEntry_DoNotUse::Adds_RelationshipsEntry_DoNotUse() {}
Adds_RelationshipsEntry_DoNotUse::Adds_RelationshipsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Adds_RelationshipsEntry_DoNotUse::MergeFrom(const Adds_RelationshipsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void Adds::InitAsDefaultInstance() {
}
class Adds::_Internal {
 public:
};

Adds::Adds(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  entities_(arena),
  relationships_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.Adds)
}
Adds::Adds(const Adds& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  entities_.MergeFrom(from.entities_);
  relationships_.MergeFrom(from.relationships_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.Adds)
}

void Adds::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Adds_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
}

Adds::~Adds() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.Adds)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Adds::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Adds::ArenaDtor(void* object) {
  Adds* _this = reinterpret_cast< Adds* >(object);
  (void)_this;
}
void Adds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Adds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Adds& Adds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Adds_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
  return *internal_default_instance();
}


void Adds::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.Adds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  relationships_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Adds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .esriPBuffer.graph.NamedObjectAdds> entities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&entities_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .esriPBuffer.graph.NamedObjectAdds> relationships = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&relationships_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Adds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.Adds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .esriPBuffer.graph.NamedObjectAdds> entities = 1;
  if (!this->_internal_entities().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.Adds.EntitiesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_entities().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_entities().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >::const_iterator
          it = this->_internal_entities().begin();
          it != this->_internal_entities().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Adds_EntitiesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >::const_iterator
          it = this->_internal_entities().begin();
          it != this->_internal_entities().end(); ++it) {
        target = Adds_EntitiesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .esriPBuffer.graph.NamedObjectAdds> relationships = 2;
  if (!this->_internal_relationships().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.Adds.RelationshipsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_relationships().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_relationships().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >::const_iterator
          it = this->_internal_relationships().begin();
          it != this->_internal_relationships().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Adds_RelationshipsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >::const_iterator
          it = this->_internal_relationships().begin();
          it != this->_internal_relationships().end(); ++it) {
        target = Adds_RelationshipsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.Adds)
  return target;
}

size_t Adds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.Adds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .esriPBuffer.graph.NamedObjectAdds> entities = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_entities_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >::const_iterator
      it = this->_internal_entities().begin();
      it != this->_internal_entities().end(); ++it) {
    total_size += Adds_EntitiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .esriPBuffer.graph.NamedObjectAdds> relationships = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_relationships_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectAdds >::const_iterator
      it = this->_internal_relationships().begin();
      it != this->_internal_relationships().end(); ++it) {
    total_size += Adds_RelationshipsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Adds::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Adds*>(
      &from));
}

void Adds::MergeFrom(const Adds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.Adds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
  relationships_.MergeFrom(from.relationships_);
}

void Adds::CopyFrom(const Adds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.Adds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Adds::IsInitialized() const {
  return true;
}

void Adds::InternalSwap(Adds* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  entities_.Swap(&other->entities_);
  relationships_.Swap(&other->relationships_);
}

std::string Adds::GetTypeName() const {
  return "esriPBuffer.graph.Adds";
}


// ===================================================================

NamedObjectUpdate_PropertiesEntry_DoNotUse::NamedObjectUpdate_PropertiesEntry_DoNotUse() {}
NamedObjectUpdate_PropertiesEntry_DoNotUse::NamedObjectUpdate_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NamedObjectUpdate_PropertiesEntry_DoNotUse::MergeFrom(const NamedObjectUpdate_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void NamedObjectUpdate::InitAsDefaultInstance() {
}
class NamedObjectUpdate::_Internal {
 public:
};

void NamedObjectUpdate::clear_properties() {
  properties_.Clear();
}
NamedObjectUpdate::NamedObjectUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.NamedObjectUpdate)
}
NamedObjectUpdate::NamedObjectUpdate(const NamedObjectUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  clear_has_id();
  switch (from.id_case()) {
    case kOid: {
      _internal_set_oid(from._internal_oid());
      break;
    }
    case kGlobalid: {
      _internal_set_globalid(from._internal_globalid());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.NamedObjectUpdate)
}

void NamedObjectUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NamedObjectUpdate_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
  clear_has_id();
}

NamedObjectUpdate::~NamedObjectUpdate() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.NamedObjectUpdate)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void NamedObjectUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_id()) {
    clear_id();
  }
}

void NamedObjectUpdate::ArenaDtor(void* object) {
  NamedObjectUpdate* _this = reinterpret_cast< NamedObjectUpdate* >(object);
  (void)_this;
}
void NamedObjectUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedObjectUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedObjectUpdate& NamedObjectUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NamedObjectUpdate_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
  return *internal_default_instance();
}


void NamedObjectUpdate::clear_id() {
// @@protoc_insertion_point(one_of_clear_start:esriPBuffer.graph.NamedObjectUpdate)
  switch (id_case()) {
    case kOid: {
      // No need to clear
      break;
    }
    case kGlobalid: {
      id_.globalid_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_NOT_SET;
}


void NamedObjectUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.NamedObjectUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  clear_id();
  _internal_metadata_.Clear<std::string>();
}

const char* NamedObjectUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint64 oid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_oid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes globalid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_globalid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .esriPBuffer.graph.AnyValue> properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedObjectUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.NamedObjectUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 oid = 1;
  if (_internal_has_oid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(1, this->_internal_oid(), target);
  }

  // bytes globalid = 2;
  if (_internal_has_globalid()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_globalid(), target);
  }

  // map<string, .esriPBuffer.graph.AnyValue> properties = 3;
  if (!this->_internal_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.NamedObjectUpdate.PropertiesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NamedObjectUpdate_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it) {
        target = NamedObjectUpdate_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.NamedObjectUpdate)
  return target;
}

size_t NamedObjectUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.NamedObjectUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .esriPBuffer.graph.AnyValue> properties = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += NamedObjectUpdate_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  switch (id_case()) {
    // sint64 oid = 1;
    case kOid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_oid());
      break;
    }
    // bytes globalid = 2;
    case kGlobalid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_globalid());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedObjectUpdate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NamedObjectUpdate*>(
      &from));
}

void NamedObjectUpdate::MergeFrom(const NamedObjectUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.NamedObjectUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  switch (from.id_case()) {
    case kOid: {
      _internal_set_oid(from._internal_oid());
      break;
    }
    case kGlobalid: {
      _internal_set_globalid(from._internal_globalid());
      break;
    }
    case ID_NOT_SET: {
      break;
    }
  }
}

void NamedObjectUpdate::CopyFrom(const NamedObjectUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.NamedObjectUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedObjectUpdate::IsInitialized() const {
  return true;
}

void NamedObjectUpdate::InternalSwap(NamedObjectUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
  swap(id_, other->id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string NamedObjectUpdate::GetTypeName() const {
  return "esriPBuffer.graph.NamedObjectUpdate";
}


// ===================================================================

void NamedObjectUpdates::InitAsDefaultInstance() {
}
class NamedObjectUpdates::_Internal {
 public:
};

NamedObjectUpdates::NamedObjectUpdates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  namedobjectupdates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.NamedObjectUpdates)
}
NamedObjectUpdates::NamedObjectUpdates(const NamedObjectUpdates& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      namedobjectupdates_(from.namedobjectupdates_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.NamedObjectUpdates)
}

void NamedObjectUpdates::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NamedObjectUpdates_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
}

NamedObjectUpdates::~NamedObjectUpdates() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.NamedObjectUpdates)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void NamedObjectUpdates::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NamedObjectUpdates::ArenaDtor(void* object) {
  NamedObjectUpdates* _this = reinterpret_cast< NamedObjectUpdates* >(object);
  (void)_this;
}
void NamedObjectUpdates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedObjectUpdates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedObjectUpdates& NamedObjectUpdates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NamedObjectUpdates_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
  return *internal_default_instance();
}


void NamedObjectUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.NamedObjectUpdates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namedobjectupdates_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NamedObjectUpdates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .esriPBuffer.graph.NamedObjectUpdate namedObjectUpdates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_namedobjectupdates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedObjectUpdates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.NamedObjectUpdates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .esriPBuffer.graph.NamedObjectUpdate namedObjectUpdates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_namedobjectupdates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_namedobjectupdates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.NamedObjectUpdates)
  return target;
}

size_t NamedObjectUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.NamedObjectUpdates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .esriPBuffer.graph.NamedObjectUpdate namedObjectUpdates = 1;
  total_size += 1UL * this->_internal_namedobjectupdates_size();
  for (const auto& msg : this->namedobjectupdates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedObjectUpdates::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NamedObjectUpdates*>(
      &from));
}

void NamedObjectUpdates::MergeFrom(const NamedObjectUpdates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.NamedObjectUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  namedobjectupdates_.MergeFrom(from.namedobjectupdates_);
}

void NamedObjectUpdates::CopyFrom(const NamedObjectUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.NamedObjectUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedObjectUpdates::IsInitialized() const {
  return true;
}

void NamedObjectUpdates::InternalSwap(NamedObjectUpdates* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  namedobjectupdates_.InternalSwap(&other->namedobjectupdates_);
}

std::string NamedObjectUpdates::GetTypeName() const {
  return "esriPBuffer.graph.NamedObjectUpdates";
}


// ===================================================================

Updates_EntitiesEntry_DoNotUse::Updates_EntitiesEntry_DoNotUse() {}
Updates_EntitiesEntry_DoNotUse::Updates_EntitiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Updates_EntitiesEntry_DoNotUse::MergeFrom(const Updates_EntitiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

Updates_RelationshipsEntry_DoNotUse::Updates_RelationshipsEntry_DoNotUse() {}
Updates_RelationshipsEntry_DoNotUse::Updates_RelationshipsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Updates_RelationshipsEntry_DoNotUse::MergeFrom(const Updates_RelationshipsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void Updates::InitAsDefaultInstance() {
}
class Updates::_Internal {
 public:
};

Updates::Updates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  entities_(arena),
  relationships_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.Updates)
}
Updates::Updates(const Updates& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  entities_.MergeFrom(from.entities_);
  relationships_.MergeFrom(from.relationships_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.Updates)
}

void Updates::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Updates_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
}

Updates::~Updates() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.Updates)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Updates::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Updates::ArenaDtor(void* object) {
  Updates* _this = reinterpret_cast< Updates* >(object);
  (void)_this;
}
void Updates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Updates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Updates& Updates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Updates_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
  return *internal_default_instance();
}


void Updates::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.Updates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  relationships_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Updates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .esriPBuffer.graph.NamedObjectUpdates> entities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&entities_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .esriPBuffer.graph.NamedObjectUpdates> relationships = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&relationships_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Updates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.Updates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .esriPBuffer.graph.NamedObjectUpdates> entities = 1;
  if (!this->_internal_entities().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.Updates.EntitiesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_entities().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_entities().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >::const_iterator
          it = this->_internal_entities().begin();
          it != this->_internal_entities().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Updates_EntitiesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >::const_iterator
          it = this->_internal_entities().begin();
          it != this->_internal_entities().end(); ++it) {
        target = Updates_EntitiesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .esriPBuffer.graph.NamedObjectUpdates> relationships = 2;
  if (!this->_internal_relationships().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.Updates.RelationshipsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_relationships().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_relationships().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >::const_iterator
          it = this->_internal_relationships().begin();
          it != this->_internal_relationships().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Updates_RelationshipsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >::const_iterator
          it = this->_internal_relationships().begin();
          it != this->_internal_relationships().end(); ++it) {
        target = Updates_RelationshipsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.Updates)
  return target;
}

size_t Updates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.Updates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .esriPBuffer.graph.NamedObjectUpdates> entities = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_entities_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >::const_iterator
      it = this->_internal_entities().begin();
      it != this->_internal_entities().end(); ++it) {
    total_size += Updates_EntitiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .esriPBuffer.graph.NamedObjectUpdates> relationships = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_relationships_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::NamedObjectUpdates >::const_iterator
      it = this->_internal_relationships().begin();
      it != this->_internal_relationships().end(); ++it) {
    total_size += Updates_RelationshipsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Updates::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Updates*>(
      &from));
}

void Updates::MergeFrom(const Updates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.Updates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
  relationships_.MergeFrom(from.relationships_);
}

void Updates::CopyFrom(const Updates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.Updates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Updates::IsInitialized() const {
  return true;
}

void Updates::InternalSwap(Updates* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  entities_.Swap(&other->entities_);
  relationships_.Swap(&other->relationships_);
}

std::string Updates::GetTypeName() const {
  return "esriPBuffer.graph.Updates";
}


// ===================================================================

Deletes_DeletedEntityIdsEntry_DoNotUse::Deletes_DeletedEntityIdsEntry_DoNotUse() {}
Deletes_DeletedEntityIdsEntry_DoNotUse::Deletes_DeletedEntityIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Deletes_DeletedEntityIdsEntry_DoNotUse::MergeFrom(const Deletes_DeletedEntityIdsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

Deletes_DeletedRelationshipIdsEntry_DoNotUse::Deletes_DeletedRelationshipIdsEntry_DoNotUse() {}
Deletes_DeletedRelationshipIdsEntry_DoNotUse::Deletes_DeletedRelationshipIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Deletes_DeletedRelationshipIdsEntry_DoNotUse::MergeFrom(const Deletes_DeletedRelationshipIdsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void Deletes::InitAsDefaultInstance() {
}
class Deletes::_Internal {
 public:
};

void Deletes::clear_deleted_entity_ids() {
  deleted_entity_ids_.Clear();
}
void Deletes::clear_deleted_relationship_ids() {
  deleted_relationship_ids_.Clear();
}
Deletes::Deletes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  deleted_entity_ids_(arena),
  deleted_relationship_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.Deletes)
}
Deletes::Deletes(const Deletes& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  deleted_entity_ids_.MergeFrom(from.deleted_entity_ids_);
  deleted_relationship_ids_.MergeFrom(from.deleted_relationship_ids_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.Deletes)
}

void Deletes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Deletes_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
}

Deletes::~Deletes() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.Deletes)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void Deletes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Deletes::ArenaDtor(void* object) {
  Deletes* _this = reinterpret_cast< Deletes* >(object);
  (void)_this;
}
void Deletes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Deletes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Deletes& Deletes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Deletes_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
  return *internal_default_instance();
}


void Deletes::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.Deletes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deleted_entity_ids_.Clear();
  deleted_relationship_ids_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Deletes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .esriPBuffer.ObjectIdentifierSet> deleted_entity_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&deleted_entity_ids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .esriPBuffer.ObjectIdentifierSet> deleted_relationship_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&deleted_relationship_ids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Deletes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.Deletes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .esriPBuffer.ObjectIdentifierSet> deleted_entity_ids = 1;
  if (!this->_internal_deleted_entity_ids().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.Deletes.DeletedEntityIdsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_deleted_entity_ids().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_deleted_entity_ids().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >::const_iterator
          it = this->_internal_deleted_entity_ids().begin();
          it != this->_internal_deleted_entity_ids().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Deletes_DeletedEntityIdsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >::const_iterator
          it = this->_internal_deleted_entity_ids().begin();
          it != this->_internal_deleted_entity_ids().end(); ++it) {
        target = Deletes_DeletedEntityIdsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .esriPBuffer.ObjectIdentifierSet> deleted_relationship_ids = 2;
  if (!this->_internal_deleted_relationship_ids().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.Deletes.DeletedRelationshipIdsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_deleted_relationship_ids().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_deleted_relationship_ids().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >::const_iterator
          it = this->_internal_deleted_relationship_ids().begin();
          it != this->_internal_deleted_relationship_ids().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Deletes_DeletedRelationshipIdsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >::const_iterator
          it = this->_internal_deleted_relationship_ids().begin();
          it != this->_internal_deleted_relationship_ids().end(); ++it) {
        target = Deletes_DeletedRelationshipIdsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.Deletes)
  return target;
}

size_t Deletes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.Deletes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .esriPBuffer.ObjectIdentifierSet> deleted_entity_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_deleted_entity_ids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >::const_iterator
      it = this->_internal_deleted_entity_ids().begin();
      it != this->_internal_deleted_entity_ids().end(); ++it) {
    total_size += Deletes_DeletedEntityIdsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .esriPBuffer.ObjectIdentifierSet> deleted_relationship_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_deleted_relationship_ids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::ObjectIdentifierSet >::const_iterator
      it = this->_internal_deleted_relationship_ids().begin();
      it != this->_internal_deleted_relationship_ids().end(); ++it) {
    total_size += Deletes_DeletedRelationshipIdsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Deletes::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Deletes*>(
      &from));
}

void Deletes::MergeFrom(const Deletes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.Deletes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deleted_entity_ids_.MergeFrom(from.deleted_entity_ids_);
  deleted_relationship_ids_.MergeFrom(from.deleted_relationship_ids_);
}

void Deletes::CopyFrom(const Deletes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.Deletes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deletes::IsInitialized() const {
  return true;
}

void Deletes::InternalSwap(Deletes* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  deleted_entity_ids_.Swap(&other->deleted_entity_ids_);
  deleted_relationship_ids_.Swap(&other->deleted_relationship_ids_);
}

std::string Deletes::GetTypeName() const {
  return "esriPBuffer.graph.Deletes";
}


// ===================================================================

void GraphApplyEditsHeader::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_GraphApplyEditsHeader_default_instance_._instance.get_mutable()->spatialreference_ = const_cast< ::esriPBuffer::EsriTypes_SpatialReference*>(
      ::esriPBuffer::EsriTypes_SpatialReference::internal_default_instance());
  ::esriPBuffer::graph::_GraphApplyEditsHeader_default_instance_._instance.get_mutable()->input_transform_ = const_cast< ::esriPBuffer::graph::Transform*>(
      ::esriPBuffer::graph::Transform::internal_default_instance());
}
class GraphApplyEditsHeader::_Internal {
 public:
  static const ::esriPBuffer::EsriTypes_SpatialReference& spatialreference(const GraphApplyEditsHeader* msg);
  static const ::esriPBuffer::graph::Transform& input_transform(const GraphApplyEditsHeader* msg);
};

const ::esriPBuffer::EsriTypes_SpatialReference&
GraphApplyEditsHeader::_Internal::spatialreference(const GraphApplyEditsHeader* msg) {
  return *msg->spatialreference_;
}
const ::esriPBuffer::graph::Transform&
GraphApplyEditsHeader::_Internal::input_transform(const GraphApplyEditsHeader* msg) {
  return *msg->input_transform_;
}
void GraphApplyEditsHeader::clear_spatialreference() {
  if (GetArena() == nullptr && spatialreference_ != nullptr) {
    delete spatialreference_;
  }
  spatialreference_ = nullptr;
}
void GraphApplyEditsHeader::clear_input_transform() {
  if (GetArena() == nullptr && input_transform_ != nullptr) {
    delete input_transform_;
  }
  input_transform_ = nullptr;
}
GraphApplyEditsHeader::GraphApplyEditsHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GraphApplyEditsHeader)
}
GraphApplyEditsHeader::GraphApplyEditsHeader(const GraphApplyEditsHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_spatialreference()) {
    spatialreference_ = new ::esriPBuffer::EsriTypes_SpatialReference(*from.spatialreference_);
  } else {
    spatialreference_ = nullptr;
  }
  if (from._internal_has_input_transform()) {
    input_transform_ = new ::esriPBuffer::graph::Transform(*from.input_transform_);
  } else {
    input_transform_ = nullptr;
  }
  ::memcpy(&useglobalids_, &from.useglobalids_,
    static_cast<size_t>(reinterpret_cast<char*>(&cascade_delete_) -
    reinterpret_cast<char*>(&useglobalids_)) + sizeof(cascade_delete_));
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GraphApplyEditsHeader)
}

void GraphApplyEditsHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphApplyEditsHeader_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
  ::memset(&spatialreference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cascade_delete_) -
      reinterpret_cast<char*>(&spatialreference_)) + sizeof(cascade_delete_));
}

GraphApplyEditsHeader::~GraphApplyEditsHeader() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GraphApplyEditsHeader)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GraphApplyEditsHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete spatialreference_;
  if (this != internal_default_instance()) delete input_transform_;
}

void GraphApplyEditsHeader::ArenaDtor(void* object) {
  GraphApplyEditsHeader* _this = reinterpret_cast< GraphApplyEditsHeader* >(object);
  (void)_this;
}
void GraphApplyEditsHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphApplyEditsHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphApplyEditsHeader& GraphApplyEditsHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphApplyEditsHeader_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
  return *internal_default_instance();
}


void GraphApplyEditsHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GraphApplyEditsHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && spatialreference_ != nullptr) {
    delete spatialreference_;
  }
  spatialreference_ = nullptr;
  if (GetArena() == nullptr && input_transform_ != nullptr) {
    delete input_transform_;
  }
  input_transform_ = nullptr;
  ::memset(&useglobalids_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cascade_delete_) -
      reinterpret_cast<char*>(&useglobalids_)) + sizeof(cascade_delete_));
  _internal_metadata_.Clear<std::string>();
}

const char* GraphApplyEditsHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.EsriTypes.SpatialReference spatialReference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spatialreference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool useGlobalIDs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          useglobalids_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cascade_delete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cascade_delete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.Transform input_transform = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphApplyEditsHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GraphApplyEditsHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.EsriTypes.SpatialReference spatialReference = 1;
  if (this->has_spatialreference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spatialreference(this), target, stream);
  }

  // bool useGlobalIDs = 2;
  if (this->useglobalids() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_useglobalids(), target);
  }

  // bool cascade_delete = 3;
  if (this->cascade_delete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_cascade_delete(), target);
  }

  // .esriPBuffer.graph.Transform input_transform = 4;
  if (this->has_input_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::input_transform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GraphApplyEditsHeader)
  return target;
}

size_t GraphApplyEditsHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GraphApplyEditsHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .esriPBuffer.EsriTypes.SpatialReference spatialReference = 1;
  if (this->has_spatialreference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spatialreference_);
  }

  // .esriPBuffer.graph.Transform input_transform = 4;
  if (this->has_input_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_transform_);
  }

  // bool useGlobalIDs = 2;
  if (this->useglobalids() != 0) {
    total_size += 1 + 1;
  }

  // bool cascade_delete = 3;
  if (this->cascade_delete() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphApplyEditsHeader::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphApplyEditsHeader*>(
      &from));
}

void GraphApplyEditsHeader::MergeFrom(const GraphApplyEditsHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GraphApplyEditsHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_spatialreference()) {
    _internal_mutable_spatialreference()->::esriPBuffer::EsriTypes_SpatialReference::MergeFrom(from._internal_spatialreference());
  }
  if (from.has_input_transform()) {
    _internal_mutable_input_transform()->::esriPBuffer::graph::Transform::MergeFrom(from._internal_input_transform());
  }
  if (from.useglobalids() != 0) {
    _internal_set_useglobalids(from._internal_useglobalids());
  }
  if (from.cascade_delete() != 0) {
    _internal_set_cascade_delete(from._internal_cascade_delete());
  }
}

void GraphApplyEditsHeader::CopyFrom(const GraphApplyEditsHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GraphApplyEditsHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphApplyEditsHeader::IsInitialized() const {
  return true;
}

void GraphApplyEditsHeader::InternalSwap(GraphApplyEditsHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphApplyEditsHeader, cascade_delete_)
      + sizeof(GraphApplyEditsHeader::cascade_delete_)
      - PROTOBUF_FIELD_OFFSET(GraphApplyEditsHeader, spatialreference_)>(
          reinterpret_cast<char*>(&spatialreference_),
          reinterpret_cast<char*>(&other->spatialreference_));
}

std::string GraphApplyEditsHeader::GetTypeName() const {
  return "esriPBuffer.graph.GraphApplyEditsHeader";
}


// ===================================================================

void GraphApplyEditsFrame::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_GraphApplyEditsFrame_default_instance_._instance.get_mutable()->adds_ = const_cast< ::esriPBuffer::graph::Adds*>(
      ::esriPBuffer::graph::Adds::internal_default_instance());
  ::esriPBuffer::graph::_GraphApplyEditsFrame_default_instance_._instance.get_mutable()->updates_ = const_cast< ::esriPBuffer::graph::Updates*>(
      ::esriPBuffer::graph::Updates::internal_default_instance());
  ::esriPBuffer::graph::_GraphApplyEditsFrame_default_instance_._instance.get_mutable()->deletes_ = const_cast< ::esriPBuffer::graph::Deletes*>(
      ::esriPBuffer::graph::Deletes::internal_default_instance());
}
class GraphApplyEditsFrame::_Internal {
 public:
  static const ::esriPBuffer::graph::Adds& adds(const GraphApplyEditsFrame* msg);
  static const ::esriPBuffer::graph::Updates& updates(const GraphApplyEditsFrame* msg);
  static const ::esriPBuffer::graph::Deletes& deletes(const GraphApplyEditsFrame* msg);
};

const ::esriPBuffer::graph::Adds&
GraphApplyEditsFrame::_Internal::adds(const GraphApplyEditsFrame* msg) {
  return *msg->adds_;
}
const ::esriPBuffer::graph::Updates&
GraphApplyEditsFrame::_Internal::updates(const GraphApplyEditsFrame* msg) {
  return *msg->updates_;
}
const ::esriPBuffer::graph::Deletes&
GraphApplyEditsFrame::_Internal::deletes(const GraphApplyEditsFrame* msg) {
  return *msg->deletes_;
}
GraphApplyEditsFrame::GraphApplyEditsFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GraphApplyEditsFrame)
}
GraphApplyEditsFrame::GraphApplyEditsFrame(const GraphApplyEditsFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_adds()) {
    adds_ = new ::esriPBuffer::graph::Adds(*from.adds_);
  } else {
    adds_ = nullptr;
  }
  if (from._internal_has_updates()) {
    updates_ = new ::esriPBuffer::graph::Updates(*from.updates_);
  } else {
    updates_ = nullptr;
  }
  if (from._internal_has_deletes()) {
    deletes_ = new ::esriPBuffer::graph::Deletes(*from.deletes_);
  } else {
    deletes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GraphApplyEditsFrame)
}

void GraphApplyEditsFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphApplyEditsFrame_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
  ::memset(&adds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deletes_) -
      reinterpret_cast<char*>(&adds_)) + sizeof(deletes_));
}

GraphApplyEditsFrame::~GraphApplyEditsFrame() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GraphApplyEditsFrame)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GraphApplyEditsFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete adds_;
  if (this != internal_default_instance()) delete updates_;
  if (this != internal_default_instance()) delete deletes_;
}

void GraphApplyEditsFrame::ArenaDtor(void* object) {
  GraphApplyEditsFrame* _this = reinterpret_cast< GraphApplyEditsFrame* >(object);
  (void)_this;
}
void GraphApplyEditsFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphApplyEditsFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphApplyEditsFrame& GraphApplyEditsFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphApplyEditsFrame_esriPBuffer_2fgraph_2fApplyEditsRequest_2eproto.base);
  return *internal_default_instance();
}


void GraphApplyEditsFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GraphApplyEditsFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && adds_ != nullptr) {
    delete adds_;
  }
  adds_ = nullptr;
  if (GetArena() == nullptr && updates_ != nullptr) {
    delete updates_;
  }
  updates_ = nullptr;
  if (GetArena() == nullptr && deletes_ != nullptr) {
    delete deletes_;
  }
  deletes_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* GraphApplyEditsFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.graph.Adds adds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_adds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.Updates updates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_updates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.Deletes deletes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deletes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphApplyEditsFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GraphApplyEditsFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.graph.Adds adds = 1;
  if (this->has_adds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::adds(this), target, stream);
  }

  // .esriPBuffer.graph.Updates updates = 2;
  if (this->has_updates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::updates(this), target, stream);
  }

  // .esriPBuffer.graph.Deletes deletes = 3;
  if (this->has_deletes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::deletes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GraphApplyEditsFrame)
  return target;
}

size_t GraphApplyEditsFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GraphApplyEditsFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .esriPBuffer.graph.Adds adds = 1;
  if (this->has_adds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adds_);
  }

  // .esriPBuffer.graph.Updates updates = 2;
  if (this->has_updates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updates_);
  }

  // .esriPBuffer.graph.Deletes deletes = 3;
  if (this->has_deletes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deletes_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphApplyEditsFrame::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphApplyEditsFrame*>(
      &from));
}

void GraphApplyEditsFrame::MergeFrom(const GraphApplyEditsFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GraphApplyEditsFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_adds()) {
    _internal_mutable_adds()->::esriPBuffer::graph::Adds::MergeFrom(from._internal_adds());
  }
  if (from.has_updates()) {
    _internal_mutable_updates()->::esriPBuffer::graph::Updates::MergeFrom(from._internal_updates());
  }
  if (from.has_deletes()) {
    _internal_mutable_deletes()->::esriPBuffer::graph::Deletes::MergeFrom(from._internal_deletes());
  }
}

void GraphApplyEditsFrame::CopyFrom(const GraphApplyEditsFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GraphApplyEditsFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphApplyEditsFrame::IsInitialized() const {
  return true;
}

void GraphApplyEditsFrame::InternalSwap(GraphApplyEditsFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphApplyEditsFrame, deletes_)
      + sizeof(GraphApplyEditsFrame::deletes_)
      - PROTOBUF_FIELD_OFFSET(GraphApplyEditsFrame, adds_)>(
          reinterpret_cast<char*>(&adds_),
          reinterpret_cast<char*>(&other->adds_));
}

std::string GraphApplyEditsFrame::GetTypeName() const {
  return "esriPBuffer.graph.GraphApplyEditsFrame";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::NamedObjectAdd_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::NamedObjectAdd_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::NamedObjectAdd_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::NamedObjectAdd* Arena::CreateMaybeMessage< ::esriPBuffer::graph::NamedObjectAdd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::NamedObjectAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::NamedObjectAdds* Arena::CreateMaybeMessage< ::esriPBuffer::graph::NamedObjectAdds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::NamedObjectAdds >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::Adds_EntitiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::Adds_EntitiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::Adds_EntitiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::Adds_RelationshipsEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::Adds_RelationshipsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::Adds_RelationshipsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::Adds* Arena::CreateMaybeMessage< ::esriPBuffer::graph::Adds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::Adds >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::NamedObjectUpdate_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::NamedObjectUpdate_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::NamedObjectUpdate_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::NamedObjectUpdate* Arena::CreateMaybeMessage< ::esriPBuffer::graph::NamedObjectUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::NamedObjectUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::NamedObjectUpdates* Arena::CreateMaybeMessage< ::esriPBuffer::graph::NamedObjectUpdates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::NamedObjectUpdates >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::Updates_EntitiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::Updates_EntitiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::Updates_EntitiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::Updates_RelationshipsEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::Updates_RelationshipsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::Updates_RelationshipsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::Updates* Arena::CreateMaybeMessage< ::esriPBuffer::graph::Updates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::Updates >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::Deletes_DeletedEntityIdsEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::Deletes_DeletedEntityIdsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::Deletes_DeletedEntityIdsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::Deletes_DeletedRelationshipIdsEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::Deletes_DeletedRelationshipIdsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::Deletes_DeletedRelationshipIdsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::Deletes* Arena::CreateMaybeMessage< ::esriPBuffer::graph::Deletes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::Deletes >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphApplyEditsHeader* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphApplyEditsHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphApplyEditsHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphApplyEditsFrame* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphApplyEditsFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphApplyEditsFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
