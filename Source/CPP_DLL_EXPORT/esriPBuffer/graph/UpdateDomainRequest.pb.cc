// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/UpdateDomainRequest.proto

#include "esriPBuffer/graph/UpdateDomainRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fEsriTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EsriTypes_Domain_esriPBuffer_2fEsriTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fUpdateDomainRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DomainMask_esriPBuffer_2fgraph_2fUpdateDomainRequest_2eproto;
namespace esriPBuffer {
namespace graph {
class DomainMaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DomainMask> _instance;
} _DomainMask_default_instance_;
class DomainUpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DomainUpdateRequest> _instance;
} _DomainUpdateRequest_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
static void InitDefaultsscc_info_DomainMask_esriPBuffer_2fgraph_2fUpdateDomainRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_DomainMask_default_instance_;
    new (ptr) ::esriPBuffer::graph::DomainMask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::DomainMask::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DomainMask_esriPBuffer_2fgraph_2fUpdateDomainRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DomainMask_esriPBuffer_2fgraph_2fUpdateDomainRequest_2eproto}, {}};

static void InitDefaultsscc_info_DomainUpdateRequest_esriPBuffer_2fgraph_2fUpdateDomainRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_DomainUpdateRequest_default_instance_;
    new (ptr) ::esriPBuffer::graph::DomainUpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::DomainUpdateRequest::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DomainUpdateRequest_esriPBuffer_2fgraph_2fUpdateDomainRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DomainUpdateRequest_esriPBuffer_2fgraph_2fUpdateDomainRequest_2eproto}, {
      &scc_info_DomainMask_esriPBuffer_2fgraph_2fUpdateDomainRequest_2eproto.base,
      &scc_info_EsriTypes_Domain_esriPBuffer_2fEsriTypes_2eproto.base,}};

namespace esriPBuffer {
namespace graph {

// ===================================================================

void DomainMask::InitAsDefaultInstance() {
}
class DomainMask::_Internal {
 public:
};

DomainMask::DomainMask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.DomainMask)
}
DomainMask::DomainMask(const DomainMask& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&update_type_, &from.update_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_split_policy_) -
    reinterpret_cast<char*>(&update_type_)) + sizeof(update_split_policy_));
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.DomainMask)
}

void DomainMask::SharedCtor() {
  ::memset(&update_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_split_policy_) -
      reinterpret_cast<char*>(&update_type_)) + sizeof(update_split_policy_));
}

DomainMask::~DomainMask() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.DomainMask)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DomainMask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DomainMask::ArenaDtor(void* object) {
  DomainMask* _this = reinterpret_cast< DomainMask* >(object);
  (void)_this;
}
void DomainMask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DomainMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DomainMask& DomainMask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DomainMask_esriPBuffer_2fgraph_2fUpdateDomainRequest_2eproto.base);
  return *internal_default_instance();
}


void DomainMask::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.DomainMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&update_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_split_policy_) -
      reinterpret_cast<char*>(&update_type_)) + sizeof(update_split_policy_));
  _internal_metadata_.Clear<std::string>();
}

const char* DomainMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool update_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          update_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          update_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_domain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          update_domain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_field_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          update_field_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_merge_policy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          update_merge_policy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_split_policy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          update_split_policy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DomainMask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.DomainMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool update_type = 1;
  if (this->update_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_update_type(), target);
  }

  // bool update_name = 2;
  if (this->update_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_update_name(), target);
  }

  // bool update_domain = 3;
  if (this->update_domain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_update_domain(), target);
  }

  // bool update_field_type = 4;
  if (this->update_field_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_update_field_type(), target);
  }

  // bool update_merge_policy = 5;
  if (this->update_merge_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_update_merge_policy(), target);
  }

  // bool update_split_policy = 6;
  if (this->update_split_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_update_split_policy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.DomainMask)
  return target;
}

size_t DomainMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.DomainMask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool update_type = 1;
  if (this->update_type() != 0) {
    total_size += 1 + 1;
  }

  // bool update_name = 2;
  if (this->update_name() != 0) {
    total_size += 1 + 1;
  }

  // bool update_domain = 3;
  if (this->update_domain() != 0) {
    total_size += 1 + 1;
  }

  // bool update_field_type = 4;
  if (this->update_field_type() != 0) {
    total_size += 1 + 1;
  }

  // bool update_merge_policy = 5;
  if (this->update_merge_policy() != 0) {
    total_size += 1 + 1;
  }

  // bool update_split_policy = 6;
  if (this->update_split_policy() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DomainMask::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DomainMask*>(
      &from));
}

void DomainMask::MergeFrom(const DomainMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.DomainMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.update_type() != 0) {
    _internal_set_update_type(from._internal_update_type());
  }
  if (from.update_name() != 0) {
    _internal_set_update_name(from._internal_update_name());
  }
  if (from.update_domain() != 0) {
    _internal_set_update_domain(from._internal_update_domain());
  }
  if (from.update_field_type() != 0) {
    _internal_set_update_field_type(from._internal_update_field_type());
  }
  if (from.update_merge_policy() != 0) {
    _internal_set_update_merge_policy(from._internal_update_merge_policy());
  }
  if (from.update_split_policy() != 0) {
    _internal_set_update_split_policy(from._internal_update_split_policy());
  }
}

void DomainMask::CopyFrom(const DomainMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.DomainMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomainMask::IsInitialized() const {
  return true;
}

void DomainMask::InternalSwap(DomainMask* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DomainMask, update_split_policy_)
      + sizeof(DomainMask::update_split_policy_)
      - PROTOBUF_FIELD_OFFSET(DomainMask, update_type_)>(
          reinterpret_cast<char*>(&update_type_),
          reinterpret_cast<char*>(&other->update_type_));
}

std::string DomainMask::GetTypeName() const {
  return "esriPBuffer.graph.DomainMask";
}


// ===================================================================

void DomainUpdateRequest::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_DomainUpdateRequest_default_instance_._instance.get_mutable()->mask_ = const_cast< ::esriPBuffer::graph::DomainMask*>(
      ::esriPBuffer::graph::DomainMask::internal_default_instance());
  ::esriPBuffer::graph::_DomainUpdateRequest_default_instance_._instance.get_mutable()->domain_ = const_cast< ::esriPBuffer::EsriTypes_Domain*>(
      ::esriPBuffer::EsriTypes_Domain::internal_default_instance());
}
class DomainUpdateRequest::_Internal {
 public:
  static const ::esriPBuffer::graph::DomainMask& mask(const DomainUpdateRequest* msg);
  static const ::esriPBuffer::EsriTypes_Domain& domain(const DomainUpdateRequest* msg);
};

const ::esriPBuffer::graph::DomainMask&
DomainUpdateRequest::_Internal::mask(const DomainUpdateRequest* msg) {
  return *msg->mask_;
}
const ::esriPBuffer::EsriTypes_Domain&
DomainUpdateRequest::_Internal::domain(const DomainUpdateRequest* msg) {
  return *msg->domain_;
}
void DomainUpdateRequest::clear_domain() {
  if (GetArena() == nullptr && domain_ != nullptr) {
    delete domain_;
  }
  domain_ = nullptr;
}
DomainUpdateRequest::DomainUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.DomainUpdateRequest)
}
DomainUpdateRequest::DomainUpdateRequest(const DomainUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_mask()) {
    mask_ = new ::esriPBuffer::graph::DomainMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  if (from._internal_has_domain()) {
    domain_ = new ::esriPBuffer::EsriTypes_Domain(*from.domain_);
  } else {
    domain_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.DomainUpdateRequest)
}

void DomainUpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DomainUpdateRequest_esriPBuffer_2fgraph_2fUpdateDomainRequest_2eproto.base);
  ::memset(&mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&domain_) -
      reinterpret_cast<char*>(&mask_)) + sizeof(domain_));
}

DomainUpdateRequest::~DomainUpdateRequest() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.DomainUpdateRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DomainUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mask_;
  if (this != internal_default_instance()) delete domain_;
}

void DomainUpdateRequest::ArenaDtor(void* object) {
  DomainUpdateRequest* _this = reinterpret_cast< DomainUpdateRequest* >(object);
  (void)_this;
}
void DomainUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DomainUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DomainUpdateRequest& DomainUpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DomainUpdateRequest_esriPBuffer_2fgraph_2fUpdateDomainRequest_2eproto.base);
  return *internal_default_instance();
}


void DomainUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.DomainUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  if (GetArena() == nullptr && domain_ != nullptr) {
    delete domain_;
  }
  domain_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* DomainUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.graph.DomainMask mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.EsriTypes.Domain domain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_domain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DomainUpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.DomainUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.graph.DomainMask mask = 1;
  if (this->has_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mask(this), target, stream);
  }

  // .esriPBuffer.EsriTypes.Domain domain = 2;
  if (this->has_domain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::domain(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.DomainUpdateRequest)
  return target;
}

size_t DomainUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.DomainUpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .esriPBuffer.graph.DomainMask mask = 1;
  if (this->has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  // .esriPBuffer.EsriTypes.Domain domain = 2;
  if (this->has_domain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *domain_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DomainUpdateRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DomainUpdateRequest*>(
      &from));
}

void DomainUpdateRequest::MergeFrom(const DomainUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.DomainUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mask()) {
    _internal_mutable_mask()->::esriPBuffer::graph::DomainMask::MergeFrom(from._internal_mask());
  }
  if (from.has_domain()) {
    _internal_mutable_domain()->::esriPBuffer::EsriTypes_Domain::MergeFrom(from._internal_domain());
  }
}

void DomainUpdateRequest::CopyFrom(const DomainUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.DomainUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomainUpdateRequest::IsInitialized() const {
  return true;
}

void DomainUpdateRequest::InternalSwap(DomainUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DomainUpdateRequest, domain_)
      + sizeof(DomainUpdateRequest::domain_)
      - PROTOBUF_FIELD_OFFSET(DomainUpdateRequest, mask_)>(
          reinterpret_cast<char*>(&mask_),
          reinterpret_cast<char*>(&other->mask_));
}

std::string DomainUpdateRequest::GetTypeName() const {
  return "esriPBuffer.graph.DomainUpdateRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::DomainMask* Arena::CreateMaybeMessage< ::esriPBuffer::graph::DomainMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::DomainMask >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::DomainUpdateRequest* Arena::CreateMaybeMessage< ::esriPBuffer::graph::DomainUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::DomainUpdateRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
