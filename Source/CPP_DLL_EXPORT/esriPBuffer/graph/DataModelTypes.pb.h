// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/DataModelTypes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fDataModelTypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fDataModelTypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "esriPBuffer/EsriTypes.pb.h"
#include "esriPBuffer/EsriExtendedTypes/EsriExtendedTypes.pb.h"
#include "esriPBuffer/graph/EsriGraphTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fDataModelTypes_2eproto EXT_CLASS
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct EXT_CLASS TableStruct_esriPBuffer_2fgraph_2fDataModelTypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace esriPBuffer {
namespace graph {
class EntityType;
class EntityTypeDefaultTypeInternal;
EXT_CLASS extern EntityTypeDefaultTypeInternal _EntityType_default_instance_;
class GraphDocumentEntityTypeInfo;
class GraphDocumentEntityTypeInfoDefaultTypeInternal;
EXT_CLASS extern GraphDocumentEntityTypeInfoDefaultTypeInternal _GraphDocumentEntityTypeInfo_default_instance_;
class GraphProperty;
class GraphPropertyDefaultTypeInternal;
EXT_CLASS extern GraphPropertyDefaultTypeInternal _GraphProperty_default_instance_;
class NamedObjectType;
class NamedObjectTypeDefaultTypeInternal;
EXT_CLASS extern NamedObjectTypeDefaultTypeInternal _NamedObjectType_default_instance_;
class RelationshipType;
class RelationshipTypeDefaultTypeInternal;
EXT_CLASS extern RelationshipTypeDefaultTypeInternal _RelationshipType_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> EXT_CLASS ::esriPBuffer::graph::EntityType* Arena::CreateMaybeMessage<::esriPBuffer::graph::EntityType>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::GraphDocumentEntityTypeInfo* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphDocumentEntityTypeInfo>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::GraphProperty* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphProperty>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::NamedObjectType* Arena::CreateMaybeMessage<::esriPBuffer::graph::NamedObjectType>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::RelationshipType* Arena::CreateMaybeMessage<::esriPBuffer::graph::RelationshipType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esriPBuffer {
namespace graph {

enum esriGraphNamedObjectRole : int {
  esriGraphNamedObjectRegular = 0,
  esriGraphNamedObjectProvenance = 1,
  esriGraphNamedObjectDocument = 2,
  esriGraphNamedObjectRole_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  esriGraphNamedObjectRole_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
EXT_CLASS bool esriGraphNamedObjectRole_IsValid(int value);
constexpr esriGraphNamedObjectRole esriGraphNamedObjectRole_MIN = esriGraphNamedObjectRegular;
constexpr esriGraphNamedObjectRole esriGraphNamedObjectRole_MAX = esriGraphNamedObjectDocument;
constexpr int esriGraphNamedObjectRole_ARRAYSIZE = esriGraphNamedObjectRole_MAX + 1;

const std::string& esriGraphNamedObjectRole_Name(esriGraphNamedObjectRole value);
template<typename T>
inline const std::string& esriGraphNamedObjectRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, esriGraphNamedObjectRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function esriGraphNamedObjectRole_Name.");
  return esriGraphNamedObjectRole_Name(static_cast<esriGraphNamedObjectRole>(enum_t_value));
}
bool esriGraphNamedObjectRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, esriGraphNamedObjectRole* value);
// ===================================================================

class EXT_CLASS NamedObjectType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.NamedObjectType) */ {
 public:
  inline NamedObjectType() : NamedObjectType(nullptr) {}
  virtual ~NamedObjectType();

  NamedObjectType(const NamedObjectType& from);
  NamedObjectType(NamedObjectType&& from) noexcept
    : NamedObjectType() {
    *this = ::std::move(from);
  }

  inline NamedObjectType& operator=(const NamedObjectType& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedObjectType& operator=(NamedObjectType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const NamedObjectType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedObjectType* internal_default_instance() {
    return reinterpret_cast<const NamedObjectType*>(
               &_NamedObjectType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NamedObjectType& a, NamedObjectType& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedObjectType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedObjectType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamedObjectType* New() const final {
    return CreateMaybeMessage<NamedObjectType>(nullptr);
  }

  NamedObjectType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamedObjectType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NamedObjectType& from);
  void MergeFrom(const NamedObjectType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NamedObjectType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.NamedObjectType";
  }
  protected:
  explicit NamedObjectType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 5,
    kFieldIndexesFieldNumber = 6,
    kNameFieldNumber = 1,
    kAliasFieldNumber = 2,
    kRoleFieldNumber = 4,
    kStrictFieldNumber = 7,
  };
  // repeated .esriPBuffer.graph.GraphProperty properties = 5;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::esriPBuffer::graph::GraphProperty* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GraphProperty >*
      mutable_properties();
  private:
  const ::esriPBuffer::graph::GraphProperty& _internal_properties(int index) const;
  ::esriPBuffer::graph::GraphProperty* _internal_add_properties();
  public:
  const ::esriPBuffer::graph::GraphProperty& properties(int index) const;
  ::esriPBuffer::graph::GraphProperty* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GraphProperty >&
      properties() const;

  // repeated .esriPBuffer.EsriTypes.FieldIndex field_indexes = 6;
  int field_indexes_size() const;
  private:
  int _internal_field_indexes_size() const;
  public:
  void clear_field_indexes();
  ::esriPBuffer::EsriTypes_FieldIndex* mutable_field_indexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_FieldIndex >*
      mutable_field_indexes();
  private:
  const ::esriPBuffer::EsriTypes_FieldIndex& _internal_field_indexes(int index) const;
  ::esriPBuffer::EsriTypes_FieldIndex* _internal_add_field_indexes();
  public:
  const ::esriPBuffer::EsriTypes_FieldIndex& field_indexes(int index) const;
  ::esriPBuffer::EsriTypes_FieldIndex* add_field_indexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_FieldIndex >&
      field_indexes() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string alias = 2;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // .esriPBuffer.graph.esriGraphNamedObjectRole role = 4;
  void clear_role();
  ::esriPBuffer::graph::esriGraphNamedObjectRole role() const;
  void set_role(::esriPBuffer::graph::esriGraphNamedObjectRole value);
  private:
  ::esriPBuffer::graph::esriGraphNamedObjectRole _internal_role() const;
  void _internal_set_role(::esriPBuffer::graph::esriGraphNamedObjectRole value);
  public:

  // bool strict = 7;
  void clear_strict();
  bool strict() const;
  void set_strict(bool value);
  private:
  bool _internal_strict() const;
  void _internal_set_strict(bool value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.NamedObjectType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GraphProperty > properties_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_FieldIndex > field_indexes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  int role_;
  bool strict_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fDataModelTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS EntityType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.EntityType) */ {
 public:
  inline EntityType() : EntityType(nullptr) {}
  virtual ~EntityType();

  EntityType(const EntityType& from);
  EntityType(EntityType&& from) noexcept
    : EntityType() {
    *this = ::std::move(from);
  }

  inline EntityType& operator=(const EntityType& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityType& operator=(EntityType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EntityType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityType* internal_default_instance() {
    return reinterpret_cast<const EntityType*>(
               &_EntityType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EntityType& a, EntityType& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityType* New() const final {
    return CreateMaybeMessage<EntityType>(nullptr);
  }

  EntityType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EntityType& from);
  void MergeFrom(const EntityType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EntityType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.EntityType";
  }
  protected:
  explicit EntityType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityFieldNumber = 1,
  };
  // .esriPBuffer.graph.NamedObjectType entity = 1;
  bool has_entity() const;
  private:
  bool _internal_has_entity() const;
  public:
  void clear_entity();
  const ::esriPBuffer::graph::NamedObjectType& entity() const;
  ::esriPBuffer::graph::NamedObjectType* release_entity();
  ::esriPBuffer::graph::NamedObjectType* mutable_entity();
  void set_allocated_entity(::esriPBuffer::graph::NamedObjectType* entity);
  private:
  const ::esriPBuffer::graph::NamedObjectType& _internal_entity() const;
  ::esriPBuffer::graph::NamedObjectType* _internal_mutable_entity();
  public:
  void unsafe_arena_set_allocated_entity(
      ::esriPBuffer::graph::NamedObjectType* entity);
  ::esriPBuffer::graph::NamedObjectType* unsafe_arena_release_entity();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.EntityType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::esriPBuffer::graph::NamedObjectType* entity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fDataModelTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS RelationshipType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.RelationshipType) */ {
 public:
  inline RelationshipType() : RelationshipType(nullptr) {}
  virtual ~RelationshipType();

  RelationshipType(const RelationshipType& from);
  RelationshipType(RelationshipType&& from) noexcept
    : RelationshipType() {
    *this = ::std::move(from);
  }

  inline RelationshipType& operator=(const RelationshipType& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelationshipType& operator=(RelationshipType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RelationshipType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelationshipType* internal_default_instance() {
    return reinterpret_cast<const RelationshipType*>(
               &_RelationshipType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RelationshipType& a, RelationshipType& b) {
    a.Swap(&b);
  }
  inline void Swap(RelationshipType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelationshipType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelationshipType* New() const final {
    return CreateMaybeMessage<RelationshipType>(nullptr);
  }

  RelationshipType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelationshipType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RelationshipType& from);
  void MergeFrom(const RelationshipType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RelationshipType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.RelationshipType";
  }
  protected:
  explicit RelationshipType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginEntityTypesFieldNumber = 1,
    kDestEntityTypesFieldNumber = 2,
    kRelationshipFieldNumber = 3,
    kStrictOriginFieldNumber = 4,
    kStrictDestFieldNumber = 5,
  };
  // repeated string origin_entity_types = 1;
  int origin_entity_types_size() const;
  private:
  int _internal_origin_entity_types_size() const;
  public:
  void clear_origin_entity_types();
  const std::string& origin_entity_types(int index) const;
  std::string* mutable_origin_entity_types(int index);
  void set_origin_entity_types(int index, const std::string& value);
  void set_origin_entity_types(int index, std::string&& value);
  void set_origin_entity_types(int index, const char* value);
  void set_origin_entity_types(int index, const char* value, size_t size);
  std::string* add_origin_entity_types();
  void add_origin_entity_types(const std::string& value);
  void add_origin_entity_types(std::string&& value);
  void add_origin_entity_types(const char* value);
  void add_origin_entity_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& origin_entity_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_origin_entity_types();
  private:
  const std::string& _internal_origin_entity_types(int index) const;
  std::string* _internal_add_origin_entity_types();
  public:

  // repeated string dest_entity_types = 2;
  int dest_entity_types_size() const;
  private:
  int _internal_dest_entity_types_size() const;
  public:
  void clear_dest_entity_types();
  const std::string& dest_entity_types(int index) const;
  std::string* mutable_dest_entity_types(int index);
  void set_dest_entity_types(int index, const std::string& value);
  void set_dest_entity_types(int index, std::string&& value);
  void set_dest_entity_types(int index, const char* value);
  void set_dest_entity_types(int index, const char* value, size_t size);
  std::string* add_dest_entity_types();
  void add_dest_entity_types(const std::string& value);
  void add_dest_entity_types(std::string&& value);
  void add_dest_entity_types(const char* value);
  void add_dest_entity_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dest_entity_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dest_entity_types();
  private:
  const std::string& _internal_dest_entity_types(int index) const;
  std::string* _internal_add_dest_entity_types();
  public:

  // .esriPBuffer.graph.NamedObjectType relationship = 3;
  bool has_relationship() const;
  private:
  bool _internal_has_relationship() const;
  public:
  void clear_relationship();
  const ::esriPBuffer::graph::NamedObjectType& relationship() const;
  ::esriPBuffer::graph::NamedObjectType* release_relationship();
  ::esriPBuffer::graph::NamedObjectType* mutable_relationship();
  void set_allocated_relationship(::esriPBuffer::graph::NamedObjectType* relationship);
  private:
  const ::esriPBuffer::graph::NamedObjectType& _internal_relationship() const;
  ::esriPBuffer::graph::NamedObjectType* _internal_mutable_relationship();
  public:
  void unsafe_arena_set_allocated_relationship(
      ::esriPBuffer::graph::NamedObjectType* relationship);
  ::esriPBuffer::graph::NamedObjectType* unsafe_arena_release_relationship();

  // bool strict_origin = 4;
  void clear_strict_origin();
  bool strict_origin() const;
  void set_strict_origin(bool value);
  private:
  bool _internal_strict_origin() const;
  void _internal_set_strict_origin(bool value);
  public:

  // bool strict_dest = 5;
  void clear_strict_dest();
  bool strict_dest() const;
  void set_strict_dest(bool value);
  private:
  bool _internal_strict_dest() const;
  void _internal_set_strict_dest(bool value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.RelationshipType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> origin_entity_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dest_entity_types_;
  ::esriPBuffer::graph::NamedObjectType* relationship_;
  bool strict_origin_;
  bool strict_dest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fDataModelTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS GraphProperty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphProperty) */ {
 public:
  inline GraphProperty() : GraphProperty(nullptr) {}
  virtual ~GraphProperty();

  GraphProperty(const GraphProperty& from);
  GraphProperty(GraphProperty&& from) noexcept
    : GraphProperty() {
    *this = ::std::move(from);
  }

  inline GraphProperty& operator=(const GraphProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphProperty& operator=(GraphProperty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphProperty* internal_default_instance() {
    return reinterpret_cast<const GraphProperty*>(
               &_GraphProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GraphProperty& a, GraphProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphProperty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphProperty* New() const final {
    return CreateMaybeMessage<GraphProperty>(nullptr);
  }

  GraphProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphProperty>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphProperty& from);
  void MergeFrom(const GraphProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphProperty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphProperty";
  }
  protected:
  explicit GraphProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultValueFieldNumber = 5,
    kNameFieldNumber = 1,
    kAliasFieldNumber = 2,
    kDomainFieldNumber = 11,
    kFieldTypeFieldNumber = 3,
    kGeometryTypeFieldNumber = 4,
    kNotNullableFieldNumber = 6,
    kNotEditableFieldNumber = 7,
    kNotVisibleFieldNumber = 8,
    kRequiredFieldNumber = 9,
    kIsSystemMaintainedFieldNumber = 10,
    kHasZFieldNumber = 13,
    kHasMFieldNumber = 14,
    kSearchableFieldNumber = 15,
  };
  // repeated .esriPBuffer.graph.PrimitiveValue defaultValue = 5;
  int defaultvalue_size() const;
  private:
  int _internal_defaultvalue_size() const;
  public:
  void clear_defaultvalue();
  ::esriPBuffer::graph::PrimitiveValue* mutable_defaultvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::PrimitiveValue >*
      mutable_defaultvalue();
  private:
  const ::esriPBuffer::graph::PrimitiveValue& _internal_defaultvalue(int index) const;
  ::esriPBuffer::graph::PrimitiveValue* _internal_add_defaultvalue();
  public:
  const ::esriPBuffer::graph::PrimitiveValue& defaultvalue(int index) const;
  ::esriPBuffer::graph::PrimitiveValue* add_defaultvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::PrimitiveValue >&
      defaultvalue() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string alias = 2;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // string domain = 11;
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // .esriPBuffer.EsriExtendedTypes.FieldType fieldType = 3;
  void clear_fieldtype();
  ::esriPBuffer::EsriExtendedTypes::FieldType fieldtype() const;
  void set_fieldtype(::esriPBuffer::EsriExtendedTypes::FieldType value);
  private:
  ::esriPBuffer::EsriExtendedTypes::FieldType _internal_fieldtype() const;
  void _internal_set_fieldtype(::esriPBuffer::EsriExtendedTypes::FieldType value);
  public:

  // .esriPBuffer.EsriTypes.GeometryType geometryType = 4;
  void clear_geometrytype();
  ::esriPBuffer::EsriTypes_GeometryType geometrytype() const;
  void set_geometrytype(::esriPBuffer::EsriTypes_GeometryType value);
  private:
  ::esriPBuffer::EsriTypes_GeometryType _internal_geometrytype() const;
  void _internal_set_geometrytype(::esriPBuffer::EsriTypes_GeometryType value);
  public:

  // bool not_nullable = 6;
  void clear_not_nullable();
  bool not_nullable() const;
  void set_not_nullable(bool value);
  private:
  bool _internal_not_nullable() const;
  void _internal_set_not_nullable(bool value);
  public:

  // bool not_editable = 7;
  void clear_not_editable();
  bool not_editable() const;
  void set_not_editable(bool value);
  private:
  bool _internal_not_editable() const;
  void _internal_set_not_editable(bool value);
  public:

  // bool not_visible = 8;
  void clear_not_visible();
  bool not_visible() const;
  void set_not_visible(bool value);
  private:
  bool _internal_not_visible() const;
  void _internal_set_not_visible(bool value);
  public:

  // bool required = 9;
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // bool isSystemMaintained = 10;
  void clear_issystemmaintained();
  bool issystemmaintained() const;
  void set_issystemmaintained(bool value);
  private:
  bool _internal_issystemmaintained() const;
  void _internal_set_issystemmaintained(bool value);
  public:

  // bool hasZ = 13;
  void clear_hasz();
  bool hasz() const;
  void set_hasz(bool value);
  private:
  bool _internal_hasz() const;
  void _internal_set_hasz(bool value);
  public:

  // bool hasM = 14;
  void clear_hasm();
  bool hasm() const;
  void set_hasm(bool value);
  private:
  bool _internal_hasm() const;
  void _internal_set_hasm(bool value);
  public:

  // bool searchable = 15;
  void clear_searchable();
  bool searchable() const;
  void set_searchable(bool value);
  private:
  bool _internal_searchable() const;
  void _internal_set_searchable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphProperty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::PrimitiveValue > defaultvalue_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  int fieldtype_;
  int geometrytype_;
  bool not_nullable_;
  bool not_editable_;
  bool not_visible_;
  bool required_;
  bool issystemmaintained_;
  bool hasz_;
  bool hasm_;
  bool searchable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fDataModelTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS GraphDocumentEntityTypeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphDocumentEntityTypeInfo) */ {
 public:
  inline GraphDocumentEntityTypeInfo() : GraphDocumentEntityTypeInfo(nullptr) {}
  virtual ~GraphDocumentEntityTypeInfo();

  GraphDocumentEntityTypeInfo(const GraphDocumentEntityTypeInfo& from);
  GraphDocumentEntityTypeInfo(GraphDocumentEntityTypeInfo&& from) noexcept
    : GraphDocumentEntityTypeInfo() {
    *this = ::std::move(from);
  }

  inline GraphDocumentEntityTypeInfo& operator=(const GraphDocumentEntityTypeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphDocumentEntityTypeInfo& operator=(GraphDocumentEntityTypeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphDocumentEntityTypeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphDocumentEntityTypeInfo* internal_default_instance() {
    return reinterpret_cast<const GraphDocumentEntityTypeInfo*>(
               &_GraphDocumentEntityTypeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GraphDocumentEntityTypeInfo& a, GraphDocumentEntityTypeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphDocumentEntityTypeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphDocumentEntityTypeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphDocumentEntityTypeInfo* New() const final {
    return CreateMaybeMessage<GraphDocumentEntityTypeInfo>(nullptr);
  }

  GraphDocumentEntityTypeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphDocumentEntityTypeInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphDocumentEntityTypeInfo& from);
  void MergeFrom(const GraphDocumentEntityTypeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphDocumentEntityTypeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphDocumentEntityTypeInfo";
  }
  protected:
  explicit GraphDocumentEntityTypeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamePropertyFieldNumber = 1,
    kTitlePropertyFieldNumber = 2,
    kUrlPropertyFieldNumber = 3,
    kTextPropertyFieldNumber = 4,
    kKeywordsPropertyFieldNumber = 5,
    kContentTypePropertyFieldNumber = 6,
    kMetadataPropertyFieldNumber = 7,
    kFileExtensionPropertyFieldNumber = 8,
  };
  // string name_property = 1;
  void clear_name_property();
  const std::string& name_property() const;
  void set_name_property(const std::string& value);
  void set_name_property(std::string&& value);
  void set_name_property(const char* value);
  void set_name_property(const char* value, size_t size);
  std::string* mutable_name_property();
  std::string* release_name_property();
  void set_allocated_name_property(std::string* name_property);
  private:
  const std::string& _internal_name_property() const;
  void _internal_set_name_property(const std::string& value);
  std::string* _internal_mutable_name_property();
  public:

  // string title_property = 2;
  void clear_title_property();
  const std::string& title_property() const;
  void set_title_property(const std::string& value);
  void set_title_property(std::string&& value);
  void set_title_property(const char* value);
  void set_title_property(const char* value, size_t size);
  std::string* mutable_title_property();
  std::string* release_title_property();
  void set_allocated_title_property(std::string* title_property);
  private:
  const std::string& _internal_title_property() const;
  void _internal_set_title_property(const std::string& value);
  std::string* _internal_mutable_title_property();
  public:

  // string url_property = 3;
  void clear_url_property();
  const std::string& url_property() const;
  void set_url_property(const std::string& value);
  void set_url_property(std::string&& value);
  void set_url_property(const char* value);
  void set_url_property(const char* value, size_t size);
  std::string* mutable_url_property();
  std::string* release_url_property();
  void set_allocated_url_property(std::string* url_property);
  private:
  const std::string& _internal_url_property() const;
  void _internal_set_url_property(const std::string& value);
  std::string* _internal_mutable_url_property();
  public:

  // string text_property = 4;
  void clear_text_property();
  const std::string& text_property() const;
  void set_text_property(const std::string& value);
  void set_text_property(std::string&& value);
  void set_text_property(const char* value);
  void set_text_property(const char* value, size_t size);
  std::string* mutable_text_property();
  std::string* release_text_property();
  void set_allocated_text_property(std::string* text_property);
  private:
  const std::string& _internal_text_property() const;
  void _internal_set_text_property(const std::string& value);
  std::string* _internal_mutable_text_property();
  public:

  // string keywords_property = 5;
  void clear_keywords_property();
  const std::string& keywords_property() const;
  void set_keywords_property(const std::string& value);
  void set_keywords_property(std::string&& value);
  void set_keywords_property(const char* value);
  void set_keywords_property(const char* value, size_t size);
  std::string* mutable_keywords_property();
  std::string* release_keywords_property();
  void set_allocated_keywords_property(std::string* keywords_property);
  private:
  const std::string& _internal_keywords_property() const;
  void _internal_set_keywords_property(const std::string& value);
  std::string* _internal_mutable_keywords_property();
  public:

  // string content_type_property = 6;
  void clear_content_type_property();
  const std::string& content_type_property() const;
  void set_content_type_property(const std::string& value);
  void set_content_type_property(std::string&& value);
  void set_content_type_property(const char* value);
  void set_content_type_property(const char* value, size_t size);
  std::string* mutable_content_type_property();
  std::string* release_content_type_property();
  void set_allocated_content_type_property(std::string* content_type_property);
  private:
  const std::string& _internal_content_type_property() const;
  void _internal_set_content_type_property(const std::string& value);
  std::string* _internal_mutable_content_type_property();
  public:

  // string metadata_property = 7;
  void clear_metadata_property();
  const std::string& metadata_property() const;
  void set_metadata_property(const std::string& value);
  void set_metadata_property(std::string&& value);
  void set_metadata_property(const char* value);
  void set_metadata_property(const char* value, size_t size);
  std::string* mutable_metadata_property();
  std::string* release_metadata_property();
  void set_allocated_metadata_property(std::string* metadata_property);
  private:
  const std::string& _internal_metadata_property() const;
  void _internal_set_metadata_property(const std::string& value);
  std::string* _internal_mutable_metadata_property();
  public:

  // string file_extension_property = 8;
  void clear_file_extension_property();
  const std::string& file_extension_property() const;
  void set_file_extension_property(const std::string& value);
  void set_file_extension_property(std::string&& value);
  void set_file_extension_property(const char* value);
  void set_file_extension_property(const char* value, size_t size);
  std::string* mutable_file_extension_property();
  std::string* release_file_extension_property();
  void set_allocated_file_extension_property(std::string* file_extension_property);
  private:
  const std::string& _internal_file_extension_property() const;
  void _internal_set_file_extension_property(const std::string& value);
  std::string* _internal_mutable_file_extension_property();
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphDocumentEntityTypeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keywords_property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_extension_property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fDataModelTypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NamedObjectType

// string name = 1;
inline void NamedObjectType::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NamedObjectType::name() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.NamedObjectType.name)
  return _internal_name();
}
inline void NamedObjectType::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.NamedObjectType.name)
}
inline std::string* NamedObjectType::mutable_name() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.NamedObjectType.name)
  return _internal_mutable_name();
}
inline const std::string& NamedObjectType::_internal_name() const {
  return name_.Get();
}
inline void NamedObjectType::_internal_set_name(const std::string& value) {
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NamedObjectType::set_name(std::string&& value) {
  
  name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.NamedObjectType.name)
}
inline void NamedObjectType::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.NamedObjectType.name)
}
inline void NamedObjectType::set_name(const char* value,
    size_t size) {
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.NamedObjectType.name)
}
inline std::string* NamedObjectType::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NamedObjectType::release_name() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.NamedObjectType.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NamedObjectType::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.NamedObjectType.name)
}

// string alias = 2;
inline void NamedObjectType::clear_alias() {
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NamedObjectType::alias() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.NamedObjectType.alias)
  return _internal_alias();
}
inline void NamedObjectType::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.NamedObjectType.alias)
}
inline std::string* NamedObjectType::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.NamedObjectType.alias)
  return _internal_mutable_alias();
}
inline const std::string& NamedObjectType::_internal_alias() const {
  return alias_.Get();
}
inline void NamedObjectType::_internal_set_alias(const std::string& value) {
  
  alias_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NamedObjectType::set_alias(std::string&& value) {
  
  alias_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.NamedObjectType.alias)
}
inline void NamedObjectType::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.NamedObjectType.alias)
}
inline void NamedObjectType::set_alias(const char* value,
    size_t size) {
  
  alias_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.NamedObjectType.alias)
}
inline std::string* NamedObjectType::_internal_mutable_alias() {
  
  return alias_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NamedObjectType::release_alias() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.NamedObjectType.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NamedObjectType::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.NamedObjectType.alias)
}

// .esriPBuffer.graph.esriGraphNamedObjectRole role = 4;
inline void NamedObjectType::clear_role() {
  role_ = 0;
}
inline ::esriPBuffer::graph::esriGraphNamedObjectRole NamedObjectType::_internal_role() const {
  return static_cast< ::esriPBuffer::graph::esriGraphNamedObjectRole >(role_);
}
inline ::esriPBuffer::graph::esriGraphNamedObjectRole NamedObjectType::role() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.NamedObjectType.role)
  return _internal_role();
}
inline void NamedObjectType::_internal_set_role(::esriPBuffer::graph::esriGraphNamedObjectRole value) {
  
  role_ = value;
}
inline void NamedObjectType::set_role(::esriPBuffer::graph::esriGraphNamedObjectRole value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.NamedObjectType.role)
}

// repeated .esriPBuffer.graph.GraphProperty properties = 5;
inline int NamedObjectType::_internal_properties_size() const {
  return properties_.size();
}
inline int NamedObjectType::properties_size() const {
  return _internal_properties_size();
}
inline void NamedObjectType::clear_properties() {
  properties_.Clear();
}
inline ::esriPBuffer::graph::GraphProperty* NamedObjectType::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.NamedObjectType.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GraphProperty >*
NamedObjectType::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.NamedObjectType.properties)
  return &properties_;
}
inline const ::esriPBuffer::graph::GraphProperty& NamedObjectType::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::esriPBuffer::graph::GraphProperty& NamedObjectType::properties(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.NamedObjectType.properties)
  return _internal_properties(index);
}
inline ::esriPBuffer::graph::GraphProperty* NamedObjectType::_internal_add_properties() {
  return properties_.Add();
}
inline ::esriPBuffer::graph::GraphProperty* NamedObjectType::add_properties() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.NamedObjectType.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GraphProperty >&
NamedObjectType::properties() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.NamedObjectType.properties)
  return properties_;
}

// repeated .esriPBuffer.EsriTypes.FieldIndex field_indexes = 6;
inline int NamedObjectType::_internal_field_indexes_size() const {
  return field_indexes_.size();
}
inline int NamedObjectType::field_indexes_size() const {
  return _internal_field_indexes_size();
}
inline ::esriPBuffer::EsriTypes_FieldIndex* NamedObjectType::mutable_field_indexes(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.NamedObjectType.field_indexes)
  return field_indexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_FieldIndex >*
NamedObjectType::mutable_field_indexes() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.NamedObjectType.field_indexes)
  return &field_indexes_;
}
inline const ::esriPBuffer::EsriTypes_FieldIndex& NamedObjectType::_internal_field_indexes(int index) const {
  return field_indexes_.Get(index);
}
inline const ::esriPBuffer::EsriTypes_FieldIndex& NamedObjectType::field_indexes(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.NamedObjectType.field_indexes)
  return _internal_field_indexes(index);
}
inline ::esriPBuffer::EsriTypes_FieldIndex* NamedObjectType::_internal_add_field_indexes() {
  return field_indexes_.Add();
}
inline ::esriPBuffer::EsriTypes_FieldIndex* NamedObjectType::add_field_indexes() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.NamedObjectType.field_indexes)
  return _internal_add_field_indexes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_FieldIndex >&
NamedObjectType::field_indexes() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.NamedObjectType.field_indexes)
  return field_indexes_;
}

// bool strict = 7;
inline void NamedObjectType::clear_strict() {
  strict_ = false;
}
inline bool NamedObjectType::_internal_strict() const {
  return strict_;
}
inline bool NamedObjectType::strict() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.NamedObjectType.strict)
  return _internal_strict();
}
inline void NamedObjectType::_internal_set_strict(bool value) {
  
  strict_ = value;
}
inline void NamedObjectType::set_strict(bool value) {
  _internal_set_strict(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.NamedObjectType.strict)
}

// -------------------------------------------------------------------

// EntityType

// .esriPBuffer.graph.NamedObjectType entity = 1;
inline bool EntityType::_internal_has_entity() const {
  return this != internal_default_instance() && entity_ != nullptr;
}
inline bool EntityType::has_entity() const {
  return _internal_has_entity();
}
inline void EntityType::clear_entity() {
  if (GetArena() == nullptr && entity_ != nullptr) {
    delete entity_;
  }
  entity_ = nullptr;
}
inline const ::esriPBuffer::graph::NamedObjectType& EntityType::_internal_entity() const {
  const ::esriPBuffer::graph::NamedObjectType* p = entity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::NamedObjectType*>(
      &::esriPBuffer::graph::_NamedObjectType_default_instance_);
}
inline const ::esriPBuffer::graph::NamedObjectType& EntityType::entity() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.EntityType.entity)
  return _internal_entity();
}
inline void EntityType::unsafe_arena_set_allocated_entity(
    ::esriPBuffer::graph::NamedObjectType* entity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_);
  }
  entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.EntityType.entity)
}
inline ::esriPBuffer::graph::NamedObjectType* EntityType::release_entity() {
  
  ::esriPBuffer::graph::NamedObjectType* temp = entity_;
  entity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::NamedObjectType* EntityType::unsafe_arena_release_entity() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.EntityType.entity)
  
  ::esriPBuffer::graph::NamedObjectType* temp = entity_;
  entity_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::NamedObjectType* EntityType::_internal_mutable_entity() {
  
  if (entity_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::NamedObjectType>(GetArena());
    entity_ = p;
  }
  return entity_;
}
inline ::esriPBuffer::graph::NamedObjectType* EntityType::mutable_entity() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.EntityType.entity)
  return _internal_mutable_entity();
}
inline void EntityType::set_allocated_entity(::esriPBuffer::graph::NamedObjectType* entity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete entity_;
  }
  if (entity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entity);
    if (message_arena != submessage_arena) {
      entity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    
  } else {
    
  }
  entity_ = entity;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.EntityType.entity)
}

// -------------------------------------------------------------------

// RelationshipType

// repeated string origin_entity_types = 1;
inline int RelationshipType::_internal_origin_entity_types_size() const {
  return origin_entity_types_.size();
}
inline int RelationshipType::origin_entity_types_size() const {
  return _internal_origin_entity_types_size();
}
inline void RelationshipType::clear_origin_entity_types() {
  origin_entity_types_.Clear();
}
inline std::string* RelationshipType::add_origin_entity_types() {
  // @@protoc_insertion_point(field_add_mutable:esriPBuffer.graph.RelationshipType.origin_entity_types)
  return _internal_add_origin_entity_types();
}
inline const std::string& RelationshipType::_internal_origin_entity_types(int index) const {
  return origin_entity_types_.Get(index);
}
inline const std::string& RelationshipType::origin_entity_types(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.RelationshipType.origin_entity_types)
  return _internal_origin_entity_types(index);
}
inline std::string* RelationshipType::mutable_origin_entity_types(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.RelationshipType.origin_entity_types)
  return origin_entity_types_.Mutable(index);
}
inline void RelationshipType::set_origin_entity_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.RelationshipType.origin_entity_types)
  origin_entity_types_.Mutable(index)->assign(value);
}
inline void RelationshipType::set_origin_entity_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.RelationshipType.origin_entity_types)
  origin_entity_types_.Mutable(index)->assign(std::move(value));
}
inline void RelationshipType::set_origin_entity_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  origin_entity_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.RelationshipType.origin_entity_types)
}
inline void RelationshipType::set_origin_entity_types(int index, const char* value, size_t size) {
  origin_entity_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.RelationshipType.origin_entity_types)
}
inline std::string* RelationshipType::_internal_add_origin_entity_types() {
  return origin_entity_types_.Add();
}
inline void RelationshipType::add_origin_entity_types(const std::string& value) {
  origin_entity_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.RelationshipType.origin_entity_types)
}
inline void RelationshipType::add_origin_entity_types(std::string&& value) {
  origin_entity_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.RelationshipType.origin_entity_types)
}
inline void RelationshipType::add_origin_entity_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  origin_entity_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:esriPBuffer.graph.RelationshipType.origin_entity_types)
}
inline void RelationshipType::add_origin_entity_types(const char* value, size_t size) {
  origin_entity_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:esriPBuffer.graph.RelationshipType.origin_entity_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RelationshipType::origin_entity_types() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.RelationshipType.origin_entity_types)
  return origin_entity_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RelationshipType::mutable_origin_entity_types() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.RelationshipType.origin_entity_types)
  return &origin_entity_types_;
}

// repeated string dest_entity_types = 2;
inline int RelationshipType::_internal_dest_entity_types_size() const {
  return dest_entity_types_.size();
}
inline int RelationshipType::dest_entity_types_size() const {
  return _internal_dest_entity_types_size();
}
inline void RelationshipType::clear_dest_entity_types() {
  dest_entity_types_.Clear();
}
inline std::string* RelationshipType::add_dest_entity_types() {
  // @@protoc_insertion_point(field_add_mutable:esriPBuffer.graph.RelationshipType.dest_entity_types)
  return _internal_add_dest_entity_types();
}
inline const std::string& RelationshipType::_internal_dest_entity_types(int index) const {
  return dest_entity_types_.Get(index);
}
inline const std::string& RelationshipType::dest_entity_types(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.RelationshipType.dest_entity_types)
  return _internal_dest_entity_types(index);
}
inline std::string* RelationshipType::mutable_dest_entity_types(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.RelationshipType.dest_entity_types)
  return dest_entity_types_.Mutable(index);
}
inline void RelationshipType::set_dest_entity_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.RelationshipType.dest_entity_types)
  dest_entity_types_.Mutable(index)->assign(value);
}
inline void RelationshipType::set_dest_entity_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.RelationshipType.dest_entity_types)
  dest_entity_types_.Mutable(index)->assign(std::move(value));
}
inline void RelationshipType::set_dest_entity_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dest_entity_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.RelationshipType.dest_entity_types)
}
inline void RelationshipType::set_dest_entity_types(int index, const char* value, size_t size) {
  dest_entity_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.RelationshipType.dest_entity_types)
}
inline std::string* RelationshipType::_internal_add_dest_entity_types() {
  return dest_entity_types_.Add();
}
inline void RelationshipType::add_dest_entity_types(const std::string& value) {
  dest_entity_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.RelationshipType.dest_entity_types)
}
inline void RelationshipType::add_dest_entity_types(std::string&& value) {
  dest_entity_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.RelationshipType.dest_entity_types)
}
inline void RelationshipType::add_dest_entity_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dest_entity_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:esriPBuffer.graph.RelationshipType.dest_entity_types)
}
inline void RelationshipType::add_dest_entity_types(const char* value, size_t size) {
  dest_entity_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:esriPBuffer.graph.RelationshipType.dest_entity_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RelationshipType::dest_entity_types() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.RelationshipType.dest_entity_types)
  return dest_entity_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RelationshipType::mutable_dest_entity_types() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.RelationshipType.dest_entity_types)
  return &dest_entity_types_;
}

// .esriPBuffer.graph.NamedObjectType relationship = 3;
inline bool RelationshipType::_internal_has_relationship() const {
  return this != internal_default_instance() && relationship_ != nullptr;
}
inline bool RelationshipType::has_relationship() const {
  return _internal_has_relationship();
}
inline void RelationshipType::clear_relationship() {
  if (GetArena() == nullptr && relationship_ != nullptr) {
    delete relationship_;
  }
  relationship_ = nullptr;
}
inline const ::esriPBuffer::graph::NamedObjectType& RelationshipType::_internal_relationship() const {
  const ::esriPBuffer::graph::NamedObjectType* p = relationship_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::NamedObjectType*>(
      &::esriPBuffer::graph::_NamedObjectType_default_instance_);
}
inline const ::esriPBuffer::graph::NamedObjectType& RelationshipType::relationship() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.RelationshipType.relationship)
  return _internal_relationship();
}
inline void RelationshipType::unsafe_arena_set_allocated_relationship(
    ::esriPBuffer::graph::NamedObjectType* relationship) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relationship_);
  }
  relationship_ = relationship;
  if (relationship) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.RelationshipType.relationship)
}
inline ::esriPBuffer::graph::NamedObjectType* RelationshipType::release_relationship() {
  
  ::esriPBuffer::graph::NamedObjectType* temp = relationship_;
  relationship_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::NamedObjectType* RelationshipType::unsafe_arena_release_relationship() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.RelationshipType.relationship)
  
  ::esriPBuffer::graph::NamedObjectType* temp = relationship_;
  relationship_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::NamedObjectType* RelationshipType::_internal_mutable_relationship() {
  
  if (relationship_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::NamedObjectType>(GetArena());
    relationship_ = p;
  }
  return relationship_;
}
inline ::esriPBuffer::graph::NamedObjectType* RelationshipType::mutable_relationship() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.RelationshipType.relationship)
  return _internal_mutable_relationship();
}
inline void RelationshipType::set_allocated_relationship(::esriPBuffer::graph::NamedObjectType* relationship) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete relationship_;
  }
  if (relationship) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(relationship);
    if (message_arena != submessage_arena) {
      relationship = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relationship, submessage_arena);
    }
    
  } else {
    
  }
  relationship_ = relationship;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.RelationshipType.relationship)
}

// bool strict_origin = 4;
inline void RelationshipType::clear_strict_origin() {
  strict_origin_ = false;
}
inline bool RelationshipType::_internal_strict_origin() const {
  return strict_origin_;
}
inline bool RelationshipType::strict_origin() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.RelationshipType.strict_origin)
  return _internal_strict_origin();
}
inline void RelationshipType::_internal_set_strict_origin(bool value) {
  
  strict_origin_ = value;
}
inline void RelationshipType::set_strict_origin(bool value) {
  _internal_set_strict_origin(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.RelationshipType.strict_origin)
}

// bool strict_dest = 5;
inline void RelationshipType::clear_strict_dest() {
  strict_dest_ = false;
}
inline bool RelationshipType::_internal_strict_dest() const {
  return strict_dest_;
}
inline bool RelationshipType::strict_dest() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.RelationshipType.strict_dest)
  return _internal_strict_dest();
}
inline void RelationshipType::_internal_set_strict_dest(bool value) {
  
  strict_dest_ = value;
}
inline void RelationshipType::set_strict_dest(bool value) {
  _internal_set_strict_dest(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.RelationshipType.strict_dest)
}

// -------------------------------------------------------------------

// GraphProperty

// string name = 1;
inline void GraphProperty::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphProperty::name() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphProperty.name)
  return _internal_name();
}
inline void GraphProperty::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphProperty.name)
}
inline std::string* GraphProperty::mutable_name() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphProperty.name)
  return _internal_mutable_name();
}
inline const std::string& GraphProperty::_internal_name() const {
  return name_.Get();
}
inline void GraphProperty::_internal_set_name(const std::string& value) {
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphProperty::set_name(std::string&& value) {
  
  name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphProperty.name)
}
inline void GraphProperty::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphProperty.name)
}
inline void GraphProperty::set_name(const char* value,
    size_t size) {
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphProperty.name)
}
inline std::string* GraphProperty::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphProperty::release_name() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphProperty.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphProperty::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphProperty.name)
}

// string alias = 2;
inline void GraphProperty::clear_alias() {
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphProperty::alias() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphProperty.alias)
  return _internal_alias();
}
inline void GraphProperty::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphProperty.alias)
}
inline std::string* GraphProperty::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphProperty.alias)
  return _internal_mutable_alias();
}
inline const std::string& GraphProperty::_internal_alias() const {
  return alias_.Get();
}
inline void GraphProperty::_internal_set_alias(const std::string& value) {
  
  alias_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphProperty::set_alias(std::string&& value) {
  
  alias_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphProperty.alias)
}
inline void GraphProperty::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphProperty.alias)
}
inline void GraphProperty::set_alias(const char* value,
    size_t size) {
  
  alias_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphProperty.alias)
}
inline std::string* GraphProperty::_internal_mutable_alias() {
  
  return alias_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphProperty::release_alias() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphProperty.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphProperty::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphProperty.alias)
}

// .esriPBuffer.EsriExtendedTypes.FieldType fieldType = 3;
inline void GraphProperty::clear_fieldtype() {
  fieldtype_ = 0;
}
inline ::esriPBuffer::EsriExtendedTypes::FieldType GraphProperty::_internal_fieldtype() const {
  return static_cast< ::esriPBuffer::EsriExtendedTypes::FieldType >(fieldtype_);
}
inline ::esriPBuffer::EsriExtendedTypes::FieldType GraphProperty::fieldtype() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphProperty.fieldType)
  return _internal_fieldtype();
}
inline void GraphProperty::_internal_set_fieldtype(::esriPBuffer::EsriExtendedTypes::FieldType value) {
  
  fieldtype_ = value;
}
inline void GraphProperty::set_fieldtype(::esriPBuffer::EsriExtendedTypes::FieldType value) {
  _internal_set_fieldtype(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphProperty.fieldType)
}

// .esriPBuffer.EsriTypes.GeometryType geometryType = 4;
inline void GraphProperty::clear_geometrytype() {
  geometrytype_ = 0;
}
inline ::esriPBuffer::EsriTypes_GeometryType GraphProperty::_internal_geometrytype() const {
  return static_cast< ::esriPBuffer::EsriTypes_GeometryType >(geometrytype_);
}
inline ::esriPBuffer::EsriTypes_GeometryType GraphProperty::geometrytype() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphProperty.geometryType)
  return _internal_geometrytype();
}
inline void GraphProperty::_internal_set_geometrytype(::esriPBuffer::EsriTypes_GeometryType value) {
  
  geometrytype_ = value;
}
inline void GraphProperty::set_geometrytype(::esriPBuffer::EsriTypes_GeometryType value) {
  _internal_set_geometrytype(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphProperty.geometryType)
}

// repeated .esriPBuffer.graph.PrimitiveValue defaultValue = 5;
inline int GraphProperty::_internal_defaultvalue_size() const {
  return defaultvalue_.size();
}
inline int GraphProperty::defaultvalue_size() const {
  return _internal_defaultvalue_size();
}
inline ::esriPBuffer::graph::PrimitiveValue* GraphProperty::mutable_defaultvalue(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphProperty.defaultValue)
  return defaultvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::PrimitiveValue >*
GraphProperty::mutable_defaultvalue() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.GraphProperty.defaultValue)
  return &defaultvalue_;
}
inline const ::esriPBuffer::graph::PrimitiveValue& GraphProperty::_internal_defaultvalue(int index) const {
  return defaultvalue_.Get(index);
}
inline const ::esriPBuffer::graph::PrimitiveValue& GraphProperty::defaultvalue(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphProperty.defaultValue)
  return _internal_defaultvalue(index);
}
inline ::esriPBuffer::graph::PrimitiveValue* GraphProperty::_internal_add_defaultvalue() {
  return defaultvalue_.Add();
}
inline ::esriPBuffer::graph::PrimitiveValue* GraphProperty::add_defaultvalue() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GraphProperty.defaultValue)
  return _internal_add_defaultvalue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::PrimitiveValue >&
GraphProperty::defaultvalue() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.GraphProperty.defaultValue)
  return defaultvalue_;
}

// bool not_nullable = 6;
inline void GraphProperty::clear_not_nullable() {
  not_nullable_ = false;
}
inline bool GraphProperty::_internal_not_nullable() const {
  return not_nullable_;
}
inline bool GraphProperty::not_nullable() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphProperty.not_nullable)
  return _internal_not_nullable();
}
inline void GraphProperty::_internal_set_not_nullable(bool value) {
  
  not_nullable_ = value;
}
inline void GraphProperty::set_not_nullable(bool value) {
  _internal_set_not_nullable(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphProperty.not_nullable)
}

// bool not_editable = 7;
inline void GraphProperty::clear_not_editable() {
  not_editable_ = false;
}
inline bool GraphProperty::_internal_not_editable() const {
  return not_editable_;
}
inline bool GraphProperty::not_editable() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphProperty.not_editable)
  return _internal_not_editable();
}
inline void GraphProperty::_internal_set_not_editable(bool value) {
  
  not_editable_ = value;
}
inline void GraphProperty::set_not_editable(bool value) {
  _internal_set_not_editable(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphProperty.not_editable)
}

// bool not_visible = 8;
inline void GraphProperty::clear_not_visible() {
  not_visible_ = false;
}
inline bool GraphProperty::_internal_not_visible() const {
  return not_visible_;
}
inline bool GraphProperty::not_visible() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphProperty.not_visible)
  return _internal_not_visible();
}
inline void GraphProperty::_internal_set_not_visible(bool value) {
  
  not_visible_ = value;
}
inline void GraphProperty::set_not_visible(bool value) {
  _internal_set_not_visible(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphProperty.not_visible)
}

// bool required = 9;
inline void GraphProperty::clear_required() {
  required_ = false;
}
inline bool GraphProperty::_internal_required() const {
  return required_;
}
inline bool GraphProperty::required() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphProperty.required)
  return _internal_required();
}
inline void GraphProperty::_internal_set_required(bool value) {
  
  required_ = value;
}
inline void GraphProperty::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphProperty.required)
}

// bool isSystemMaintained = 10;
inline void GraphProperty::clear_issystemmaintained() {
  issystemmaintained_ = false;
}
inline bool GraphProperty::_internal_issystemmaintained() const {
  return issystemmaintained_;
}
inline bool GraphProperty::issystemmaintained() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphProperty.isSystemMaintained)
  return _internal_issystemmaintained();
}
inline void GraphProperty::_internal_set_issystemmaintained(bool value) {
  
  issystemmaintained_ = value;
}
inline void GraphProperty::set_issystemmaintained(bool value) {
  _internal_set_issystemmaintained(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphProperty.isSystemMaintained)
}

// string domain = 11;
inline void GraphProperty::clear_domain() {
  domain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphProperty::domain() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphProperty.domain)
  return _internal_domain();
}
inline void GraphProperty::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphProperty.domain)
}
inline std::string* GraphProperty::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphProperty.domain)
  return _internal_mutable_domain();
}
inline const std::string& GraphProperty::_internal_domain() const {
  return domain_.Get();
}
inline void GraphProperty::_internal_set_domain(const std::string& value) {
  
  domain_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphProperty::set_domain(std::string&& value) {
  
  domain_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphProperty.domain)
}
inline void GraphProperty::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphProperty.domain)
}
inline void GraphProperty::set_domain(const char* value,
    size_t size) {
  
  domain_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphProperty.domain)
}
inline std::string* GraphProperty::_internal_mutable_domain() {
  
  return domain_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphProperty::release_domain() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphProperty.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphProperty::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphProperty.domain)
}

// bool hasZ = 13;
inline void GraphProperty::clear_hasz() {
  hasz_ = false;
}
inline bool GraphProperty::_internal_hasz() const {
  return hasz_;
}
inline bool GraphProperty::hasz() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphProperty.hasZ)
  return _internal_hasz();
}
inline void GraphProperty::_internal_set_hasz(bool value) {
  
  hasz_ = value;
}
inline void GraphProperty::set_hasz(bool value) {
  _internal_set_hasz(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphProperty.hasZ)
}

// bool hasM = 14;
inline void GraphProperty::clear_hasm() {
  hasm_ = false;
}
inline bool GraphProperty::_internal_hasm() const {
  return hasm_;
}
inline bool GraphProperty::hasm() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphProperty.hasM)
  return _internal_hasm();
}
inline void GraphProperty::_internal_set_hasm(bool value) {
  
  hasm_ = value;
}
inline void GraphProperty::set_hasm(bool value) {
  _internal_set_hasm(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphProperty.hasM)
}

// bool searchable = 15;
inline void GraphProperty::clear_searchable() {
  searchable_ = false;
}
inline bool GraphProperty::_internal_searchable() const {
  return searchable_;
}
inline bool GraphProperty::searchable() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphProperty.searchable)
  return _internal_searchable();
}
inline void GraphProperty::_internal_set_searchable(bool value) {
  
  searchable_ = value;
}
inline void GraphProperty::set_searchable(bool value) {
  _internal_set_searchable(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphProperty.searchable)
}

// -------------------------------------------------------------------

// GraphDocumentEntityTypeInfo

// string name_property = 1;
inline void GraphDocumentEntityTypeInfo::clear_name_property() {
  name_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphDocumentEntityTypeInfo::name_property() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDocumentEntityTypeInfo.name_property)
  return _internal_name_property();
}
inline void GraphDocumentEntityTypeInfo::set_name_property(const std::string& value) {
  _internal_set_name_property(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphDocumentEntityTypeInfo.name_property)
}
inline std::string* GraphDocumentEntityTypeInfo::mutable_name_property() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDocumentEntityTypeInfo.name_property)
  return _internal_mutable_name_property();
}
inline const std::string& GraphDocumentEntityTypeInfo::_internal_name_property() const {
  return name_property_.Get();
}
inline void GraphDocumentEntityTypeInfo::_internal_set_name_property(const std::string& value) {
  
  name_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphDocumentEntityTypeInfo::set_name_property(std::string&& value) {
  
  name_property_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphDocumentEntityTypeInfo.name_property)
}
inline void GraphDocumentEntityTypeInfo::set_name_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphDocumentEntityTypeInfo.name_property)
}
inline void GraphDocumentEntityTypeInfo::set_name_property(const char* value,
    size_t size) {
  
  name_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphDocumentEntityTypeInfo.name_property)
}
inline std::string* GraphDocumentEntityTypeInfo::_internal_mutable_name_property() {
  
  return name_property_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphDocumentEntityTypeInfo::release_name_property() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphDocumentEntityTypeInfo.name_property)
  return name_property_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphDocumentEntityTypeInfo::set_allocated_name_property(std::string* name_property) {
  if (name_property != nullptr) {
    
  } else {
    
  }
  name_property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_property,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphDocumentEntityTypeInfo.name_property)
}

// string title_property = 2;
inline void GraphDocumentEntityTypeInfo::clear_title_property() {
  title_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphDocumentEntityTypeInfo::title_property() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDocumentEntityTypeInfo.title_property)
  return _internal_title_property();
}
inline void GraphDocumentEntityTypeInfo::set_title_property(const std::string& value) {
  _internal_set_title_property(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphDocumentEntityTypeInfo.title_property)
}
inline std::string* GraphDocumentEntityTypeInfo::mutable_title_property() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDocumentEntityTypeInfo.title_property)
  return _internal_mutable_title_property();
}
inline const std::string& GraphDocumentEntityTypeInfo::_internal_title_property() const {
  return title_property_.Get();
}
inline void GraphDocumentEntityTypeInfo::_internal_set_title_property(const std::string& value) {
  
  title_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphDocumentEntityTypeInfo::set_title_property(std::string&& value) {
  
  title_property_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphDocumentEntityTypeInfo.title_property)
}
inline void GraphDocumentEntityTypeInfo::set_title_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphDocumentEntityTypeInfo.title_property)
}
inline void GraphDocumentEntityTypeInfo::set_title_property(const char* value,
    size_t size) {
  
  title_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphDocumentEntityTypeInfo.title_property)
}
inline std::string* GraphDocumentEntityTypeInfo::_internal_mutable_title_property() {
  
  return title_property_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphDocumentEntityTypeInfo::release_title_property() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphDocumentEntityTypeInfo.title_property)
  return title_property_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphDocumentEntityTypeInfo::set_allocated_title_property(std::string* title_property) {
  if (title_property != nullptr) {
    
  } else {
    
  }
  title_property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title_property,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphDocumentEntityTypeInfo.title_property)
}

// string url_property = 3;
inline void GraphDocumentEntityTypeInfo::clear_url_property() {
  url_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphDocumentEntityTypeInfo::url_property() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDocumentEntityTypeInfo.url_property)
  return _internal_url_property();
}
inline void GraphDocumentEntityTypeInfo::set_url_property(const std::string& value) {
  _internal_set_url_property(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphDocumentEntityTypeInfo.url_property)
}
inline std::string* GraphDocumentEntityTypeInfo::mutable_url_property() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDocumentEntityTypeInfo.url_property)
  return _internal_mutable_url_property();
}
inline const std::string& GraphDocumentEntityTypeInfo::_internal_url_property() const {
  return url_property_.Get();
}
inline void GraphDocumentEntityTypeInfo::_internal_set_url_property(const std::string& value) {
  
  url_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphDocumentEntityTypeInfo::set_url_property(std::string&& value) {
  
  url_property_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphDocumentEntityTypeInfo.url_property)
}
inline void GraphDocumentEntityTypeInfo::set_url_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphDocumentEntityTypeInfo.url_property)
}
inline void GraphDocumentEntityTypeInfo::set_url_property(const char* value,
    size_t size) {
  
  url_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphDocumentEntityTypeInfo.url_property)
}
inline std::string* GraphDocumentEntityTypeInfo::_internal_mutable_url_property() {
  
  return url_property_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphDocumentEntityTypeInfo::release_url_property() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphDocumentEntityTypeInfo.url_property)
  return url_property_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphDocumentEntityTypeInfo::set_allocated_url_property(std::string* url_property) {
  if (url_property != nullptr) {
    
  } else {
    
  }
  url_property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url_property,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphDocumentEntityTypeInfo.url_property)
}

// string text_property = 4;
inline void GraphDocumentEntityTypeInfo::clear_text_property() {
  text_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphDocumentEntityTypeInfo::text_property() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDocumentEntityTypeInfo.text_property)
  return _internal_text_property();
}
inline void GraphDocumentEntityTypeInfo::set_text_property(const std::string& value) {
  _internal_set_text_property(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphDocumentEntityTypeInfo.text_property)
}
inline std::string* GraphDocumentEntityTypeInfo::mutable_text_property() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDocumentEntityTypeInfo.text_property)
  return _internal_mutable_text_property();
}
inline const std::string& GraphDocumentEntityTypeInfo::_internal_text_property() const {
  return text_property_.Get();
}
inline void GraphDocumentEntityTypeInfo::_internal_set_text_property(const std::string& value) {
  
  text_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphDocumentEntityTypeInfo::set_text_property(std::string&& value) {
  
  text_property_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphDocumentEntityTypeInfo.text_property)
}
inline void GraphDocumentEntityTypeInfo::set_text_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphDocumentEntityTypeInfo.text_property)
}
inline void GraphDocumentEntityTypeInfo::set_text_property(const char* value,
    size_t size) {
  
  text_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphDocumentEntityTypeInfo.text_property)
}
inline std::string* GraphDocumentEntityTypeInfo::_internal_mutable_text_property() {
  
  return text_property_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphDocumentEntityTypeInfo::release_text_property() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphDocumentEntityTypeInfo.text_property)
  return text_property_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphDocumentEntityTypeInfo::set_allocated_text_property(std::string* text_property) {
  if (text_property != nullptr) {
    
  } else {
    
  }
  text_property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text_property,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphDocumentEntityTypeInfo.text_property)
}

// string keywords_property = 5;
inline void GraphDocumentEntityTypeInfo::clear_keywords_property() {
  keywords_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphDocumentEntityTypeInfo::keywords_property() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDocumentEntityTypeInfo.keywords_property)
  return _internal_keywords_property();
}
inline void GraphDocumentEntityTypeInfo::set_keywords_property(const std::string& value) {
  _internal_set_keywords_property(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphDocumentEntityTypeInfo.keywords_property)
}
inline std::string* GraphDocumentEntityTypeInfo::mutable_keywords_property() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDocumentEntityTypeInfo.keywords_property)
  return _internal_mutable_keywords_property();
}
inline const std::string& GraphDocumentEntityTypeInfo::_internal_keywords_property() const {
  return keywords_property_.Get();
}
inline void GraphDocumentEntityTypeInfo::_internal_set_keywords_property(const std::string& value) {
  
  keywords_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphDocumentEntityTypeInfo::set_keywords_property(std::string&& value) {
  
  keywords_property_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphDocumentEntityTypeInfo.keywords_property)
}
inline void GraphDocumentEntityTypeInfo::set_keywords_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keywords_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphDocumentEntityTypeInfo.keywords_property)
}
inline void GraphDocumentEntityTypeInfo::set_keywords_property(const char* value,
    size_t size) {
  
  keywords_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphDocumentEntityTypeInfo.keywords_property)
}
inline std::string* GraphDocumentEntityTypeInfo::_internal_mutable_keywords_property() {
  
  return keywords_property_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphDocumentEntityTypeInfo::release_keywords_property() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphDocumentEntityTypeInfo.keywords_property)
  return keywords_property_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphDocumentEntityTypeInfo::set_allocated_keywords_property(std::string* keywords_property) {
  if (keywords_property != nullptr) {
    
  } else {
    
  }
  keywords_property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keywords_property,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphDocumentEntityTypeInfo.keywords_property)
}

// string content_type_property = 6;
inline void GraphDocumentEntityTypeInfo::clear_content_type_property() {
  content_type_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphDocumentEntityTypeInfo::content_type_property() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDocumentEntityTypeInfo.content_type_property)
  return _internal_content_type_property();
}
inline void GraphDocumentEntityTypeInfo::set_content_type_property(const std::string& value) {
  _internal_set_content_type_property(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphDocumentEntityTypeInfo.content_type_property)
}
inline std::string* GraphDocumentEntityTypeInfo::mutable_content_type_property() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDocumentEntityTypeInfo.content_type_property)
  return _internal_mutable_content_type_property();
}
inline const std::string& GraphDocumentEntityTypeInfo::_internal_content_type_property() const {
  return content_type_property_.Get();
}
inline void GraphDocumentEntityTypeInfo::_internal_set_content_type_property(const std::string& value) {
  
  content_type_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphDocumentEntityTypeInfo::set_content_type_property(std::string&& value) {
  
  content_type_property_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphDocumentEntityTypeInfo.content_type_property)
}
inline void GraphDocumentEntityTypeInfo::set_content_type_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_type_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphDocumentEntityTypeInfo.content_type_property)
}
inline void GraphDocumentEntityTypeInfo::set_content_type_property(const char* value,
    size_t size) {
  
  content_type_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphDocumentEntityTypeInfo.content_type_property)
}
inline std::string* GraphDocumentEntityTypeInfo::_internal_mutable_content_type_property() {
  
  return content_type_property_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphDocumentEntityTypeInfo::release_content_type_property() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphDocumentEntityTypeInfo.content_type_property)
  return content_type_property_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphDocumentEntityTypeInfo::set_allocated_content_type_property(std::string* content_type_property) {
  if (content_type_property != nullptr) {
    
  } else {
    
  }
  content_type_property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_type_property,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphDocumentEntityTypeInfo.content_type_property)
}

// string metadata_property = 7;
inline void GraphDocumentEntityTypeInfo::clear_metadata_property() {
  metadata_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphDocumentEntityTypeInfo::metadata_property() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDocumentEntityTypeInfo.metadata_property)
  return _internal_metadata_property();
}
inline void GraphDocumentEntityTypeInfo::set_metadata_property(const std::string& value) {
  _internal_set_metadata_property(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphDocumentEntityTypeInfo.metadata_property)
}
inline std::string* GraphDocumentEntityTypeInfo::mutable_metadata_property() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDocumentEntityTypeInfo.metadata_property)
  return _internal_mutable_metadata_property();
}
inline const std::string& GraphDocumentEntityTypeInfo::_internal_metadata_property() const {
  return metadata_property_.Get();
}
inline void GraphDocumentEntityTypeInfo::_internal_set_metadata_property(const std::string& value) {
  
  metadata_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphDocumentEntityTypeInfo::set_metadata_property(std::string&& value) {
  
  metadata_property_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphDocumentEntityTypeInfo.metadata_property)
}
inline void GraphDocumentEntityTypeInfo::set_metadata_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphDocumentEntityTypeInfo.metadata_property)
}
inline void GraphDocumentEntityTypeInfo::set_metadata_property(const char* value,
    size_t size) {
  
  metadata_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphDocumentEntityTypeInfo.metadata_property)
}
inline std::string* GraphDocumentEntityTypeInfo::_internal_mutable_metadata_property() {
  
  return metadata_property_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphDocumentEntityTypeInfo::release_metadata_property() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphDocumentEntityTypeInfo.metadata_property)
  return metadata_property_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphDocumentEntityTypeInfo::set_allocated_metadata_property(std::string* metadata_property) {
  if (metadata_property != nullptr) {
    
  } else {
    
  }
  metadata_property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata_property,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphDocumentEntityTypeInfo.metadata_property)
}

// string file_extension_property = 8;
inline void GraphDocumentEntityTypeInfo::clear_file_extension_property() {
  file_extension_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphDocumentEntityTypeInfo::file_extension_property() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDocumentEntityTypeInfo.file_extension_property)
  return _internal_file_extension_property();
}
inline void GraphDocumentEntityTypeInfo::set_file_extension_property(const std::string& value) {
  _internal_set_file_extension_property(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphDocumentEntityTypeInfo.file_extension_property)
}
inline std::string* GraphDocumentEntityTypeInfo::mutable_file_extension_property() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDocumentEntityTypeInfo.file_extension_property)
  return _internal_mutable_file_extension_property();
}
inline const std::string& GraphDocumentEntityTypeInfo::_internal_file_extension_property() const {
  return file_extension_property_.Get();
}
inline void GraphDocumentEntityTypeInfo::_internal_set_file_extension_property(const std::string& value) {
  
  file_extension_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphDocumentEntityTypeInfo::set_file_extension_property(std::string&& value) {
  
  file_extension_property_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphDocumentEntityTypeInfo.file_extension_property)
}
inline void GraphDocumentEntityTypeInfo::set_file_extension_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_extension_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphDocumentEntityTypeInfo.file_extension_property)
}
inline void GraphDocumentEntityTypeInfo::set_file_extension_property(const char* value,
    size_t size) {
  
  file_extension_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphDocumentEntityTypeInfo.file_extension_property)
}
inline std::string* GraphDocumentEntityTypeInfo::_internal_mutable_file_extension_property() {
  
  return file_extension_property_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphDocumentEntityTypeInfo::release_file_extension_property() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphDocumentEntityTypeInfo.file_extension_property)
  return file_extension_property_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphDocumentEntityTypeInfo::set_allocated_file_extension_property(std::string* file_extension_property) {
  if (file_extension_property != nullptr) {
    
  } else {
    
  }
  file_extension_property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_extension_property,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphDocumentEntityTypeInfo.file_extension_property)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace esriPBuffer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::esriPBuffer::graph::esriGraphNamedObjectRole> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fDataModelTypes_2eproto
