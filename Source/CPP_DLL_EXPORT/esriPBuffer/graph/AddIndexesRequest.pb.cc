// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/AddIndexesRequest.proto

#include "esriPBuffer/graph/AddIndexesRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fEsriTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EsriTypes_FieldIndex_esriPBuffer_2fEsriTypes_2eproto;
namespace esriPBuffer {
namespace graph {
class GraphPropertyIndexAddsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphPropertyIndexAddsRequest> _instance;
} _GraphPropertyIndexAddsRequest_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
static void InitDefaultsscc_info_GraphPropertyIndexAddsRequest_esriPBuffer_2fgraph_2fAddIndexesRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphPropertyIndexAddsRequest_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphPropertyIndexAddsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GraphPropertyIndexAddsRequest::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphPropertyIndexAddsRequest_esriPBuffer_2fgraph_2fAddIndexesRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphPropertyIndexAddsRequest_esriPBuffer_2fgraph_2fAddIndexesRequest_2eproto}, {
      &scc_info_EsriTypes_FieldIndex_esriPBuffer_2fEsriTypes_2eproto.base,}};

namespace esriPBuffer {
namespace graph {

// ===================================================================

void GraphPropertyIndexAddsRequest::InitAsDefaultInstance() {
}
class GraphPropertyIndexAddsRequest::_Internal {
 public:
};

void GraphPropertyIndexAddsRequest::clear_field_indexes() {
  field_indexes_.Clear();
}
GraphPropertyIndexAddsRequest::GraphPropertyIndexAddsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  field_indexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GraphPropertyIndexAddsRequest)
}
GraphPropertyIndexAddsRequest::GraphPropertyIndexAddsRequest(const GraphPropertyIndexAddsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      field_indexes_(from.field_indexes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GraphPropertyIndexAddsRequest)
}

void GraphPropertyIndexAddsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphPropertyIndexAddsRequest_esriPBuffer_2fgraph_2fAddIndexesRequest_2eproto.base);
}

GraphPropertyIndexAddsRequest::~GraphPropertyIndexAddsRequest() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GraphPropertyIndexAddsRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GraphPropertyIndexAddsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GraphPropertyIndexAddsRequest::ArenaDtor(void* object) {
  GraphPropertyIndexAddsRequest* _this = reinterpret_cast< GraphPropertyIndexAddsRequest* >(object);
  (void)_this;
}
void GraphPropertyIndexAddsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphPropertyIndexAddsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphPropertyIndexAddsRequest& GraphPropertyIndexAddsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphPropertyIndexAddsRequest_esriPBuffer_2fgraph_2fAddIndexesRequest_2eproto.base);
  return *internal_default_instance();
}


void GraphPropertyIndexAddsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GraphPropertyIndexAddsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_indexes_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GraphPropertyIndexAddsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .esriPBuffer.EsriTypes.FieldIndex field_indexes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_indexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphPropertyIndexAddsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GraphPropertyIndexAddsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .esriPBuffer.EsriTypes.FieldIndex field_indexes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_indexes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_field_indexes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GraphPropertyIndexAddsRequest)
  return target;
}

size_t GraphPropertyIndexAddsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GraphPropertyIndexAddsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .esriPBuffer.EsriTypes.FieldIndex field_indexes = 1;
  total_size += 1UL * this->_internal_field_indexes_size();
  for (const auto& msg : this->field_indexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphPropertyIndexAddsRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphPropertyIndexAddsRequest*>(
      &from));
}

void GraphPropertyIndexAddsRequest::MergeFrom(const GraphPropertyIndexAddsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GraphPropertyIndexAddsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_indexes_.MergeFrom(from.field_indexes_);
}

void GraphPropertyIndexAddsRequest::CopyFrom(const GraphPropertyIndexAddsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GraphPropertyIndexAddsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphPropertyIndexAddsRequest::IsInitialized() const {
  return true;
}

void GraphPropertyIndexAddsRequest::InternalSwap(GraphPropertyIndexAddsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  field_indexes_.InternalSwap(&other->field_indexes_);
}

std::string GraphPropertyIndexAddsRequest::GetTypeName() const {
  return "esriPBuffer.graph.GraphPropertyIndexAddsRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphPropertyIndexAddsRequest* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphPropertyIndexAddsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphPropertyIndexAddsRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
