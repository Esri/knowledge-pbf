// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/AddNamedTypesRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fAddNamedTypesRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fAddNamedTypesRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "esriPBuffer/graph/DataModelTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fAddNamedTypesRequest_2eproto EXT_CLASS
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct EXT_CLASS TableStruct_esriPBuffer_2fgraph_2fAddNamedTypesRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace esriPBuffer {
namespace graph {
class GraphNamedObjectTypeAddsRequest;
class GraphNamedObjectTypeAddsRequestDefaultTypeInternal;
EXT_CLASS extern GraphNamedObjectTypeAddsRequestDefaultTypeInternal _GraphNamedObjectTypeAddsRequest_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> EXT_CLASS ::esriPBuffer::graph::GraphNamedObjectTypeAddsRequest* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphNamedObjectTypeAddsRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esriPBuffer {
namespace graph {

// ===================================================================

class EXT_CLASS GraphNamedObjectTypeAddsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphNamedObjectTypeAddsRequest) */ {
 public:
  inline GraphNamedObjectTypeAddsRequest() : GraphNamedObjectTypeAddsRequest(nullptr) {}
  virtual ~GraphNamedObjectTypeAddsRequest();

  GraphNamedObjectTypeAddsRequest(const GraphNamedObjectTypeAddsRequest& from);
  GraphNamedObjectTypeAddsRequest(GraphNamedObjectTypeAddsRequest&& from) noexcept
    : GraphNamedObjectTypeAddsRequest() {
    *this = ::std::move(from);
  }

  inline GraphNamedObjectTypeAddsRequest& operator=(const GraphNamedObjectTypeAddsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphNamedObjectTypeAddsRequest& operator=(GraphNamedObjectTypeAddsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphNamedObjectTypeAddsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphNamedObjectTypeAddsRequest* internal_default_instance() {
    return reinterpret_cast<const GraphNamedObjectTypeAddsRequest*>(
               &_GraphNamedObjectTypeAddsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GraphNamedObjectTypeAddsRequest& a, GraphNamedObjectTypeAddsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphNamedObjectTypeAddsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphNamedObjectTypeAddsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphNamedObjectTypeAddsRequest* New() const final {
    return CreateMaybeMessage<GraphNamedObjectTypeAddsRequest>(nullptr);
  }

  GraphNamedObjectTypeAddsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphNamedObjectTypeAddsRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphNamedObjectTypeAddsRequest& from);
  void MergeFrom(const GraphNamedObjectTypeAddsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphNamedObjectTypeAddsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphNamedObjectTypeAddsRequest";
  }
  protected:
  explicit GraphNamedObjectTypeAddsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityTypesFieldNumber = 1,
    kRelationshipTypesFieldNumber = 2,
  };
  // repeated .esriPBuffer.graph.EntityType entity_types = 1;
  int entity_types_size() const;
  private:
  int _internal_entity_types_size() const;
  public:
  void clear_entity_types();
  ::esriPBuffer::graph::EntityType* mutable_entity_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::EntityType >*
      mutable_entity_types();
  private:
  const ::esriPBuffer::graph::EntityType& _internal_entity_types(int index) const;
  ::esriPBuffer::graph::EntityType* _internal_add_entity_types();
  public:
  const ::esriPBuffer::graph::EntityType& entity_types(int index) const;
  ::esriPBuffer::graph::EntityType* add_entity_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::EntityType >&
      entity_types() const;

  // repeated .esriPBuffer.graph.RelationshipType relationship_types = 2;
  int relationship_types_size() const;
  private:
  int _internal_relationship_types_size() const;
  public:
  void clear_relationship_types();
  ::esriPBuffer::graph::RelationshipType* mutable_relationship_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::RelationshipType >*
      mutable_relationship_types();
  private:
  const ::esriPBuffer::graph::RelationshipType& _internal_relationship_types(int index) const;
  ::esriPBuffer::graph::RelationshipType* _internal_add_relationship_types();
  public:
  const ::esriPBuffer::graph::RelationshipType& relationship_types(int index) const;
  ::esriPBuffer::graph::RelationshipType* add_relationship_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::RelationshipType >&
      relationship_types() const;

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphNamedObjectTypeAddsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::EntityType > entity_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::RelationshipType > relationship_types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fAddNamedTypesRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GraphNamedObjectTypeAddsRequest

// repeated .esriPBuffer.graph.EntityType entity_types = 1;
inline int GraphNamedObjectTypeAddsRequest::_internal_entity_types_size() const {
  return entity_types_.size();
}
inline int GraphNamedObjectTypeAddsRequest::entity_types_size() const {
  return _internal_entity_types_size();
}
inline ::esriPBuffer::graph::EntityType* GraphNamedObjectTypeAddsRequest::mutable_entity_types(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphNamedObjectTypeAddsRequest.entity_types)
  return entity_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::EntityType >*
GraphNamedObjectTypeAddsRequest::mutable_entity_types() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.GraphNamedObjectTypeAddsRequest.entity_types)
  return &entity_types_;
}
inline const ::esriPBuffer::graph::EntityType& GraphNamedObjectTypeAddsRequest::_internal_entity_types(int index) const {
  return entity_types_.Get(index);
}
inline const ::esriPBuffer::graph::EntityType& GraphNamedObjectTypeAddsRequest::entity_types(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphNamedObjectTypeAddsRequest.entity_types)
  return _internal_entity_types(index);
}
inline ::esriPBuffer::graph::EntityType* GraphNamedObjectTypeAddsRequest::_internal_add_entity_types() {
  return entity_types_.Add();
}
inline ::esriPBuffer::graph::EntityType* GraphNamedObjectTypeAddsRequest::add_entity_types() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GraphNamedObjectTypeAddsRequest.entity_types)
  return _internal_add_entity_types();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::EntityType >&
GraphNamedObjectTypeAddsRequest::entity_types() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.GraphNamedObjectTypeAddsRequest.entity_types)
  return entity_types_;
}

// repeated .esriPBuffer.graph.RelationshipType relationship_types = 2;
inline int GraphNamedObjectTypeAddsRequest::_internal_relationship_types_size() const {
  return relationship_types_.size();
}
inline int GraphNamedObjectTypeAddsRequest::relationship_types_size() const {
  return _internal_relationship_types_size();
}
inline ::esriPBuffer::graph::RelationshipType* GraphNamedObjectTypeAddsRequest::mutable_relationship_types(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphNamedObjectTypeAddsRequest.relationship_types)
  return relationship_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::RelationshipType >*
GraphNamedObjectTypeAddsRequest::mutable_relationship_types() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.GraphNamedObjectTypeAddsRequest.relationship_types)
  return &relationship_types_;
}
inline const ::esriPBuffer::graph::RelationshipType& GraphNamedObjectTypeAddsRequest::_internal_relationship_types(int index) const {
  return relationship_types_.Get(index);
}
inline const ::esriPBuffer::graph::RelationshipType& GraphNamedObjectTypeAddsRequest::relationship_types(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphNamedObjectTypeAddsRequest.relationship_types)
  return _internal_relationship_types(index);
}
inline ::esriPBuffer::graph::RelationshipType* GraphNamedObjectTypeAddsRequest::_internal_add_relationship_types() {
  return relationship_types_.Add();
}
inline ::esriPBuffer::graph::RelationshipType* GraphNamedObjectTypeAddsRequest::add_relationship_types() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GraphNamedObjectTypeAddsRequest.relationship_types)
  return _internal_add_relationship_types();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::RelationshipType >&
GraphNamedObjectTypeAddsRequest::relationship_types() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.GraphNamedObjectTypeAddsRequest.relationship_types)
  return relationship_types_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace esriPBuffer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fAddNamedTypesRequest_2eproto
