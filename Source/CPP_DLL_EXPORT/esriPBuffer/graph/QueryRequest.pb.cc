// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/QueryRequest.proto

#include "esriPBuffer/graph/QueryRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fEsriTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EsriTypes_DatumTransformation_esriPBuffer_2fEsriTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fEsriTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EsriTypes_SpatialReference_esriPBuffer_2fEsriTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fQueryRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphQueryRequest_ParametersEntry_DoNotUse_esriPBuffer_2fgraph_2fQueryRequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuantizationParameters_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transform_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
namespace esriPBuffer {
namespace graph {
class GraphQueryRequest_ParametersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphQueryRequest_ParametersEntry_DoNotUse> _instance;
} _GraphQueryRequest_ParametersEntry_DoNotUse_default_instance_;
class GraphQueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphQueryRequest> _instance;
} _GraphQueryRequest_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
static void InitDefaultsscc_info_GraphQueryRequest_esriPBuffer_2fgraph_2fQueryRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphQueryRequest_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphQueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GraphQueryRequest::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_GraphQueryRequest_esriPBuffer_2fgraph_2fQueryRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_GraphQueryRequest_esriPBuffer_2fgraph_2fQueryRequest_2eproto}, {
      &scc_info_GraphQueryRequest_ParametersEntry_DoNotUse_esriPBuffer_2fgraph_2fQueryRequest_2eproto.base,
      &scc_info_EsriTypes_SpatialReference_esriPBuffer_2fEsriTypes_2eproto.base,
      &scc_info_EsriTypes_DatumTransformation_esriPBuffer_2fEsriTypes_2eproto.base,
      &scc_info_QuantizationParameters_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,
      &scc_info_Transform_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,}};

static void InitDefaultsscc_info_GraphQueryRequest_ParametersEntry_DoNotUse_esriPBuffer_2fgraph_2fQueryRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphQueryRequest_ParametersEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphQueryRequest_ParametersEntry_DoNotUse();
  }
  ::esriPBuffer::graph::GraphQueryRequest_ParametersEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphQueryRequest_ParametersEntry_DoNotUse_esriPBuffer_2fgraph_2fQueryRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphQueryRequest_ParametersEntry_DoNotUse_esriPBuffer_2fgraph_2fQueryRequest_2eproto}, {
      &scc_info_AnyValue_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,}};

namespace esriPBuffer {
namespace graph {

// ===================================================================

GraphQueryRequest_ParametersEntry_DoNotUse::GraphQueryRequest_ParametersEntry_DoNotUse() {}
GraphQueryRequest_ParametersEntry_DoNotUse::GraphQueryRequest_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GraphQueryRequest_ParametersEntry_DoNotUse::MergeFrom(const GraphQueryRequest_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void GraphQueryRequest::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_GraphQueryRequest_default_instance_._instance.get_mutable()->out_sr_ = const_cast< ::esriPBuffer::EsriTypes_SpatialReference*>(
      ::esriPBuffer::EsriTypes_SpatialReference::internal_default_instance());
  ::esriPBuffer::graph::_GraphQueryRequest_default_instance_._instance.get_mutable()->datum_transformation_ = const_cast< ::esriPBuffer::EsriTypes_DatumTransformation*>(
      ::esriPBuffer::EsriTypes_DatumTransformation::internal_default_instance());
  ::esriPBuffer::graph::_GraphQueryRequest_default_instance_._instance.get_mutable()->quantization_parameters_ = const_cast< ::esriPBuffer::graph::QuantizationParameters*>(
      ::esriPBuffer::graph::QuantizationParameters::internal_default_instance());
  ::esriPBuffer::graph::_GraphQueryRequest_default_instance_._instance.get_mutable()->input_transform_ = const_cast< ::esriPBuffer::graph::Transform*>(
      ::esriPBuffer::graph::Transform::internal_default_instance());
}
class GraphQueryRequest::_Internal {
 public:
  static const ::esriPBuffer::EsriTypes_SpatialReference& out_sr(const GraphQueryRequest* msg);
  static const ::esriPBuffer::EsriTypes_DatumTransformation& datum_transformation(const GraphQueryRequest* msg);
  static const ::esriPBuffer::graph::QuantizationParameters& quantization_parameters(const GraphQueryRequest* msg);
  static const ::esriPBuffer::graph::Transform& input_transform(const GraphQueryRequest* msg);
};

const ::esriPBuffer::EsriTypes_SpatialReference&
GraphQueryRequest::_Internal::out_sr(const GraphQueryRequest* msg) {
  return *msg->out_sr_;
}
const ::esriPBuffer::EsriTypes_DatumTransformation&
GraphQueryRequest::_Internal::datum_transformation(const GraphQueryRequest* msg) {
  return *msg->datum_transformation_;
}
const ::esriPBuffer::graph::QuantizationParameters&
GraphQueryRequest::_Internal::quantization_parameters(const GraphQueryRequest* msg) {
  return *msg->quantization_parameters_;
}
const ::esriPBuffer::graph::Transform&
GraphQueryRequest::_Internal::input_transform(const GraphQueryRequest* msg) {
  return *msg->input_transform_;
}
void GraphQueryRequest::clear_parameters() {
  parameters_.Clear();
}
void GraphQueryRequest::clear_out_sr() {
  if (GetArena() == nullptr && out_sr_ != nullptr) {
    delete out_sr_;
  }
  out_sr_ = nullptr;
}
void GraphQueryRequest::clear_datum_transformation() {
  if (GetArena() == nullptr && datum_transformation_ != nullptr) {
    delete datum_transformation_;
  }
  datum_transformation_ = nullptr;
}
void GraphQueryRequest::clear_quantization_parameters() {
  if (GetArena() == nullptr && quantization_parameters_ != nullptr) {
    delete quantization_parameters_;
  }
  quantization_parameters_ = nullptr;
}
void GraphQueryRequest::clear_input_transform() {
  if (GetArena() == nullptr && input_transform_ != nullptr) {
    delete input_transform_;
  }
  input_transform_ = nullptr;
}
GraphQueryRequest::GraphQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GraphQueryRequest)
}
GraphQueryRequest::GraphQueryRequest(const GraphQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  parameters_.MergeFrom(from.parameters_);
  open_cypher_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_open_cypher_query().empty()) {
    open_cypher_query_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_open_cypher_query(),
      GetArena());
  }
  if (from._internal_has_out_sr()) {
    out_sr_ = new ::esriPBuffer::EsriTypes_SpatialReference(*from.out_sr_);
  } else {
    out_sr_ = nullptr;
  }
  if (from._internal_has_datum_transformation()) {
    datum_transformation_ = new ::esriPBuffer::EsriTypes_DatumTransformation(*from.datum_transformation_);
  } else {
    datum_transformation_ = nullptr;
  }
  if (from._internal_has_quantization_parameters()) {
    quantization_parameters_ = new ::esriPBuffer::graph::QuantizationParameters(*from.quantization_parameters_);
  } else {
    quantization_parameters_ = nullptr;
  }
  if (from._internal_has_input_transform()) {
    input_transform_ = new ::esriPBuffer::graph::Transform(*from.input_transform_);
  } else {
    input_transform_ = nullptr;
  }
  feature_encoding_ = from.feature_encoding_;
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GraphQueryRequest)
}

void GraphQueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphQueryRequest_esriPBuffer_2fgraph_2fQueryRequest_2eproto.base);
  open_cypher_query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&out_sr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feature_encoding_) -
      reinterpret_cast<char*>(&out_sr_)) + sizeof(feature_encoding_));
}

GraphQueryRequest::~GraphQueryRequest() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GraphQueryRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GraphQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  open_cypher_query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete out_sr_;
  if (this != internal_default_instance()) delete datum_transformation_;
  if (this != internal_default_instance()) delete quantization_parameters_;
  if (this != internal_default_instance()) delete input_transform_;
}

void GraphQueryRequest::ArenaDtor(void* object) {
  GraphQueryRequest* _this = reinterpret_cast< GraphQueryRequest* >(object);
  (void)_this;
}
void GraphQueryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphQueryRequest& GraphQueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphQueryRequest_esriPBuffer_2fgraph_2fQueryRequest_2eproto.base);
  return *internal_default_instance();
}


void GraphQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GraphQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  open_cypher_query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && out_sr_ != nullptr) {
    delete out_sr_;
  }
  out_sr_ = nullptr;
  if (GetArena() == nullptr && datum_transformation_ != nullptr) {
    delete datum_transformation_;
  }
  datum_transformation_ = nullptr;
  if (GetArena() == nullptr && quantization_parameters_ != nullptr) {
    delete quantization_parameters_;
  }
  quantization_parameters_ = nullptr;
  if (GetArena() == nullptr && input_transform_ != nullptr) {
    delete input_transform_;
  }
  input_transform_ = nullptr;
  feature_encoding_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* GraphQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string open_cypher_query = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_open_cypher_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .esriPBuffer.graph.AnyValue> parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.EsriTypes.esriFeatureEncoding feature_encoding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_feature_encoding(static_cast<::esriPBuffer::EsriTypes_esriFeatureEncoding>(val));
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.EsriTypes.SpatialReference out_sr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_out_sr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.EsriTypes.DatumTransformation datum_transformation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_datum_transformation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.QuantizationParameters quantization_parameters = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_quantization_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.Transform input_transform = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphQueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GraphQueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string open_cypher_query = 1;
  if (this->open_cypher_query().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_cypher_query().data(), static_cast<int>(this->_internal_open_cypher_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.GraphQueryRequest.open_cypher_query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_open_cypher_query(), target);
  }

  // map<string, .esriPBuffer.graph.AnyValue> parameters = 2;
  if (!this->_internal_parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.GraphQueryRequest.ParametersEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GraphQueryRequest_ParametersEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it) {
        target = GraphQueryRequest_ParametersEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .esriPBuffer.EsriTypes.esriFeatureEncoding feature_encoding = 3;
  if (this->feature_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_feature_encoding(), target);
  }

  // .esriPBuffer.EsriTypes.SpatialReference out_sr = 4;
  if (this->has_out_sr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::out_sr(this), target, stream);
  }

  // .esriPBuffer.EsriTypes.DatumTransformation datum_transformation = 5;
  if (this->has_datum_transformation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::datum_transformation(this), target, stream);
  }

  // .esriPBuffer.graph.QuantizationParameters quantization_parameters = 7;
  if (this->has_quantization_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::quantization_parameters(this), target, stream);
  }

  // .esriPBuffer.graph.Transform input_transform = 8;
  if (this->has_input_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::input_transform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GraphQueryRequest)
  return target;
}

size_t GraphQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GraphQueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .esriPBuffer.graph.AnyValue> parameters = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += GraphQueryRequest_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string open_cypher_query = 1;
  if (this->open_cypher_query().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_cypher_query());
  }

  // .esriPBuffer.EsriTypes.SpatialReference out_sr = 4;
  if (this->has_out_sr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *out_sr_);
  }

  // .esriPBuffer.EsriTypes.DatumTransformation datum_transformation = 5;
  if (this->has_datum_transformation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *datum_transformation_);
  }

  // .esriPBuffer.graph.QuantizationParameters quantization_parameters = 7;
  if (this->has_quantization_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quantization_parameters_);
  }

  // .esriPBuffer.graph.Transform input_transform = 8;
  if (this->has_input_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_transform_);
  }

  // .esriPBuffer.EsriTypes.esriFeatureEncoding feature_encoding = 3;
  if (this->feature_encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_feature_encoding());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphQueryRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphQueryRequest*>(
      &from));
}

void GraphQueryRequest::MergeFrom(const GraphQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GraphQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (from.open_cypher_query().size() > 0) {
    _internal_set_open_cypher_query(from._internal_open_cypher_query());
  }
  if (from.has_out_sr()) {
    _internal_mutable_out_sr()->::esriPBuffer::EsriTypes_SpatialReference::MergeFrom(from._internal_out_sr());
  }
  if (from.has_datum_transformation()) {
    _internal_mutable_datum_transformation()->::esriPBuffer::EsriTypes_DatumTransformation::MergeFrom(from._internal_datum_transformation());
  }
  if (from.has_quantization_parameters()) {
    _internal_mutable_quantization_parameters()->::esriPBuffer::graph::QuantizationParameters::MergeFrom(from._internal_quantization_parameters());
  }
  if (from.has_input_transform()) {
    _internal_mutable_input_transform()->::esriPBuffer::graph::Transform::MergeFrom(from._internal_input_transform());
  }
  if (from.feature_encoding() != 0) {
    _internal_set_feature_encoding(from._internal_feature_encoding());
  }
}

void GraphQueryRequest::CopyFrom(const GraphQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GraphQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphQueryRequest::IsInitialized() const {
  return true;
}

void GraphQueryRequest::InternalSwap(GraphQueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  parameters_.Swap(&other->parameters_);
  open_cypher_query_.Swap(&other->open_cypher_query_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphQueryRequest, feature_encoding_)
      + sizeof(GraphQueryRequest::feature_encoding_)
      - PROTOBUF_FIELD_OFFSET(GraphQueryRequest, out_sr_)>(
          reinterpret_cast<char*>(&out_sr_),
          reinterpret_cast<char*>(&other->out_sr_));
}

std::string GraphQueryRequest::GetTypeName() const {
  return "esriPBuffer.graph.GraphQueryRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphQueryRequest_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphQueryRequest_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphQueryRequest_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphQueryRequest* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphQueryRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
