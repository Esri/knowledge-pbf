// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/UpdateFieldRequest.proto

#include "esriPBuffer/graph/UpdateFieldRequest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fDataModelTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphProperty_esriPBuffer_2fgraph_2fDataModelTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphPropertyMask_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto;
namespace esriPBuffer {
namespace graph {
class GraphPropertyMaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphPropertyMask> _instance;
} _GraphPropertyMask_default_instance_;
class GraphPropertyUpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphPropertyUpdateRequest> _instance;
} _GraphPropertyUpdateRequest_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
static void InitDefaultsscc_info_GraphPropertyMask_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphPropertyMask_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphPropertyMask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GraphPropertyMask::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphPropertyMask_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GraphPropertyMask_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto}, {}};

static void InitDefaultsscc_info_GraphPropertyUpdateRequest_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphPropertyUpdateRequest_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphPropertyUpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GraphPropertyUpdateRequest::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GraphPropertyUpdateRequest_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GraphPropertyUpdateRequest_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto}, {
      &scc_info_GraphPropertyMask_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto.base,
      &scc_info_GraphProperty_esriPBuffer_2fgraph_2fDataModelTypes_2eproto.base,}};

namespace esriPBuffer {
namespace graph {

// ===================================================================

void GraphPropertyMask::InitAsDefaultInstance() {
}
class GraphPropertyMask::_Internal {
 public:
};

GraphPropertyMask::GraphPropertyMask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GraphPropertyMask)
}
GraphPropertyMask::GraphPropertyMask(const GraphPropertyMask& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&update_name_, &from.update_name_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_searchable_) -
    reinterpret_cast<char*>(&update_name_)) + sizeof(update_searchable_));
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GraphPropertyMask)
}

void GraphPropertyMask::SharedCtor() {
  ::memset(&update_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_searchable_) -
      reinterpret_cast<char*>(&update_name_)) + sizeof(update_searchable_));
}

GraphPropertyMask::~GraphPropertyMask() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GraphPropertyMask)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GraphPropertyMask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GraphPropertyMask::ArenaDtor(void* object) {
  GraphPropertyMask* _this = reinterpret_cast< GraphPropertyMask* >(object);
  (void)_this;
}
void GraphPropertyMask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphPropertyMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphPropertyMask& GraphPropertyMask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphPropertyMask_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto.base);
  return *internal_default_instance();
}


void GraphPropertyMask::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GraphPropertyMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&update_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_searchable_) -
      reinterpret_cast<char*>(&update_name_)) + sizeof(update_searchable_));
  _internal_metadata_.Clear<std::string>();
}

const char* GraphPropertyMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool update_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          update_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_alias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          update_alias_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_field_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          update_field_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_geometry_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          update_geometry_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_default_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          update_default_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_nullable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          update_nullable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_editable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          update_editable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_visible = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          update_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_required = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          update_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_domain = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          update_domain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_has_z = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          update_has_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_has_m = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          update_has_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_searchable = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          update_searchable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphPropertyMask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GraphPropertyMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool update_name = 1;
  if (this->update_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_update_name(), target);
  }

  // bool update_alias = 2;
  if (this->update_alias() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_update_alias(), target);
  }

  // bool update_field_type = 3;
  if (this->update_field_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_update_field_type(), target);
  }

  // bool update_geometry_type = 4;
  if (this->update_geometry_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_update_geometry_type(), target);
  }

  // bool update_default_value = 5;
  if (this->update_default_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_update_default_value(), target);
  }

  // bool update_nullable = 6;
  if (this->update_nullable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_update_nullable(), target);
  }

  // bool update_editable = 7;
  if (this->update_editable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_update_editable(), target);
  }

  // bool update_visible = 8;
  if (this->update_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_update_visible(), target);
  }

  // bool update_required = 9;
  if (this->update_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_update_required(), target);
  }

  // bool update_domain = 10;
  if (this->update_domain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_update_domain(), target);
  }

  // bool update_has_z = 12;
  if (this->update_has_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_update_has_z(), target);
  }

  // bool update_has_m = 13;
  if (this->update_has_m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_update_has_m(), target);
  }

  // bool update_searchable = 14;
  if (this->update_searchable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_update_searchable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GraphPropertyMask)
  return target;
}

size_t GraphPropertyMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GraphPropertyMask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool update_name = 1;
  if (this->update_name() != 0) {
    total_size += 1 + 1;
  }

  // bool update_alias = 2;
  if (this->update_alias() != 0) {
    total_size += 1 + 1;
  }

  // bool update_field_type = 3;
  if (this->update_field_type() != 0) {
    total_size += 1 + 1;
  }

  // bool update_geometry_type = 4;
  if (this->update_geometry_type() != 0) {
    total_size += 1 + 1;
  }

  // bool update_default_value = 5;
  if (this->update_default_value() != 0) {
    total_size += 1 + 1;
  }

  // bool update_nullable = 6;
  if (this->update_nullable() != 0) {
    total_size += 1 + 1;
  }

  // bool update_editable = 7;
  if (this->update_editable() != 0) {
    total_size += 1 + 1;
  }

  // bool update_visible = 8;
  if (this->update_visible() != 0) {
    total_size += 1 + 1;
  }

  // bool update_required = 9;
  if (this->update_required() != 0) {
    total_size += 1 + 1;
  }

  // bool update_domain = 10;
  if (this->update_domain() != 0) {
    total_size += 1 + 1;
  }

  // bool update_has_z = 12;
  if (this->update_has_z() != 0) {
    total_size += 1 + 1;
  }

  // bool update_has_m = 13;
  if (this->update_has_m() != 0) {
    total_size += 1 + 1;
  }

  // bool update_searchable = 14;
  if (this->update_searchable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphPropertyMask::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphPropertyMask*>(
      &from));
}

void GraphPropertyMask::MergeFrom(const GraphPropertyMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GraphPropertyMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.update_name() != 0) {
    _internal_set_update_name(from._internal_update_name());
  }
  if (from.update_alias() != 0) {
    _internal_set_update_alias(from._internal_update_alias());
  }
  if (from.update_field_type() != 0) {
    _internal_set_update_field_type(from._internal_update_field_type());
  }
  if (from.update_geometry_type() != 0) {
    _internal_set_update_geometry_type(from._internal_update_geometry_type());
  }
  if (from.update_default_value() != 0) {
    _internal_set_update_default_value(from._internal_update_default_value());
  }
  if (from.update_nullable() != 0) {
    _internal_set_update_nullable(from._internal_update_nullable());
  }
  if (from.update_editable() != 0) {
    _internal_set_update_editable(from._internal_update_editable());
  }
  if (from.update_visible() != 0) {
    _internal_set_update_visible(from._internal_update_visible());
  }
  if (from.update_required() != 0) {
    _internal_set_update_required(from._internal_update_required());
  }
  if (from.update_domain() != 0) {
    _internal_set_update_domain(from._internal_update_domain());
  }
  if (from.update_has_z() != 0) {
    _internal_set_update_has_z(from._internal_update_has_z());
  }
  if (from.update_has_m() != 0) {
    _internal_set_update_has_m(from._internal_update_has_m());
  }
  if (from.update_searchable() != 0) {
    _internal_set_update_searchable(from._internal_update_searchable());
  }
}

void GraphPropertyMask::CopyFrom(const GraphPropertyMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GraphPropertyMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphPropertyMask::IsInitialized() const {
  return true;
}

void GraphPropertyMask::InternalSwap(GraphPropertyMask* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphPropertyMask, update_searchable_)
      + sizeof(GraphPropertyMask::update_searchable_)
      - PROTOBUF_FIELD_OFFSET(GraphPropertyMask, update_name_)>(
          reinterpret_cast<char*>(&update_name_),
          reinterpret_cast<char*>(&other->update_name_));
}

std::string GraphPropertyMask::GetTypeName() const {
  return "esriPBuffer.graph.GraphPropertyMask";
}


// ===================================================================

void GraphPropertyUpdateRequest::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_GraphPropertyUpdateRequest_default_instance_._instance.get_mutable()->mask_ = const_cast< ::esriPBuffer::graph::GraphPropertyMask*>(
      ::esriPBuffer::graph::GraphPropertyMask::internal_default_instance());
  ::esriPBuffer::graph::_GraphPropertyUpdateRequest_default_instance_._instance.get_mutable()->graph_property_ = const_cast< ::esriPBuffer::graph::GraphProperty*>(
      ::esriPBuffer::graph::GraphProperty::internal_default_instance());
}
class GraphPropertyUpdateRequest::_Internal {
 public:
  static const ::esriPBuffer::graph::GraphPropertyMask& mask(const GraphPropertyUpdateRequest* msg);
  static const ::esriPBuffer::graph::GraphProperty& graph_property(const GraphPropertyUpdateRequest* msg);
};

const ::esriPBuffer::graph::GraphPropertyMask&
GraphPropertyUpdateRequest::_Internal::mask(const GraphPropertyUpdateRequest* msg) {
  return *msg->mask_;
}
const ::esriPBuffer::graph::GraphProperty&
GraphPropertyUpdateRequest::_Internal::graph_property(const GraphPropertyUpdateRequest* msg) {
  return *msg->graph_property_;
}
void GraphPropertyUpdateRequest::clear_graph_property() {
  if (GetArena() == nullptr && graph_property_ != nullptr) {
    delete graph_property_;
  }
  graph_property_ = nullptr;
}
GraphPropertyUpdateRequest::GraphPropertyUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GraphPropertyUpdateRequest)
}
GraphPropertyUpdateRequest::GraphPropertyUpdateRequest(const GraphPropertyUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_property_name().empty()) {
    property_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_property_name(),
      GetArena());
  }
  if (from._internal_has_mask()) {
    mask_ = new ::esriPBuffer::graph::GraphPropertyMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  if (from._internal_has_graph_property()) {
    graph_property_ = new ::esriPBuffer::graph::GraphProperty(*from.graph_property_);
  } else {
    graph_property_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GraphPropertyUpdateRequest)
}

void GraphPropertyUpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphPropertyUpdateRequest_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto.base);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graph_property_) -
      reinterpret_cast<char*>(&mask_)) + sizeof(graph_property_));
}

GraphPropertyUpdateRequest::~GraphPropertyUpdateRequest() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GraphPropertyUpdateRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GraphPropertyUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mask_;
  if (this != internal_default_instance()) delete graph_property_;
}

void GraphPropertyUpdateRequest::ArenaDtor(void* object) {
  GraphPropertyUpdateRequest* _this = reinterpret_cast< GraphPropertyUpdateRequest* >(object);
  (void)_this;
}
void GraphPropertyUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphPropertyUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphPropertyUpdateRequest& GraphPropertyUpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphPropertyUpdateRequest_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto.base);
  return *internal_default_instance();
}


void GraphPropertyUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GraphPropertyUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  if (GetArena() == nullptr && graph_property_ != nullptr) {
    delete graph_property_;
  }
  graph_property_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* GraphPropertyUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.graph.GraphPropertyMask mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .esriPBuffer.graph.GraphProperty graph_property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph_property(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string property_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphPropertyUpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GraphPropertyUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.graph.GraphPropertyMask mask = 1;
  if (this->has_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mask(this), target, stream);
  }

  // .esriPBuffer.graph.GraphProperty graph_property = 2;
  if (this->has_graph_property()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::graph_property(this), target, stream);
  }

  // string property_name = 3;
  if (this->property_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_property_name().data(), static_cast<int>(this->_internal_property_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.GraphPropertyUpdateRequest.property_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_property_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GraphPropertyUpdateRequest)
  return target;
}

size_t GraphPropertyUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GraphPropertyUpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string property_name = 3;
  if (this->property_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property_name());
  }

  // .esriPBuffer.graph.GraphPropertyMask mask = 1;
  if (this->has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  // .esriPBuffer.graph.GraphProperty graph_property = 2;
  if (this->has_graph_property()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_property_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphPropertyUpdateRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphPropertyUpdateRequest*>(
      &from));
}

void GraphPropertyUpdateRequest::MergeFrom(const GraphPropertyUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GraphPropertyUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.property_name().size() > 0) {
    _internal_set_property_name(from._internal_property_name());
  }
  if (from.has_mask()) {
    _internal_mutable_mask()->::esriPBuffer::graph::GraphPropertyMask::MergeFrom(from._internal_mask());
  }
  if (from.has_graph_property()) {
    _internal_mutable_graph_property()->::esriPBuffer::graph::GraphProperty::MergeFrom(from._internal_graph_property());
  }
}

void GraphPropertyUpdateRequest::CopyFrom(const GraphPropertyUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GraphPropertyUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphPropertyUpdateRequest::IsInitialized() const {
  return true;
}

void GraphPropertyUpdateRequest::InternalSwap(GraphPropertyUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  property_name_.Swap(&other->property_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphPropertyUpdateRequest, graph_property_)
      + sizeof(GraphPropertyUpdateRequest::graph_property_)
      - PROTOBUF_FIELD_OFFSET(GraphPropertyUpdateRequest, mask_)>(
          reinterpret_cast<char*>(&mask_),
          reinterpret_cast<char*>(&other->mask_));
}

std::string GraphPropertyUpdateRequest::GetTypeName() const {
  return "esriPBuffer.graph.GraphPropertyUpdateRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphPropertyMask* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphPropertyMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphPropertyMask >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphPropertyUpdateRequest* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphPropertyUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphPropertyUpdateRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
