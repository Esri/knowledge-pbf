// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/QueryDataModelResponse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fQueryDataModelResponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fQueryDataModelResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "esriPBuffer/EsriTypes.pb.h"
#include "esriPBuffer/graph/DataModelTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fQueryDataModelResponse_2eproto EXT_CLASS
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct EXT_CLASS TableStruct_esriPBuffer_2fgraph_2fQueryDataModelResponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace esriPBuffer {
namespace graph {
class GraphDataModel;
class GraphDataModelDefaultTypeInternal;
EXT_CLASS extern GraphDataModelDefaultTypeInternal _GraphDataModel_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> EXT_CLASS ::esriPBuffer::graph::GraphDataModel* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphDataModel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esriPBuffer {
namespace graph {

// ===================================================================

class EXT_CLASS GraphDataModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphDataModel) */ {
 public:
  inline GraphDataModel() : GraphDataModel(nullptr) {}
  virtual ~GraphDataModel();

  GraphDataModel(const GraphDataModel& from);
  GraphDataModel(GraphDataModel&& from) noexcept
    : GraphDataModel() {
    *this = ::std::move(from);
  }

  inline GraphDataModel& operator=(const GraphDataModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphDataModel& operator=(GraphDataModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphDataModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphDataModel* internal_default_instance() {
    return reinterpret_cast<const GraphDataModel*>(
               &_GraphDataModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GraphDataModel& a, GraphDataModel& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphDataModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphDataModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphDataModel* New() const final {
    return CreateMaybeMessage<GraphDataModel>(nullptr);
  }

  GraphDataModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphDataModel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphDataModel& from);
  void MergeFrom(const GraphDataModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphDataModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphDataModel";
  }
  protected:
  explicit GraphDataModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainsFieldNumber = 3,
    kEntityTypesFieldNumber = 4,
    kRelationshipTypesFieldNumber = 5,
    kObjectidPropertyFieldNumber = 7,
    kGlobalidPropertyFieldNumber = 8,
    kOriginEntityGlobalidPropertyFieldNumber = 9,
    kDestEntityGlobalidPropertyFieldNumber = 10,
    kSpatialReferenceFieldNumber = 2,
    kDocEntityTypeInfoFieldNumber = 11,
    kDataModelTimestampFieldNumber = 1,
    kStrictFieldNumber = 6,
  };
  // repeated .esriPBuffer.EsriTypes.Domain domains = 3;
  int domains_size() const;
  private:
  int _internal_domains_size() const;
  public:
  void clear_domains();
  ::esriPBuffer::EsriTypes_Domain* mutable_domains(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_Domain >*
      mutable_domains();
  private:
  const ::esriPBuffer::EsriTypes_Domain& _internal_domains(int index) const;
  ::esriPBuffer::EsriTypes_Domain* _internal_add_domains();
  public:
  const ::esriPBuffer::EsriTypes_Domain& domains(int index) const;
  ::esriPBuffer::EsriTypes_Domain* add_domains();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_Domain >&
      domains() const;

  // repeated .esriPBuffer.graph.EntityType entity_types = 4;
  int entity_types_size() const;
  private:
  int _internal_entity_types_size() const;
  public:
  void clear_entity_types();
  ::esriPBuffer::graph::EntityType* mutable_entity_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::EntityType >*
      mutable_entity_types();
  private:
  const ::esriPBuffer::graph::EntityType& _internal_entity_types(int index) const;
  ::esriPBuffer::graph::EntityType* _internal_add_entity_types();
  public:
  const ::esriPBuffer::graph::EntityType& entity_types(int index) const;
  ::esriPBuffer::graph::EntityType* add_entity_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::EntityType >&
      entity_types() const;

  // repeated .esriPBuffer.graph.RelationshipType relationship_types = 5;
  int relationship_types_size() const;
  private:
  int _internal_relationship_types_size() const;
  public:
  void clear_relationship_types();
  ::esriPBuffer::graph::RelationshipType* mutable_relationship_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::RelationshipType >*
      mutable_relationship_types();
  private:
  const ::esriPBuffer::graph::RelationshipType& _internal_relationship_types(int index) const;
  ::esriPBuffer::graph::RelationshipType* _internal_add_relationship_types();
  public:
  const ::esriPBuffer::graph::RelationshipType& relationship_types(int index) const;
  ::esriPBuffer::graph::RelationshipType* add_relationship_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::RelationshipType >&
      relationship_types() const;

  // string objectid_property = 7;
  void clear_objectid_property();
  const std::string& objectid_property() const;
  void set_objectid_property(const std::string& value);
  void set_objectid_property(std::string&& value);
  void set_objectid_property(const char* value);
  void set_objectid_property(const char* value, size_t size);
  std::string* mutable_objectid_property();
  std::string* release_objectid_property();
  void set_allocated_objectid_property(std::string* objectid_property);
  private:
  const std::string& _internal_objectid_property() const;
  void _internal_set_objectid_property(const std::string& value);
  std::string* _internal_mutable_objectid_property();
  public:

  // string globalid_property = 8;
  void clear_globalid_property();
  const std::string& globalid_property() const;
  void set_globalid_property(const std::string& value);
  void set_globalid_property(std::string&& value);
  void set_globalid_property(const char* value);
  void set_globalid_property(const char* value, size_t size);
  std::string* mutable_globalid_property();
  std::string* release_globalid_property();
  void set_allocated_globalid_property(std::string* globalid_property);
  private:
  const std::string& _internal_globalid_property() const;
  void _internal_set_globalid_property(const std::string& value);
  std::string* _internal_mutable_globalid_property();
  public:

  // string origin_entity_globalid_property = 9;
  void clear_origin_entity_globalid_property();
  const std::string& origin_entity_globalid_property() const;
  void set_origin_entity_globalid_property(const std::string& value);
  void set_origin_entity_globalid_property(std::string&& value);
  void set_origin_entity_globalid_property(const char* value);
  void set_origin_entity_globalid_property(const char* value, size_t size);
  std::string* mutable_origin_entity_globalid_property();
  std::string* release_origin_entity_globalid_property();
  void set_allocated_origin_entity_globalid_property(std::string* origin_entity_globalid_property);
  private:
  const std::string& _internal_origin_entity_globalid_property() const;
  void _internal_set_origin_entity_globalid_property(const std::string& value);
  std::string* _internal_mutable_origin_entity_globalid_property();
  public:

  // string dest_entity_globalid_property = 10;
  void clear_dest_entity_globalid_property();
  const std::string& dest_entity_globalid_property() const;
  void set_dest_entity_globalid_property(const std::string& value);
  void set_dest_entity_globalid_property(std::string&& value);
  void set_dest_entity_globalid_property(const char* value);
  void set_dest_entity_globalid_property(const char* value, size_t size);
  std::string* mutable_dest_entity_globalid_property();
  std::string* release_dest_entity_globalid_property();
  void set_allocated_dest_entity_globalid_property(std::string* dest_entity_globalid_property);
  private:
  const std::string& _internal_dest_entity_globalid_property() const;
  void _internal_set_dest_entity_globalid_property(const std::string& value);
  std::string* _internal_mutable_dest_entity_globalid_property();
  public:

  // .esriPBuffer.EsriTypes.SpatialReference spatial_reference = 2;
  bool has_spatial_reference() const;
  private:
  bool _internal_has_spatial_reference() const;
  public:
  void clear_spatial_reference();
  const ::esriPBuffer::EsriTypes_SpatialReference& spatial_reference() const;
  ::esriPBuffer::EsriTypes_SpatialReference* release_spatial_reference();
  ::esriPBuffer::EsriTypes_SpatialReference* mutable_spatial_reference();
  void set_allocated_spatial_reference(::esriPBuffer::EsriTypes_SpatialReference* spatial_reference);
  private:
  const ::esriPBuffer::EsriTypes_SpatialReference& _internal_spatial_reference() const;
  ::esriPBuffer::EsriTypes_SpatialReference* _internal_mutable_spatial_reference();
  public:
  void unsafe_arena_set_allocated_spatial_reference(
      ::esriPBuffer::EsriTypes_SpatialReference* spatial_reference);
  ::esriPBuffer::EsriTypes_SpatialReference* unsafe_arena_release_spatial_reference();

  // .esriPBuffer.graph.GraphDocumentEntityTypeInfo doc_entity_type_info = 11;
  bool has_doc_entity_type_info() const;
  private:
  bool _internal_has_doc_entity_type_info() const;
  public:
  void clear_doc_entity_type_info();
  const ::esriPBuffer::graph::GraphDocumentEntityTypeInfo& doc_entity_type_info() const;
  ::esriPBuffer::graph::GraphDocumentEntityTypeInfo* release_doc_entity_type_info();
  ::esriPBuffer::graph::GraphDocumentEntityTypeInfo* mutable_doc_entity_type_info();
  void set_allocated_doc_entity_type_info(::esriPBuffer::graph::GraphDocumentEntityTypeInfo* doc_entity_type_info);
  private:
  const ::esriPBuffer::graph::GraphDocumentEntityTypeInfo& _internal_doc_entity_type_info() const;
  ::esriPBuffer::graph::GraphDocumentEntityTypeInfo* _internal_mutable_doc_entity_type_info();
  public:
  void unsafe_arena_set_allocated_doc_entity_type_info(
      ::esriPBuffer::graph::GraphDocumentEntityTypeInfo* doc_entity_type_info);
  ::esriPBuffer::graph::GraphDocumentEntityTypeInfo* unsafe_arena_release_doc_entity_type_info();

  // uint64 data_model_timestamp = 1;
  void clear_data_model_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 data_model_timestamp() const;
  void set_data_model_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_data_model_timestamp() const;
  void _internal_set_data_model_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool strict = 6;
  void clear_strict();
  bool strict() const;
  void set_strict(bool value);
  private:
  bool _internal_strict() const;
  void _internal_set_strict(bool value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphDataModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_Domain > domains_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::EntityType > entity_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::RelationshipType > relationship_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objectid_property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr globalid_property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_entity_globalid_property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_entity_globalid_property_;
  ::esriPBuffer::EsriTypes_SpatialReference* spatial_reference_;
  ::esriPBuffer::graph::GraphDocumentEntityTypeInfo* doc_entity_type_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 data_model_timestamp_;
  bool strict_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fQueryDataModelResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GraphDataModel

// uint64 data_model_timestamp = 1;
inline void GraphDataModel::clear_data_model_timestamp() {
  data_model_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GraphDataModel::_internal_data_model_timestamp() const {
  return data_model_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GraphDataModel::data_model_timestamp() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDataModel.data_model_timestamp)
  return _internal_data_model_timestamp();
}
inline void GraphDataModel::_internal_set_data_model_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  data_model_timestamp_ = value;
}
inline void GraphDataModel::set_data_model_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_data_model_timestamp(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphDataModel.data_model_timestamp)
}

// .esriPBuffer.EsriTypes.SpatialReference spatial_reference = 2;
inline bool GraphDataModel::_internal_has_spatial_reference() const {
  return this != internal_default_instance() && spatial_reference_ != nullptr;
}
inline bool GraphDataModel::has_spatial_reference() const {
  return _internal_has_spatial_reference();
}
inline const ::esriPBuffer::EsriTypes_SpatialReference& GraphDataModel::_internal_spatial_reference() const {
  const ::esriPBuffer::EsriTypes_SpatialReference* p = spatial_reference_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_SpatialReference*>(
      &::esriPBuffer::_EsriTypes_SpatialReference_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_SpatialReference& GraphDataModel::spatial_reference() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDataModel.spatial_reference)
  return _internal_spatial_reference();
}
inline void GraphDataModel::unsafe_arena_set_allocated_spatial_reference(
    ::esriPBuffer::EsriTypes_SpatialReference* spatial_reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_reference_);
  }
  spatial_reference_ = spatial_reference;
  if (spatial_reference) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphDataModel.spatial_reference)
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphDataModel::release_spatial_reference() {
  
  ::esriPBuffer::EsriTypes_SpatialReference* temp = spatial_reference_;
  spatial_reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphDataModel::unsafe_arena_release_spatial_reference() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphDataModel.spatial_reference)
  
  ::esriPBuffer::EsriTypes_SpatialReference* temp = spatial_reference_;
  spatial_reference_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphDataModel::_internal_mutable_spatial_reference() {
  
  if (spatial_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_SpatialReference>(GetArena());
    spatial_reference_ = p;
  }
  return spatial_reference_;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* GraphDataModel::mutable_spatial_reference() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDataModel.spatial_reference)
  return _internal_mutable_spatial_reference();
}
inline void GraphDataModel::set_allocated_spatial_reference(::esriPBuffer::EsriTypes_SpatialReference* spatial_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_reference_);
  }
  if (spatial_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_reference)->GetArena();
    if (message_arena != submessage_arena) {
      spatial_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spatial_reference, submessage_arena);
    }
    
  } else {
    
  }
  spatial_reference_ = spatial_reference;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphDataModel.spatial_reference)
}

// repeated .esriPBuffer.EsriTypes.Domain domains = 3;
inline int GraphDataModel::_internal_domains_size() const {
  return domains_.size();
}
inline int GraphDataModel::domains_size() const {
  return _internal_domains_size();
}
inline ::esriPBuffer::EsriTypes_Domain* GraphDataModel::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDataModel.domains)
  return domains_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_Domain >*
GraphDataModel::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.GraphDataModel.domains)
  return &domains_;
}
inline const ::esriPBuffer::EsriTypes_Domain& GraphDataModel::_internal_domains(int index) const {
  return domains_.Get(index);
}
inline const ::esriPBuffer::EsriTypes_Domain& GraphDataModel::domains(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDataModel.domains)
  return _internal_domains(index);
}
inline ::esriPBuffer::EsriTypes_Domain* GraphDataModel::_internal_add_domains() {
  return domains_.Add();
}
inline ::esriPBuffer::EsriTypes_Domain* GraphDataModel::add_domains() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GraphDataModel.domains)
  return _internal_add_domains();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_Domain >&
GraphDataModel::domains() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.GraphDataModel.domains)
  return domains_;
}

// repeated .esriPBuffer.graph.EntityType entity_types = 4;
inline int GraphDataModel::_internal_entity_types_size() const {
  return entity_types_.size();
}
inline int GraphDataModel::entity_types_size() const {
  return _internal_entity_types_size();
}
inline ::esriPBuffer::graph::EntityType* GraphDataModel::mutable_entity_types(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDataModel.entity_types)
  return entity_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::EntityType >*
GraphDataModel::mutable_entity_types() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.GraphDataModel.entity_types)
  return &entity_types_;
}
inline const ::esriPBuffer::graph::EntityType& GraphDataModel::_internal_entity_types(int index) const {
  return entity_types_.Get(index);
}
inline const ::esriPBuffer::graph::EntityType& GraphDataModel::entity_types(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDataModel.entity_types)
  return _internal_entity_types(index);
}
inline ::esriPBuffer::graph::EntityType* GraphDataModel::_internal_add_entity_types() {
  return entity_types_.Add();
}
inline ::esriPBuffer::graph::EntityType* GraphDataModel::add_entity_types() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GraphDataModel.entity_types)
  return _internal_add_entity_types();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::EntityType >&
GraphDataModel::entity_types() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.GraphDataModel.entity_types)
  return entity_types_;
}

// repeated .esriPBuffer.graph.RelationshipType relationship_types = 5;
inline int GraphDataModel::_internal_relationship_types_size() const {
  return relationship_types_.size();
}
inline int GraphDataModel::relationship_types_size() const {
  return _internal_relationship_types_size();
}
inline ::esriPBuffer::graph::RelationshipType* GraphDataModel::mutable_relationship_types(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDataModel.relationship_types)
  return relationship_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::RelationshipType >*
GraphDataModel::mutable_relationship_types() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.GraphDataModel.relationship_types)
  return &relationship_types_;
}
inline const ::esriPBuffer::graph::RelationshipType& GraphDataModel::_internal_relationship_types(int index) const {
  return relationship_types_.Get(index);
}
inline const ::esriPBuffer::graph::RelationshipType& GraphDataModel::relationship_types(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDataModel.relationship_types)
  return _internal_relationship_types(index);
}
inline ::esriPBuffer::graph::RelationshipType* GraphDataModel::_internal_add_relationship_types() {
  return relationship_types_.Add();
}
inline ::esriPBuffer::graph::RelationshipType* GraphDataModel::add_relationship_types() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GraphDataModel.relationship_types)
  return _internal_add_relationship_types();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::RelationshipType >&
GraphDataModel::relationship_types() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.GraphDataModel.relationship_types)
  return relationship_types_;
}

// bool strict = 6;
inline void GraphDataModel::clear_strict() {
  strict_ = false;
}
inline bool GraphDataModel::_internal_strict() const {
  return strict_;
}
inline bool GraphDataModel::strict() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDataModel.strict)
  return _internal_strict();
}
inline void GraphDataModel::_internal_set_strict(bool value) {
  
  strict_ = value;
}
inline void GraphDataModel::set_strict(bool value) {
  _internal_set_strict(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphDataModel.strict)
}

// string objectid_property = 7;
inline void GraphDataModel::clear_objectid_property() {
  objectid_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphDataModel::objectid_property() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDataModel.objectid_property)
  return _internal_objectid_property();
}
inline void GraphDataModel::set_objectid_property(const std::string& value) {
  _internal_set_objectid_property(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphDataModel.objectid_property)
}
inline std::string* GraphDataModel::mutable_objectid_property() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDataModel.objectid_property)
  return _internal_mutable_objectid_property();
}
inline const std::string& GraphDataModel::_internal_objectid_property() const {
  return objectid_property_.Get();
}
inline void GraphDataModel::_internal_set_objectid_property(const std::string& value) {
  
  objectid_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphDataModel::set_objectid_property(std::string&& value) {
  
  objectid_property_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphDataModel.objectid_property)
}
inline void GraphDataModel::set_objectid_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  objectid_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphDataModel.objectid_property)
}
inline void GraphDataModel::set_objectid_property(const char* value,
    size_t size) {
  
  objectid_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphDataModel.objectid_property)
}
inline std::string* GraphDataModel::_internal_mutable_objectid_property() {
  
  return objectid_property_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphDataModel::release_objectid_property() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphDataModel.objectid_property)
  return objectid_property_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphDataModel::set_allocated_objectid_property(std::string* objectid_property) {
  if (objectid_property != nullptr) {
    
  } else {
    
  }
  objectid_property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objectid_property,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphDataModel.objectid_property)
}

// string globalid_property = 8;
inline void GraphDataModel::clear_globalid_property() {
  globalid_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphDataModel::globalid_property() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDataModel.globalid_property)
  return _internal_globalid_property();
}
inline void GraphDataModel::set_globalid_property(const std::string& value) {
  _internal_set_globalid_property(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphDataModel.globalid_property)
}
inline std::string* GraphDataModel::mutable_globalid_property() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDataModel.globalid_property)
  return _internal_mutable_globalid_property();
}
inline const std::string& GraphDataModel::_internal_globalid_property() const {
  return globalid_property_.Get();
}
inline void GraphDataModel::_internal_set_globalid_property(const std::string& value) {
  
  globalid_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphDataModel::set_globalid_property(std::string&& value) {
  
  globalid_property_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphDataModel.globalid_property)
}
inline void GraphDataModel::set_globalid_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  globalid_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphDataModel.globalid_property)
}
inline void GraphDataModel::set_globalid_property(const char* value,
    size_t size) {
  
  globalid_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphDataModel.globalid_property)
}
inline std::string* GraphDataModel::_internal_mutable_globalid_property() {
  
  return globalid_property_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphDataModel::release_globalid_property() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphDataModel.globalid_property)
  return globalid_property_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphDataModel::set_allocated_globalid_property(std::string* globalid_property) {
  if (globalid_property != nullptr) {
    
  } else {
    
  }
  globalid_property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), globalid_property,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphDataModel.globalid_property)
}

// string origin_entity_globalid_property = 9;
inline void GraphDataModel::clear_origin_entity_globalid_property() {
  origin_entity_globalid_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphDataModel::origin_entity_globalid_property() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDataModel.origin_entity_globalid_property)
  return _internal_origin_entity_globalid_property();
}
inline void GraphDataModel::set_origin_entity_globalid_property(const std::string& value) {
  _internal_set_origin_entity_globalid_property(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphDataModel.origin_entity_globalid_property)
}
inline std::string* GraphDataModel::mutable_origin_entity_globalid_property() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDataModel.origin_entity_globalid_property)
  return _internal_mutable_origin_entity_globalid_property();
}
inline const std::string& GraphDataModel::_internal_origin_entity_globalid_property() const {
  return origin_entity_globalid_property_.Get();
}
inline void GraphDataModel::_internal_set_origin_entity_globalid_property(const std::string& value) {
  
  origin_entity_globalid_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphDataModel::set_origin_entity_globalid_property(std::string&& value) {
  
  origin_entity_globalid_property_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphDataModel.origin_entity_globalid_property)
}
inline void GraphDataModel::set_origin_entity_globalid_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  origin_entity_globalid_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphDataModel.origin_entity_globalid_property)
}
inline void GraphDataModel::set_origin_entity_globalid_property(const char* value,
    size_t size) {
  
  origin_entity_globalid_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphDataModel.origin_entity_globalid_property)
}
inline std::string* GraphDataModel::_internal_mutable_origin_entity_globalid_property() {
  
  return origin_entity_globalid_property_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphDataModel::release_origin_entity_globalid_property() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphDataModel.origin_entity_globalid_property)
  return origin_entity_globalid_property_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphDataModel::set_allocated_origin_entity_globalid_property(std::string* origin_entity_globalid_property) {
  if (origin_entity_globalid_property != nullptr) {
    
  } else {
    
  }
  origin_entity_globalid_property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin_entity_globalid_property,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphDataModel.origin_entity_globalid_property)
}

// string dest_entity_globalid_property = 10;
inline void GraphDataModel::clear_dest_entity_globalid_property() {
  dest_entity_globalid_property_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphDataModel::dest_entity_globalid_property() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDataModel.dest_entity_globalid_property)
  return _internal_dest_entity_globalid_property();
}
inline void GraphDataModel::set_dest_entity_globalid_property(const std::string& value) {
  _internal_set_dest_entity_globalid_property(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphDataModel.dest_entity_globalid_property)
}
inline std::string* GraphDataModel::mutable_dest_entity_globalid_property() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDataModel.dest_entity_globalid_property)
  return _internal_mutable_dest_entity_globalid_property();
}
inline const std::string& GraphDataModel::_internal_dest_entity_globalid_property() const {
  return dest_entity_globalid_property_.Get();
}
inline void GraphDataModel::_internal_set_dest_entity_globalid_property(const std::string& value) {
  
  dest_entity_globalid_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphDataModel::set_dest_entity_globalid_property(std::string&& value) {
  
  dest_entity_globalid_property_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphDataModel.dest_entity_globalid_property)
}
inline void GraphDataModel::set_dest_entity_globalid_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dest_entity_globalid_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphDataModel.dest_entity_globalid_property)
}
inline void GraphDataModel::set_dest_entity_globalid_property(const char* value,
    size_t size) {
  
  dest_entity_globalid_property_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphDataModel.dest_entity_globalid_property)
}
inline std::string* GraphDataModel::_internal_mutable_dest_entity_globalid_property() {
  
  return dest_entity_globalid_property_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphDataModel::release_dest_entity_globalid_property() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphDataModel.dest_entity_globalid_property)
  return dest_entity_globalid_property_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphDataModel::set_allocated_dest_entity_globalid_property(std::string* dest_entity_globalid_property) {
  if (dest_entity_globalid_property != nullptr) {
    
  } else {
    
  }
  dest_entity_globalid_property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dest_entity_globalid_property,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphDataModel.dest_entity_globalid_property)
}

// .esriPBuffer.graph.GraphDocumentEntityTypeInfo doc_entity_type_info = 11;
inline bool GraphDataModel::_internal_has_doc_entity_type_info() const {
  return this != internal_default_instance() && doc_entity_type_info_ != nullptr;
}
inline bool GraphDataModel::has_doc_entity_type_info() const {
  return _internal_has_doc_entity_type_info();
}
inline const ::esriPBuffer::graph::GraphDocumentEntityTypeInfo& GraphDataModel::_internal_doc_entity_type_info() const {
  const ::esriPBuffer::graph::GraphDocumentEntityTypeInfo* p = doc_entity_type_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::GraphDocumentEntityTypeInfo*>(
      &::esriPBuffer::graph::_GraphDocumentEntityTypeInfo_default_instance_);
}
inline const ::esriPBuffer::graph::GraphDocumentEntityTypeInfo& GraphDataModel::doc_entity_type_info() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphDataModel.doc_entity_type_info)
  return _internal_doc_entity_type_info();
}
inline void GraphDataModel::unsafe_arena_set_allocated_doc_entity_type_info(
    ::esriPBuffer::graph::GraphDocumentEntityTypeInfo* doc_entity_type_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(doc_entity_type_info_);
  }
  doc_entity_type_info_ = doc_entity_type_info;
  if (doc_entity_type_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphDataModel.doc_entity_type_info)
}
inline ::esriPBuffer::graph::GraphDocumentEntityTypeInfo* GraphDataModel::release_doc_entity_type_info() {
  
  ::esriPBuffer::graph::GraphDocumentEntityTypeInfo* temp = doc_entity_type_info_;
  doc_entity_type_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::GraphDocumentEntityTypeInfo* GraphDataModel::unsafe_arena_release_doc_entity_type_info() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphDataModel.doc_entity_type_info)
  
  ::esriPBuffer::graph::GraphDocumentEntityTypeInfo* temp = doc_entity_type_info_;
  doc_entity_type_info_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::GraphDocumentEntityTypeInfo* GraphDataModel::_internal_mutable_doc_entity_type_info() {
  
  if (doc_entity_type_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::GraphDocumentEntityTypeInfo>(GetArena());
    doc_entity_type_info_ = p;
  }
  return doc_entity_type_info_;
}
inline ::esriPBuffer::graph::GraphDocumentEntityTypeInfo* GraphDataModel::mutable_doc_entity_type_info() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphDataModel.doc_entity_type_info)
  return _internal_mutable_doc_entity_type_info();
}
inline void GraphDataModel::set_allocated_doc_entity_type_info(::esriPBuffer::graph::GraphDocumentEntityTypeInfo* doc_entity_type_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(doc_entity_type_info_);
  }
  if (doc_entity_type_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(doc_entity_type_info)->GetArena();
    if (message_arena != submessage_arena) {
      doc_entity_type_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, doc_entity_type_info, submessage_arena);
    }
    
  } else {
    
  }
  doc_entity_type_info_ = doc_entity_type_info;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphDataModel.doc_entity_type_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace esriPBuffer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fQueryDataModelResponse_2eproto
