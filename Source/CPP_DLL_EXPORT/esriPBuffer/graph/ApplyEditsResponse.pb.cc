// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/ApplyEditsResponse.proto

#include "esriPBuffer/graph/ApplyEditsResponse.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fObjectIdentifierSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectIdArray_esriPBuffer_2fObjectIdentifierSet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CascadingRelationshipDeletes_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EditResults_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EditResults_ErrorsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelationshipTypeSchemaChanges_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto;
namespace esriPBuffer {
namespace graph {
class EditResults_ErrorsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EditResults_ErrorsEntry_DoNotUse> _instance;
} _EditResults_ErrorsEntry_DoNotUse_default_instance_;
class EditResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EditResults> _instance;
} _EditResults_default_instance_;
class CascadingRelationshipDeletesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CascadingRelationshipDeletes> _instance;
} _CascadingRelationshipDeletes_default_instance_;
class RelationshipTypeSchemaChangesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelationshipTypeSchemaChanges> _instance;
} _RelationshipTypeSchemaChanges_default_instance_;
class GraphApplyEditsResult_EntityAddResultsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse> _instance;
} _GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse_default_instance_;
class GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse> _instance;
} _GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse_default_instance_;
class GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse> _instance;
} _GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse_default_instance_;
class GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse> _instance;
} _GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse_default_instance_;
class GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse> _instance;
} _GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse_default_instance_;
class GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse> _instance;
} _GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse_default_instance_;
class GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse> _instance;
} _GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse_default_instance_;
class GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse> _instance;
} _GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse_default_instance_;
class GraphApplyEditsResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphApplyEditsResult> _instance;
} _GraphApplyEditsResult_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
static void InitDefaultsscc_info_CascadingRelationshipDeletes_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_CascadingRelationshipDeletes_default_instance_;
    new (ptr) ::esriPBuffer::graph::CascadingRelationshipDeletes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::CascadingRelationshipDeletes::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CascadingRelationshipDeletes_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CascadingRelationshipDeletes_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto}, {
      &scc_info_EditResults_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,}};

static void InitDefaultsscc_info_EditResults_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_EditResults_default_instance_;
    new (ptr) ::esriPBuffer::graph::EditResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::EditResults::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EditResults_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EditResults_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto}, {
      &scc_info_ObjectIdArray_esriPBuffer_2fObjectIdentifierSet_2eproto.base,
      &scc_info_EditResults_ErrorsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,}};

static void InitDefaultsscc_info_EditResults_ErrorsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_EditResults_ErrorsEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::EditResults_ErrorsEntry_DoNotUse();
  }
  ::esriPBuffer::graph::EditResults_ErrorsEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EditResults_ErrorsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EditResults_ErrorsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto}, {
      &scc_info_Error_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,}};

static void InitDefaultsscc_info_GraphApplyEditsResult_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphApplyEditsResult_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphApplyEditsResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::GraphApplyEditsResult::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_GraphApplyEditsResult_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_GraphApplyEditsResult_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto}, {
      &scc_info_Error_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto.base,
      &scc_info_GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,
      &scc_info_GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,
      &scc_info_GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,
      &scc_info_GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,
      &scc_info_GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,
      &scc_info_GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,
      &scc_info_GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,
      &scc_info_GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,}};

static void InitDefaultsscc_info_GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse();
  }
  ::esriPBuffer::graph::GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto}, {
      &scc_info_CascadingRelationshipDeletes_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,}};

static void InitDefaultsscc_info_GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse();
  }
  ::esriPBuffer::graph::GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto}, {
      &scc_info_EditResults_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,}};

static void InitDefaultsscc_info_GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse();
  }
  ::esriPBuffer::graph::GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto}, {
      &scc_info_EditResults_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,}};

static void InitDefaultsscc_info_GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse();
  }
  ::esriPBuffer::graph::GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto}, {
      &scc_info_EditResults_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,}};

static void InitDefaultsscc_info_GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse();
  }
  ::esriPBuffer::graph::GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto}, {
      &scc_info_RelationshipTypeSchemaChanges_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,}};

static void InitDefaultsscc_info_GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse();
  }
  ::esriPBuffer::graph::GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto}, {
      &scc_info_EditResults_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,}};

static void InitDefaultsscc_info_GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse();
  }
  ::esriPBuffer::graph::GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto}, {
      &scc_info_EditResults_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,}};

static void InitDefaultsscc_info_GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse_default_instance_;
    new (ptr) ::esriPBuffer::graph::GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse();
  }
  ::esriPBuffer::graph::GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto}, {
      &scc_info_EditResults_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base,}};

static void InitDefaultsscc_info_RelationshipTypeSchemaChanges_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::graph::_RelationshipTypeSchemaChanges_default_instance_;
    new (ptr) ::esriPBuffer::graph::RelationshipTypeSchemaChanges();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::graph::RelationshipTypeSchemaChanges::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelationshipTypeSchemaChanges_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RelationshipTypeSchemaChanges_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto}, {}};

namespace esriPBuffer {
namespace graph {

// ===================================================================

EditResults_ErrorsEntry_DoNotUse::EditResults_ErrorsEntry_DoNotUse() {}
EditResults_ErrorsEntry_DoNotUse::EditResults_ErrorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EditResults_ErrorsEntry_DoNotUse::MergeFrom(const EditResults_ErrorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void EditResults::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_EditResults_default_instance_._instance.get_mutable()->oid_array_ = const_cast< ::esriPBuffer::ObjectIdArray*>(
      ::esriPBuffer::ObjectIdArray::internal_default_instance());
}
class EditResults::_Internal {
 public:
  static const ::esriPBuffer::ObjectIdArray& oid_array(const EditResults* msg);
};

const ::esriPBuffer::ObjectIdArray&
EditResults::_Internal::oid_array(const EditResults* msg) {
  return *msg->oid_array_;
}
void EditResults::clear_oid_array() {
  if (GetArena() == nullptr && oid_array_ != nullptr) {
    delete oid_array_;
  }
  oid_array_ = nullptr;
}
void EditResults::clear_errors() {
  errors_.Clear();
}
EditResults::EditResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  errors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.EditResults)
}
EditResults::EditResults(const EditResults& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  errors_.MergeFrom(from.errors_);
  globalid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_globalid_array().empty()) {
    globalid_array_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_globalid_array(),
      GetArena());
  }
  if (from._internal_has_oid_array()) {
    oid_array_ = new ::esriPBuffer::ObjectIdArray(*from.oid_array_);
  } else {
    oid_array_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.EditResults)
}

void EditResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EditResults_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base);
  globalid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oid_array_ = nullptr;
}

EditResults::~EditResults() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.EditResults)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EditResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  globalid_array_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete oid_array_;
}

void EditResults::ArenaDtor(void* object) {
  EditResults* _this = reinterpret_cast< EditResults* >(object);
  (void)_this;
}
void EditResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EditResults& EditResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EditResults_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base);
  return *internal_default_instance();
}


void EditResults::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.EditResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  globalid_array_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && oid_array_ != nullptr) {
    delete oid_array_;
  }
  oid_array_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* EditResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.ObjectIdArray oid_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_oid_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes globalid_array = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_globalid_array();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint64, .esriPBuffer.graph.Error> errors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&errors_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.EditResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.ObjectIdArray oid_array = 1;
  if (this->has_oid_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::oid_array(this), target, stream);
  }

  // bytes globalid_array = 2;
  if (this->globalid_array().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_globalid_array(), target);
  }

  // map<uint64, .esriPBuffer.graph.Error> errors = 3;
  if (!this->_internal_errors().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::esriPBuffer::graph::Error >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_errors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_errors().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::esriPBuffer::graph::Error >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::esriPBuffer::graph::Error >::const_iterator
          it = this->_internal_errors().begin();
          it != this->_internal_errors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = EditResults_ErrorsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::esriPBuffer::graph::Error >::const_iterator
          it = this->_internal_errors().begin();
          it != this->_internal_errors().end(); ++it) {
        target = EditResults_ErrorsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.EditResults)
  return target;
}

size_t EditResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.EditResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .esriPBuffer.graph.Error> errors = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_errors_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::esriPBuffer::graph::Error >::const_iterator
      it = this->_internal_errors().begin();
      it != this->_internal_errors().end(); ++it) {
    total_size += EditResults_ErrorsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes globalid_array = 2;
  if (this->globalid_array().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_globalid_array());
  }

  // .esriPBuffer.ObjectIdArray oid_array = 1;
  if (this->has_oid_array()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oid_array_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EditResults::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EditResults*>(
      &from));
}

void EditResults::MergeFrom(const EditResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.EditResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
  if (from.globalid_array().size() > 0) {
    _internal_set_globalid_array(from._internal_globalid_array());
  }
  if (from.has_oid_array()) {
    _internal_mutable_oid_array()->::esriPBuffer::ObjectIdArray::MergeFrom(from._internal_oid_array());
  }
}

void EditResults::CopyFrom(const EditResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.EditResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditResults::IsInitialized() const {
  return true;
}

void EditResults::InternalSwap(EditResults* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  errors_.Swap(&other->errors_);
  globalid_array_.Swap(&other->globalid_array_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(oid_array_, other->oid_array_);
}

std::string EditResults::GetTypeName() const {
  return "esriPBuffer.graph.EditResults";
}


// ===================================================================

void CascadingRelationshipDeletes::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_CascadingRelationshipDeletes_default_instance_._instance.get_mutable()->relationship_delete_results_ = const_cast< ::esriPBuffer::graph::EditResults*>(
      ::esriPBuffer::graph::EditResults::internal_default_instance());
}
class CascadingRelationshipDeletes::_Internal {
 public:
  static const ::esriPBuffer::graph::EditResults& relationship_delete_results(const CascadingRelationshipDeletes* msg);
};

const ::esriPBuffer::graph::EditResults&
CascadingRelationshipDeletes::_Internal::relationship_delete_results(const CascadingRelationshipDeletes* msg) {
  return *msg->relationship_delete_results_;
}
CascadingRelationshipDeletes::CascadingRelationshipDeletes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.CascadingRelationshipDeletes)
}
CascadingRelationshipDeletes::CascadingRelationshipDeletes(const CascadingRelationshipDeletes& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  origin_entity_globalid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_origin_entity_globalid_array().empty()) {
    origin_entity_globalid_array_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_origin_entity_globalid_array(),
      GetArena());
  }
  dest_entity_globalid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dest_entity_globalid_array().empty()) {
    dest_entity_globalid_array_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dest_entity_globalid_array(),
      GetArena());
  }
  if (from._internal_has_relationship_delete_results()) {
    relationship_delete_results_ = new ::esriPBuffer::graph::EditResults(*from.relationship_delete_results_);
  } else {
    relationship_delete_results_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.CascadingRelationshipDeletes)
}

void CascadingRelationshipDeletes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CascadingRelationshipDeletes_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base);
  origin_entity_globalid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_entity_globalid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  relationship_delete_results_ = nullptr;
}

CascadingRelationshipDeletes::~CascadingRelationshipDeletes() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.CascadingRelationshipDeletes)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CascadingRelationshipDeletes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  origin_entity_globalid_array_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_entity_globalid_array_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete relationship_delete_results_;
}

void CascadingRelationshipDeletes::ArenaDtor(void* object) {
  CascadingRelationshipDeletes* _this = reinterpret_cast< CascadingRelationshipDeletes* >(object);
  (void)_this;
}
void CascadingRelationshipDeletes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CascadingRelationshipDeletes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CascadingRelationshipDeletes& CascadingRelationshipDeletes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CascadingRelationshipDeletes_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base);
  return *internal_default_instance();
}


void CascadingRelationshipDeletes::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.CascadingRelationshipDeletes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  origin_entity_globalid_array_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dest_entity_globalid_array_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && relationship_delete_results_ != nullptr) {
    delete relationship_delete_results_;
  }
  relationship_delete_results_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* CascadingRelationshipDeletes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.graph.EditResults relationship_delete_results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_relationship_delete_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes origin_entity_globalid_array = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_origin_entity_globalid_array();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes dest_entity_globalid_array = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dest_entity_globalid_array();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CascadingRelationshipDeletes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.CascadingRelationshipDeletes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.graph.EditResults relationship_delete_results = 1;
  if (this->has_relationship_delete_results()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::relationship_delete_results(this), target, stream);
  }

  // bytes origin_entity_globalid_array = 2;
  if (this->origin_entity_globalid_array().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_origin_entity_globalid_array(), target);
  }

  // bytes dest_entity_globalid_array = 3;
  if (this->dest_entity_globalid_array().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_dest_entity_globalid_array(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.CascadingRelationshipDeletes)
  return target;
}

size_t CascadingRelationshipDeletes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.CascadingRelationshipDeletes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes origin_entity_globalid_array = 2;
  if (this->origin_entity_globalid_array().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_origin_entity_globalid_array());
  }

  // bytes dest_entity_globalid_array = 3;
  if (this->dest_entity_globalid_array().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dest_entity_globalid_array());
  }

  // .esriPBuffer.graph.EditResults relationship_delete_results = 1;
  if (this->has_relationship_delete_results()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relationship_delete_results_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CascadingRelationshipDeletes::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CascadingRelationshipDeletes*>(
      &from));
}

void CascadingRelationshipDeletes::MergeFrom(const CascadingRelationshipDeletes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.CascadingRelationshipDeletes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.origin_entity_globalid_array().size() > 0) {
    _internal_set_origin_entity_globalid_array(from._internal_origin_entity_globalid_array());
  }
  if (from.dest_entity_globalid_array().size() > 0) {
    _internal_set_dest_entity_globalid_array(from._internal_dest_entity_globalid_array());
  }
  if (from.has_relationship_delete_results()) {
    _internal_mutable_relationship_delete_results()->::esriPBuffer::graph::EditResults::MergeFrom(from._internal_relationship_delete_results());
  }
}

void CascadingRelationshipDeletes::CopyFrom(const CascadingRelationshipDeletes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.CascadingRelationshipDeletes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CascadingRelationshipDeletes::IsInitialized() const {
  return true;
}

void CascadingRelationshipDeletes::InternalSwap(CascadingRelationshipDeletes* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  origin_entity_globalid_array_.Swap(&other->origin_entity_globalid_array_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dest_entity_globalid_array_.Swap(&other->dest_entity_globalid_array_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(relationship_delete_results_, other->relationship_delete_results_);
}

std::string CascadingRelationshipDeletes::GetTypeName() const {
  return "esriPBuffer.graph.CascadingRelationshipDeletes";
}


// ===================================================================

void RelationshipTypeSchemaChanges::InitAsDefaultInstance() {
}
class RelationshipTypeSchemaChanges::_Internal {
 public:
};

RelationshipTypeSchemaChanges::RelationshipTypeSchemaChanges(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  origin_entity_types_(arena),
  dest_entity_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.RelationshipTypeSchemaChanges)
}
RelationshipTypeSchemaChanges::RelationshipTypeSchemaChanges(const RelationshipTypeSchemaChanges& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      origin_entity_types_(from.origin_entity_types_),
      dest_entity_types_(from.dest_entity_types_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.RelationshipTypeSchemaChanges)
}

void RelationshipTypeSchemaChanges::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelationshipTypeSchemaChanges_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base);
}

RelationshipTypeSchemaChanges::~RelationshipTypeSchemaChanges() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.RelationshipTypeSchemaChanges)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void RelationshipTypeSchemaChanges::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RelationshipTypeSchemaChanges::ArenaDtor(void* object) {
  RelationshipTypeSchemaChanges* _this = reinterpret_cast< RelationshipTypeSchemaChanges* >(object);
  (void)_this;
}
void RelationshipTypeSchemaChanges::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelationshipTypeSchemaChanges::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelationshipTypeSchemaChanges& RelationshipTypeSchemaChanges::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelationshipTypeSchemaChanges_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base);
  return *internal_default_instance();
}


void RelationshipTypeSchemaChanges::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.RelationshipTypeSchemaChanges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  origin_entity_types_.Clear();
  dest_entity_types_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RelationshipTypeSchemaChanges::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string origin_entity_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_origin_entity_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string dest_entity_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dest_entity_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelationshipTypeSchemaChanges::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.RelationshipTypeSchemaChanges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string origin_entity_types = 1;
  for (int i = 0, n = this->_internal_origin_entity_types_size(); i < n; i++) {
    const auto& s = this->_internal_origin_entity_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.RelationshipTypeSchemaChanges.origin_entity_types");
    target = stream->WriteString(1, s, target);
  }

  // repeated string dest_entity_types = 2;
  for (int i = 0, n = this->_internal_dest_entity_types_size(); i < n; i++) {
    const auto& s = this->_internal_dest_entity_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "esriPBuffer.graph.RelationshipTypeSchemaChanges.dest_entity_types");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.RelationshipTypeSchemaChanges)
  return target;
}

size_t RelationshipTypeSchemaChanges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.RelationshipTypeSchemaChanges)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string origin_entity_types = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(origin_entity_types_.size());
  for (int i = 0, n = origin_entity_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      origin_entity_types_.Get(i));
  }

  // repeated string dest_entity_types = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dest_entity_types_.size());
  for (int i = 0, n = dest_entity_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dest_entity_types_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelationshipTypeSchemaChanges::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RelationshipTypeSchemaChanges*>(
      &from));
}

void RelationshipTypeSchemaChanges::MergeFrom(const RelationshipTypeSchemaChanges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.RelationshipTypeSchemaChanges)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  origin_entity_types_.MergeFrom(from.origin_entity_types_);
  dest_entity_types_.MergeFrom(from.dest_entity_types_);
}

void RelationshipTypeSchemaChanges::CopyFrom(const RelationshipTypeSchemaChanges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.RelationshipTypeSchemaChanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationshipTypeSchemaChanges::IsInitialized() const {
  return true;
}

void RelationshipTypeSchemaChanges::InternalSwap(RelationshipTypeSchemaChanges* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  origin_entity_types_.InternalSwap(&other->origin_entity_types_);
  dest_entity_types_.InternalSwap(&other->dest_entity_types_);
}

std::string RelationshipTypeSchemaChanges::GetTypeName() const {
  return "esriPBuffer.graph.RelationshipTypeSchemaChanges";
}


// ===================================================================

GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse::GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse() {}
GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse::GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse::MergeFrom(const GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse::GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse() {}
GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse::GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse::MergeFrom(const GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse::GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse() {}
GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse::GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse::MergeFrom(const GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse::GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse() {}
GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse::GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse::MergeFrom(const GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse::GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse() {}
GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse::GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse::MergeFrom(const GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse::GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse() {}
GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse::GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse::MergeFrom(const GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse::GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse() {}
GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse::GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse::MergeFrom(const GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse::GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse() {}
GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse::GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse::MergeFrom(const GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void GraphApplyEditsResult::InitAsDefaultInstance() {
  ::esriPBuffer::graph::_GraphApplyEditsResult_default_instance_._instance.get_mutable()->error_ = const_cast< ::esriPBuffer::graph::Error*>(
      ::esriPBuffer::graph::Error::internal_default_instance());
}
class GraphApplyEditsResult::_Internal {
 public:
  static const ::esriPBuffer::graph::Error& error(const GraphApplyEditsResult* msg);
};

const ::esriPBuffer::graph::Error&
GraphApplyEditsResult::_Internal::error(const GraphApplyEditsResult* msg) {
  return *msg->error_;
}
void GraphApplyEditsResult::clear_error() {
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
GraphApplyEditsResult::GraphApplyEditsResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  entity_add_results_(arena),
  relationship_add_results_(arena),
  entity_update_results_(arena),
  relationship_update_results_(arena),
  entity_delete_results_(arena),
  relationship_delete_results_(arena),
  cascading_relationship_delete_results_(arena),
  rel_type_schema_changes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.graph.GraphApplyEditsResult)
}
GraphApplyEditsResult::GraphApplyEditsResult(const GraphApplyEditsResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  entity_add_results_.MergeFrom(from.entity_add_results_);
  relationship_add_results_.MergeFrom(from.relationship_add_results_);
  entity_update_results_.MergeFrom(from.entity_update_results_);
  relationship_update_results_.MergeFrom(from.relationship_update_results_);
  entity_delete_results_.MergeFrom(from.entity_delete_results_);
  relationship_delete_results_.MergeFrom(from.relationship_delete_results_);
  cascading_relationship_delete_results_.MergeFrom(from.cascading_relationship_delete_results_);
  rel_type_schema_changes_.MergeFrom(from.rel_type_schema_changes_);
  if (from._internal_has_error()) {
    error_ = new ::esriPBuffer::graph::Error(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.graph.GraphApplyEditsResult)
}

void GraphApplyEditsResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphApplyEditsResult_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base);
  error_ = nullptr;
}

GraphApplyEditsResult::~GraphApplyEditsResult() {
  // @@protoc_insertion_point(destructor:esriPBuffer.graph.GraphApplyEditsResult)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GraphApplyEditsResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete error_;
}

void GraphApplyEditsResult::ArenaDtor(void* object) {
  GraphApplyEditsResult* _this = reinterpret_cast< GraphApplyEditsResult* >(object);
  (void)_this;
}
void GraphApplyEditsResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GraphApplyEditsResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphApplyEditsResult& GraphApplyEditsResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphApplyEditsResult_esriPBuffer_2fgraph_2fApplyEditsResponse_2eproto.base);
  return *internal_default_instance();
}


void GraphApplyEditsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.graph.GraphApplyEditsResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_add_results_.Clear();
  relationship_add_results_.Clear();
  entity_update_results_.Clear();
  relationship_update_results_.Clear();
  entity_delete_results_.Clear();
  relationship_delete_results_.Clear();
  cascading_relationship_delete_results_.Clear();
  rel_type_schema_changes_.Clear();
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* GraphApplyEditsResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.graph.Error error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .esriPBuffer.graph.EditResults> entity_add_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&entity_add_results_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .esriPBuffer.graph.EditResults> relationship_add_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&relationship_add_results_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .esriPBuffer.graph.EditResults> entity_update_results = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&entity_update_results_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .esriPBuffer.graph.EditResults> relationship_update_results = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&relationship_update_results_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .esriPBuffer.graph.EditResults> entity_delete_results = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&entity_delete_results_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .esriPBuffer.graph.EditResults> relationship_delete_results = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&relationship_delete_results_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .esriPBuffer.graph.CascadingRelationshipDeletes> cascading_relationship_delete_results = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&cascading_relationship_delete_results_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .esriPBuffer.graph.RelationshipTypeSchemaChanges> rel_type_schema_changes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&rel_type_schema_changes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphApplyEditsResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.graph.GraphApplyEditsResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.graph.Error error = 1;
  if (this->has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::error(this), target, stream);
  }

  // map<string, .esriPBuffer.graph.EditResults> entity_add_results = 2;
  if (!this->_internal_entity_add_results().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.GraphApplyEditsResult.EntityAddResultsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_entity_add_results().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_entity_add_results().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
          it = this->_internal_entity_add_results().begin();
          it != this->_internal_entity_add_results().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
          it = this->_internal_entity_add_results().begin();
          it != this->_internal_entity_add_results().end(); ++it) {
        target = GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .esriPBuffer.graph.EditResults> relationship_add_results = 3;
  if (!this->_internal_relationship_add_results().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.GraphApplyEditsResult.RelationshipAddResultsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_relationship_add_results().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_relationship_add_results().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
          it = this->_internal_relationship_add_results().begin();
          it != this->_internal_relationship_add_results().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
          it = this->_internal_relationship_add_results().begin();
          it != this->_internal_relationship_add_results().end(); ++it) {
        target = GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .esriPBuffer.graph.EditResults> entity_update_results = 4;
  if (!this->_internal_entity_update_results().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.GraphApplyEditsResult.EntityUpdateResultsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_entity_update_results().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_entity_update_results().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
          it = this->_internal_entity_update_results().begin();
          it != this->_internal_entity_update_results().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
          it = this->_internal_entity_update_results().begin();
          it != this->_internal_entity_update_results().end(); ++it) {
        target = GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .esriPBuffer.graph.EditResults> relationship_update_results = 5;
  if (!this->_internal_relationship_update_results().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.GraphApplyEditsResult.RelationshipUpdateResultsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_relationship_update_results().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_relationship_update_results().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
          it = this->_internal_relationship_update_results().begin();
          it != this->_internal_relationship_update_results().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
          it = this->_internal_relationship_update_results().begin();
          it != this->_internal_relationship_update_results().end(); ++it) {
        target = GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .esriPBuffer.graph.EditResults> entity_delete_results = 6;
  if (!this->_internal_entity_delete_results().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.GraphApplyEditsResult.EntityDeleteResultsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_entity_delete_results().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_entity_delete_results().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
          it = this->_internal_entity_delete_results().begin();
          it != this->_internal_entity_delete_results().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
          it = this->_internal_entity_delete_results().begin();
          it != this->_internal_entity_delete_results().end(); ++it) {
        target = GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .esriPBuffer.graph.EditResults> relationship_delete_results = 7;
  if (!this->_internal_relationship_delete_results().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.GraphApplyEditsResult.RelationshipDeleteResultsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_relationship_delete_results().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_relationship_delete_results().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
          it = this->_internal_relationship_delete_results().begin();
          it != this->_internal_relationship_delete_results().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
          it = this->_internal_relationship_delete_results().begin();
          it != this->_internal_relationship_delete_results().end(); ++it) {
        target = GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .esriPBuffer.graph.CascadingRelationshipDeletes> cascading_relationship_delete_results = 8;
  if (!this->_internal_cascading_relationship_delete_results().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::CascadingRelationshipDeletes >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.GraphApplyEditsResult.CascadingRelationshipDeleteResultsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_cascading_relationship_delete_results().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_cascading_relationship_delete_results().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::CascadingRelationshipDeletes >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::CascadingRelationshipDeletes >::const_iterator
          it = this->_internal_cascading_relationship_delete_results().begin();
          it != this->_internal_cascading_relationship_delete_results().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::CascadingRelationshipDeletes >::const_iterator
          it = this->_internal_cascading_relationship_delete_results().begin();
          it != this->_internal_cascading_relationship_delete_results().end(); ++it) {
        target = GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .esriPBuffer.graph.RelationshipTypeSchemaChanges> rel_type_schema_changes = 9;
  if (!this->_internal_rel_type_schema_changes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::RelationshipTypeSchemaChanges >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "esriPBuffer.graph.GraphApplyEditsResult.RelTypeSchemaChangesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_rel_type_schema_changes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_rel_type_schema_changes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::RelationshipTypeSchemaChanges >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::RelationshipTypeSchemaChanges >::const_iterator
          it = this->_internal_rel_type_schema_changes().begin();
          it != this->_internal_rel_type_schema_changes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::RelationshipTypeSchemaChanges >::const_iterator
          it = this->_internal_rel_type_schema_changes().begin();
          it != this->_internal_rel_type_schema_changes().end(); ++it) {
        target = GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.graph.GraphApplyEditsResult)
  return target;
}

size_t GraphApplyEditsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.graph.GraphApplyEditsResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .esriPBuffer.graph.EditResults> entity_add_results = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_entity_add_results_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
      it = this->_internal_entity_add_results().begin();
      it != this->_internal_entity_add_results().end(); ++it) {
    total_size += GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .esriPBuffer.graph.EditResults> relationship_add_results = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_relationship_add_results_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
      it = this->_internal_relationship_add_results().begin();
      it != this->_internal_relationship_add_results().end(); ++it) {
    total_size += GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .esriPBuffer.graph.EditResults> entity_update_results = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_entity_update_results_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
      it = this->_internal_entity_update_results().begin();
      it != this->_internal_entity_update_results().end(); ++it) {
    total_size += GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .esriPBuffer.graph.EditResults> relationship_update_results = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_relationship_update_results_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
      it = this->_internal_relationship_update_results().begin();
      it != this->_internal_relationship_update_results().end(); ++it) {
    total_size += GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .esriPBuffer.graph.EditResults> entity_delete_results = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_entity_delete_results_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
      it = this->_internal_entity_delete_results().begin();
      it != this->_internal_entity_delete_results().end(); ++it) {
    total_size += GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .esriPBuffer.graph.EditResults> relationship_delete_results = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_relationship_delete_results_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::EditResults >::const_iterator
      it = this->_internal_relationship_delete_results().begin();
      it != this->_internal_relationship_delete_results().end(); ++it) {
    total_size += GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .esriPBuffer.graph.CascadingRelationshipDeletes> cascading_relationship_delete_results = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cascading_relationship_delete_results_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::CascadingRelationshipDeletes >::const_iterator
      it = this->_internal_cascading_relationship_delete_results().begin();
      it != this->_internal_cascading_relationship_delete_results().end(); ++it) {
    total_size += GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .esriPBuffer.graph.RelationshipTypeSchemaChanges> rel_type_schema_changes = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rel_type_schema_changes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::RelationshipTypeSchemaChanges >::const_iterator
      it = this->_internal_rel_type_schema_changes().begin();
      it != this->_internal_rel_type_schema_changes().end(); ++it) {
    total_size += GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .esriPBuffer.graph.Error error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphApplyEditsResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GraphApplyEditsResult*>(
      &from));
}

void GraphApplyEditsResult::MergeFrom(const GraphApplyEditsResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.graph.GraphApplyEditsResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entity_add_results_.MergeFrom(from.entity_add_results_);
  relationship_add_results_.MergeFrom(from.relationship_add_results_);
  entity_update_results_.MergeFrom(from.entity_update_results_);
  relationship_update_results_.MergeFrom(from.relationship_update_results_);
  entity_delete_results_.MergeFrom(from.entity_delete_results_);
  relationship_delete_results_.MergeFrom(from.relationship_delete_results_);
  cascading_relationship_delete_results_.MergeFrom(from.cascading_relationship_delete_results_);
  rel_type_schema_changes_.MergeFrom(from.rel_type_schema_changes_);
  if (from.has_error()) {
    _internal_mutable_error()->::esriPBuffer::graph::Error::MergeFrom(from._internal_error());
  }
}

void GraphApplyEditsResult::CopyFrom(const GraphApplyEditsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.graph.GraphApplyEditsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphApplyEditsResult::IsInitialized() const {
  return true;
}

void GraphApplyEditsResult::InternalSwap(GraphApplyEditsResult* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  entity_add_results_.Swap(&other->entity_add_results_);
  relationship_add_results_.Swap(&other->relationship_add_results_);
  entity_update_results_.Swap(&other->entity_update_results_);
  relationship_update_results_.Swap(&other->relationship_update_results_);
  entity_delete_results_.Swap(&other->entity_delete_results_);
  relationship_delete_results_.Swap(&other->relationship_delete_results_);
  cascading_relationship_delete_results_.Swap(&other->cascading_relationship_delete_results_);
  rel_type_schema_changes_.Swap(&other->rel_type_schema_changes_);
  swap(error_, other->error_);
}

std::string GraphApplyEditsResult::GetTypeName() const {
  return "esriPBuffer.graph.GraphApplyEditsResult";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::EditResults_ErrorsEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::EditResults_ErrorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::EditResults_ErrorsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::EditResults* Arena::CreateMaybeMessage< ::esriPBuffer::graph::EditResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::EditResults >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::CascadingRelationshipDeletes* Arena::CreateMaybeMessage< ::esriPBuffer::graph::CascadingRelationshipDeletes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::CascadingRelationshipDeletes >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::RelationshipTypeSchemaChanges* Arena::CreateMaybeMessage< ::esriPBuffer::graph::RelationshipTypeSchemaChanges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::RelationshipTypeSchemaChanges >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphApplyEditsResult_EntityAddResultsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphApplyEditsResult_RelationshipAddResultsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphApplyEditsResult_EntityUpdateResultsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphApplyEditsResult_RelationshipUpdateResultsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphApplyEditsResult_EntityDeleteResultsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphApplyEditsResult_RelationshipDeleteResultsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphApplyEditsResult_CascadingRelationshipDeleteResultsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphApplyEditsResult_RelTypeSchemaChangesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::graph::GraphApplyEditsResult* Arena::CreateMaybeMessage< ::esriPBuffer::graph::GraphApplyEditsResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::graph::GraphApplyEditsResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
