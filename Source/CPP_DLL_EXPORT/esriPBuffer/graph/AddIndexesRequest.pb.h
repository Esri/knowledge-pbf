// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/AddIndexesRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fAddIndexesRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fAddIndexesRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "esriPBuffer/EsriTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fAddIndexesRequest_2eproto EXT_CLASS
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct EXT_CLASS TableStruct_esriPBuffer_2fgraph_2fAddIndexesRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace esriPBuffer {
namespace graph {
class GraphPropertyIndexAddsRequest;
class GraphPropertyIndexAddsRequestDefaultTypeInternal;
EXT_CLASS extern GraphPropertyIndexAddsRequestDefaultTypeInternal _GraphPropertyIndexAddsRequest_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> EXT_CLASS ::esriPBuffer::graph::GraphPropertyIndexAddsRequest* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphPropertyIndexAddsRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esriPBuffer {
namespace graph {

// ===================================================================

class EXT_CLASS GraphPropertyIndexAddsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphPropertyIndexAddsRequest) */ {
 public:
  inline GraphPropertyIndexAddsRequest() : GraphPropertyIndexAddsRequest(nullptr) {}
  virtual ~GraphPropertyIndexAddsRequest();

  GraphPropertyIndexAddsRequest(const GraphPropertyIndexAddsRequest& from);
  GraphPropertyIndexAddsRequest(GraphPropertyIndexAddsRequest&& from) noexcept
    : GraphPropertyIndexAddsRequest() {
    *this = ::std::move(from);
  }

  inline GraphPropertyIndexAddsRequest& operator=(const GraphPropertyIndexAddsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphPropertyIndexAddsRequest& operator=(GraphPropertyIndexAddsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphPropertyIndexAddsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphPropertyIndexAddsRequest* internal_default_instance() {
    return reinterpret_cast<const GraphPropertyIndexAddsRequest*>(
               &_GraphPropertyIndexAddsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GraphPropertyIndexAddsRequest& a, GraphPropertyIndexAddsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphPropertyIndexAddsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphPropertyIndexAddsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphPropertyIndexAddsRequest* New() const final {
    return CreateMaybeMessage<GraphPropertyIndexAddsRequest>(nullptr);
  }

  GraphPropertyIndexAddsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphPropertyIndexAddsRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphPropertyIndexAddsRequest& from);
  void MergeFrom(const GraphPropertyIndexAddsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphPropertyIndexAddsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphPropertyIndexAddsRequest";
  }
  protected:
  explicit GraphPropertyIndexAddsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldIndexesFieldNumber = 1,
  };
  // repeated .esriPBuffer.EsriTypes.FieldIndex field_indexes = 1;
  int field_indexes_size() const;
  private:
  int _internal_field_indexes_size() const;
  public:
  void clear_field_indexes();
  ::esriPBuffer::EsriTypes_FieldIndex* mutable_field_indexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_FieldIndex >*
      mutable_field_indexes();
  private:
  const ::esriPBuffer::EsriTypes_FieldIndex& _internal_field_indexes(int index) const;
  ::esriPBuffer::EsriTypes_FieldIndex* _internal_add_field_indexes();
  public:
  const ::esriPBuffer::EsriTypes_FieldIndex& field_indexes(int index) const;
  ::esriPBuffer::EsriTypes_FieldIndex* add_field_indexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_FieldIndex >&
      field_indexes() const;

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphPropertyIndexAddsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_FieldIndex > field_indexes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fAddIndexesRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GraphPropertyIndexAddsRequest

// repeated .esriPBuffer.EsriTypes.FieldIndex field_indexes = 1;
inline int GraphPropertyIndexAddsRequest::_internal_field_indexes_size() const {
  return field_indexes_.size();
}
inline int GraphPropertyIndexAddsRequest::field_indexes_size() const {
  return _internal_field_indexes_size();
}
inline ::esriPBuffer::EsriTypes_FieldIndex* GraphPropertyIndexAddsRequest::mutable_field_indexes(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphPropertyIndexAddsRequest.field_indexes)
  return field_indexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_FieldIndex >*
GraphPropertyIndexAddsRequest::mutable_field_indexes() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.GraphPropertyIndexAddsRequest.field_indexes)
  return &field_indexes_;
}
inline const ::esriPBuffer::EsriTypes_FieldIndex& GraphPropertyIndexAddsRequest::_internal_field_indexes(int index) const {
  return field_indexes_.Get(index);
}
inline const ::esriPBuffer::EsriTypes_FieldIndex& GraphPropertyIndexAddsRequest::field_indexes(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyIndexAddsRequest.field_indexes)
  return _internal_field_indexes(index);
}
inline ::esriPBuffer::EsriTypes_FieldIndex* GraphPropertyIndexAddsRequest::_internal_add_field_indexes() {
  return field_indexes_.Add();
}
inline ::esriPBuffer::EsriTypes_FieldIndex* GraphPropertyIndexAddsRequest::add_field_indexes() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GraphPropertyIndexAddsRequest.field_indexes)
  return _internal_add_field_indexes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_FieldIndex >&
GraphPropertyIndexAddsRequest::field_indexes() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.GraphPropertyIndexAddsRequest.field_indexes)
  return field_indexes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace esriPBuffer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fAddIndexesRequest_2eproto
