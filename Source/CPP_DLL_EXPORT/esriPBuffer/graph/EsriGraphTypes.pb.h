// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/EsriGraphTypes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
#include <google/protobuf/generated_enum_util.h>
#include "esriPBuffer/EsriTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto EXT_CLASS
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct EXT_CLASS TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace esriPBuffer {
namespace graph {
class AnyValue;
class AnyValueDefaultTypeInternal;
EXT_CLASS extern AnyValueDefaultTypeInternal _AnyValue_default_instance_;
class ArrayValue;
class ArrayValueDefaultTypeInternal;
EXT_CLASS extern ArrayValueDefaultTypeInternal _ArrayValue_default_instance_;
class BoolArray;
class BoolArrayDefaultTypeInternal;
EXT_CLASS extern BoolArrayDefaultTypeInternal _BoolArray_default_instance_;
class DateTimeArray;
class DateTimeArrayDefaultTypeInternal;
EXT_CLASS extern DateTimeArrayDefaultTypeInternal _DateTimeArray_default_instance_;
class DoubleArray;
class DoubleArrayDefaultTypeInternal;
EXT_CLASS extern DoubleArrayDefaultTypeInternal _DoubleArray_default_instance_;
class EntityValue;
class EntityValueDefaultTypeInternal;
EXT_CLASS extern EntityValueDefaultTypeInternal _EntityValue_default_instance_;
class EntityValue_PropertiesEntry_DoNotUse;
class EntityValue_PropertiesEntry_DoNotUseDefaultTypeInternal;
EXT_CLASS extern EntityValue_PropertiesEntry_DoNotUseDefaultTypeInternal _EntityValue_PropertiesEntry_DoNotUse_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
EXT_CLASS extern ErrorDefaultTypeInternal _Error_default_instance_;
class FloatArray;
class FloatArrayDefaultTypeInternal;
EXT_CLASS extern FloatArrayDefaultTypeInternal _FloatArray_default_instance_;
class GeometryArray;
class GeometryArrayDefaultTypeInternal;
EXT_CLASS extern GeometryArrayDefaultTypeInternal _GeometryArray_default_instance_;
class GeometryValue;
class GeometryValueDefaultTypeInternal;
EXT_CLASS extern GeometryValueDefaultTypeInternal _GeometryValue_default_instance_;
class GeometryValue_EsriDefaultGeometry;
class GeometryValue_EsriDefaultGeometryDefaultTypeInternal;
EXT_CLASS extern GeometryValue_EsriDefaultGeometryDefaultTypeInternal _GeometryValue_EsriDefaultGeometry_default_instance_;
class Int32Array;
class Int32ArrayDefaultTypeInternal;
EXT_CLASS extern Int32ArrayDefaultTypeInternal _Int32Array_default_instance_;
class Int64Array;
class Int64ArrayDefaultTypeInternal;
EXT_CLASS extern Int64ArrayDefaultTypeInternal _Int64Array_default_instance_;
class NullArray;
class NullArrayDefaultTypeInternal;
EXT_CLASS extern NullArrayDefaultTypeInternal _NullArray_default_instance_;
class ObjectValue;
class ObjectValueDefaultTypeInternal;
EXT_CLASS extern ObjectValueDefaultTypeInternal _ObjectValue_default_instance_;
class ObjectValue_PropertiesEntry_DoNotUse;
class ObjectValue_PropertiesEntry_DoNotUseDefaultTypeInternal;
EXT_CLASS extern ObjectValue_PropertiesEntry_DoNotUseDefaultTypeInternal _ObjectValue_PropertiesEntry_DoNotUse_default_instance_;
class PathValue;
class PathValueDefaultTypeInternal;
EXT_CLASS extern PathValueDefaultTypeInternal _PathValue_default_instance_;
class PrimitiveValue;
class PrimitiveValueDefaultTypeInternal;
EXT_CLASS extern PrimitiveValueDefaultTypeInternal _PrimitiveValue_default_instance_;
class QuantizationParameters;
class QuantizationParametersDefaultTypeInternal;
EXT_CLASS extern QuantizationParametersDefaultTypeInternal _QuantizationParameters_default_instance_;
class RelationshipValue;
class RelationshipValueDefaultTypeInternal;
EXT_CLASS extern RelationshipValueDefaultTypeInternal _RelationshipValue_default_instance_;
class RelationshipValue_PropertiesEntry_DoNotUse;
class RelationshipValue_PropertiesEntry_DoNotUseDefaultTypeInternal;
EXT_CLASS extern RelationshipValue_PropertiesEntry_DoNotUseDefaultTypeInternal _RelationshipValue_PropertiesEntry_DoNotUse_default_instance_;
class StringArray;
class StringArrayDefaultTypeInternal;
EXT_CLASS extern StringArrayDefaultTypeInternal _StringArray_default_instance_;
class Transform;
class TransformDefaultTypeInternal;
EXT_CLASS extern TransformDefaultTypeInternal _Transform_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> EXT_CLASS ::esriPBuffer::graph::AnyValue* Arena::CreateMaybeMessage<::esriPBuffer::graph::AnyValue>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::ArrayValue* Arena::CreateMaybeMessage<::esriPBuffer::graph::ArrayValue>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::BoolArray* Arena::CreateMaybeMessage<::esriPBuffer::graph::BoolArray>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::DateTimeArray* Arena::CreateMaybeMessage<::esriPBuffer::graph::DateTimeArray>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::DoubleArray* Arena::CreateMaybeMessage<::esriPBuffer::graph::DoubleArray>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::EntityValue* Arena::CreateMaybeMessage<::esriPBuffer::graph::EntityValue>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::EntityValue_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::esriPBuffer::graph::EntityValue_PropertiesEntry_DoNotUse>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::Error* Arena::CreateMaybeMessage<::esriPBuffer::graph::Error>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::FloatArray* Arena::CreateMaybeMessage<::esriPBuffer::graph::FloatArray>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::GeometryArray* Arena::CreateMaybeMessage<::esriPBuffer::graph::GeometryArray>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::GeometryValue* Arena::CreateMaybeMessage<::esriPBuffer::graph::GeometryValue>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* Arena::CreateMaybeMessage<::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::Int32Array* Arena::CreateMaybeMessage<::esriPBuffer::graph::Int32Array>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::Int64Array* Arena::CreateMaybeMessage<::esriPBuffer::graph::Int64Array>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::NullArray* Arena::CreateMaybeMessage<::esriPBuffer::graph::NullArray>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::ObjectValue* Arena::CreateMaybeMessage<::esriPBuffer::graph::ObjectValue>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::ObjectValue_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::esriPBuffer::graph::ObjectValue_PropertiesEntry_DoNotUse>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::PathValue* Arena::CreateMaybeMessage<::esriPBuffer::graph::PathValue>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::PrimitiveValue* Arena::CreateMaybeMessage<::esriPBuffer::graph::PrimitiveValue>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::QuantizationParameters* Arena::CreateMaybeMessage<::esriPBuffer::graph::QuantizationParameters>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::RelationshipValue* Arena::CreateMaybeMessage<::esriPBuffer::graph::RelationshipValue>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::RelationshipValue_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::esriPBuffer::graph::RelationshipValue_PropertiesEntry_DoNotUse>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::StringArray* Arena::CreateMaybeMessage<::esriPBuffer::graph::StringArray>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::Transform* Arena::CreateMaybeMessage<::esriPBuffer::graph::Transform>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esriPBuffer {
namespace graph {

enum QuantizationParameters_QuantizeMode : int {
  QuantizationParameters_QuantizeMode_view = 0,
  QuantizationParameters_QuantizeMode_edit = 1,
  QuantizationParameters_QuantizeMode_QuantizationParameters_QuantizeMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  QuantizationParameters_QuantizeMode_QuantizationParameters_QuantizeMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
EXT_CLASS bool QuantizationParameters_QuantizeMode_IsValid(int value);
constexpr QuantizationParameters_QuantizeMode QuantizationParameters_QuantizeMode_QuantizeMode_MIN = QuantizationParameters_QuantizeMode_view;
constexpr QuantizationParameters_QuantizeMode QuantizationParameters_QuantizeMode_QuantizeMode_MAX = QuantizationParameters_QuantizeMode_edit;
constexpr int QuantizationParameters_QuantizeMode_QuantizeMode_ARRAYSIZE = QuantizationParameters_QuantizeMode_QuantizeMode_MAX + 1;

const std::string& QuantizationParameters_QuantizeMode_Name(QuantizationParameters_QuantizeMode value);
template<typename T>
inline const std::string& QuantizationParameters_QuantizeMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QuantizationParameters_QuantizeMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QuantizationParameters_QuantizeMode_Name.");
  return QuantizationParameters_QuantizeMode_Name(static_cast<QuantizationParameters_QuantizeMode>(enum_t_value));
}
bool QuantizationParameters_QuantizeMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QuantizationParameters_QuantizeMode* value);
// ===================================================================

class EXT_CLASS FloatArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.FloatArray) */ {
 public:
  inline FloatArray() : FloatArray(nullptr) {}
  virtual ~FloatArray();

  FloatArray(const FloatArray& from);
  FloatArray(FloatArray&& from) noexcept
    : FloatArray() {
    *this = ::std::move(from);
  }

  inline FloatArray& operator=(const FloatArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatArray& operator=(FloatArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FloatArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatArray* internal_default_instance() {
    return reinterpret_cast<const FloatArray*>(
               &_FloatArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FloatArray& a, FloatArray& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatArray* New() const final {
    return CreateMaybeMessage<FloatArray>(nullptr);
  }

  FloatArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatArray>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FloatArray& from);
  void MergeFrom(const FloatArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FloatArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.FloatArray";
  }
  protected:
  explicit FloatArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated float value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  float _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value() const;
  void _internal_add_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value();
  public:
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.FloatArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS DoubleArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.DoubleArray) */ {
 public:
  inline DoubleArray() : DoubleArray(nullptr) {}
  virtual ~DoubleArray();

  DoubleArray(const DoubleArray& from);
  DoubleArray(DoubleArray&& from) noexcept
    : DoubleArray() {
    *this = ::std::move(from);
  }

  inline DoubleArray& operator=(const DoubleArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleArray& operator=(DoubleArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DoubleArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoubleArray* internal_default_instance() {
    return reinterpret_cast<const DoubleArray*>(
               &_DoubleArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DoubleArray& a, DoubleArray& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleArray* New() const final {
    return CreateMaybeMessage<DoubleArray>(nullptr);
  }

  DoubleArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleArray>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DoubleArray& from);
  void MergeFrom(const DoubleArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DoubleArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.DoubleArray";
  }
  protected:
  explicit DoubleArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated double value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.DoubleArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS Int32Array PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.Int32Array) */ {
 public:
  inline Int32Array() : Int32Array(nullptr) {}
  virtual ~Int32Array();

  Int32Array(const Int32Array& from);
  Int32Array(Int32Array&& from) noexcept
    : Int32Array() {
    *this = ::std::move(from);
  }

  inline Int32Array& operator=(const Int32Array& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int32Array& operator=(Int32Array&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Int32Array& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Int32Array* internal_default_instance() {
    return reinterpret_cast<const Int32Array*>(
               &_Int32Array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Int32Array& a, Int32Array& b) {
    a.Swap(&b);
  }
  inline void Swap(Int32Array* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int32Array* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Int32Array* New() const final {
    return CreateMaybeMessage<Int32Array>(nullptr);
  }

  Int32Array* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Int32Array>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Int32Array& from);
  void MergeFrom(const Int32Array& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Int32Array* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.Int32Array";
  }
  protected:
  explicit Int32Array(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated sint32 value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.Int32Array)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS Int64Array PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.Int64Array) */ {
 public:
  inline Int64Array() : Int64Array(nullptr) {}
  virtual ~Int64Array();

  Int64Array(const Int64Array& from);
  Int64Array(Int64Array&& from) noexcept
    : Int64Array() {
    *this = ::std::move(from);
  }

  inline Int64Array& operator=(const Int64Array& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Array& operator=(Int64Array&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Int64Array& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Int64Array* internal_default_instance() {
    return reinterpret_cast<const Int64Array*>(
               &_Int64Array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Int64Array& a, Int64Array& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Array* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Array* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Int64Array* New() const final {
    return CreateMaybeMessage<Int64Array>(nullptr);
  }

  Int64Array* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Int64Array>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Int64Array& from);
  void MergeFrom(const Int64Array& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Int64Array* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.Int64Array";
  }
  protected:
  explicit Int64Array(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated sint64 value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.Int64Array)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS BoolArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.BoolArray) */ {
 public:
  inline BoolArray() : BoolArray(nullptr) {}
  virtual ~BoolArray();

  BoolArray(const BoolArray& from);
  BoolArray(BoolArray&& from) noexcept
    : BoolArray() {
    *this = ::std::move(from);
  }

  inline BoolArray& operator=(const BoolArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolArray& operator=(BoolArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BoolArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoolArray* internal_default_instance() {
    return reinterpret_cast<const BoolArray*>(
               &_BoolArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BoolArray& a, BoolArray& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoolArray* New() const final {
    return CreateMaybeMessage<BoolArray>(nullptr);
  }

  BoolArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoolArray>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BoolArray& from);
  void MergeFrom(const BoolArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoolArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.BoolArray";
  }
  protected:
  explicit BoolArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated bool value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  bool _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_value() const;
  void _internal_add_value(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_value();
  public:
  bool value(int index) const;
  void set_value(int index, bool value);
  void add_value(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.BoolArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS DateTimeArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.DateTimeArray) */ {
 public:
  inline DateTimeArray() : DateTimeArray(nullptr) {}
  virtual ~DateTimeArray();

  DateTimeArray(const DateTimeArray& from);
  DateTimeArray(DateTimeArray&& from) noexcept
    : DateTimeArray() {
    *this = ::std::move(from);
  }

  inline DateTimeArray& operator=(const DateTimeArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateTimeArray& operator=(DateTimeArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DateTimeArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTimeArray* internal_default_instance() {
    return reinterpret_cast<const DateTimeArray*>(
               &_DateTimeArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DateTimeArray& a, DateTimeArray& b) {
    a.Swap(&b);
  }
  inline void Swap(DateTimeArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DateTimeArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DateTimeArray* New() const final {
    return CreateMaybeMessage<DateTimeArray>(nullptr);
  }

  DateTimeArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeArray>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DateTimeArray& from);
  void MergeFrom(const DateTimeArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DateTimeArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.DateTimeArray";
  }
  protected:
  explicit DateTimeArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated int64 value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.DateTimeArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS NullArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.NullArray) */ {
 public:
  inline NullArray() : NullArray(nullptr) {}
  virtual ~NullArray();

  NullArray(const NullArray& from);
  NullArray(NullArray&& from) noexcept
    : NullArray() {
    *this = ::std::move(from);
  }

  inline NullArray& operator=(const NullArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline NullArray& operator=(NullArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const NullArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NullArray* internal_default_instance() {
    return reinterpret_cast<const NullArray*>(
               &_NullArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NullArray& a, NullArray& b) {
    a.Swap(&b);
  }
  inline void Swap(NullArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NullArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NullArray* New() const final {
    return CreateMaybeMessage<NullArray>(nullptr);
  }

  NullArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NullArray>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NullArray& from);
  void MergeFrom(const NullArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NullArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.NullArray";
  }
  protected:
  explicit NullArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthFieldNumber = 1,
  };
  // sint64 length = 1;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int64 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.NullArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS StringArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.StringArray) */ {
 public:
  inline StringArray() : StringArray(nullptr) {}
  virtual ~StringArray();

  StringArray(const StringArray& from);
  StringArray(StringArray&& from) noexcept
    : StringArray() {
    *this = ::std::move(from);
  }

  inline StringArray& operator=(const StringArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringArray& operator=(StringArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const StringArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringArray* internal_default_instance() {
    return reinterpret_cast<const StringArray*>(
               &_StringArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StringArray& a, StringArray& b) {
    a.Swap(&b);
  }
  inline void Swap(StringArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringArray* New() const final {
    return CreateMaybeMessage<StringArray>(nullptr);
  }

  StringArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringArray>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StringArray& from);
  void MergeFrom(const StringArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.StringArray";
  }
  protected:
  explicit StringArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated string value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.StringArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS GeometryValue_EsriDefaultGeometry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry) */ {
 public:
  inline GeometryValue_EsriDefaultGeometry() : GeometryValue_EsriDefaultGeometry(nullptr) {}
  virtual ~GeometryValue_EsriDefaultGeometry();

  GeometryValue_EsriDefaultGeometry(const GeometryValue_EsriDefaultGeometry& from);
  GeometryValue_EsriDefaultGeometry(GeometryValue_EsriDefaultGeometry&& from) noexcept
    : GeometryValue_EsriDefaultGeometry() {
    *this = ::std::move(from);
  }

  inline GeometryValue_EsriDefaultGeometry& operator=(const GeometryValue_EsriDefaultGeometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryValue_EsriDefaultGeometry& operator=(GeometryValue_EsriDefaultGeometry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GeometryValue_EsriDefaultGeometry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryValue_EsriDefaultGeometry* internal_default_instance() {
    return reinterpret_cast<const GeometryValue_EsriDefaultGeometry*>(
               &_GeometryValue_EsriDefaultGeometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GeometryValue_EsriDefaultGeometry& a, GeometryValue_EsriDefaultGeometry& b) {
    a.Swap(&b);
  }
  inline void Swap(GeometryValue_EsriDefaultGeometry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeometryValue_EsriDefaultGeometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeometryValue_EsriDefaultGeometry* New() const final {
    return CreateMaybeMessage<GeometryValue_EsriDefaultGeometry>(nullptr);
  }

  GeometryValue_EsriDefaultGeometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryValue_EsriDefaultGeometry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GeometryValue_EsriDefaultGeometry& from);
  void MergeFrom(const GeometryValue_EsriDefaultGeometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeometryValue_EsriDefaultGeometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GeometryValue.EsriDefaultGeometry";
  }
  protected:
  explicit GeometryValue_EsriDefaultGeometry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthsFieldNumber = 3,
    kCoordsFieldNumber = 4,
    kHasZFieldNumber = 1,
    kHasMFieldNumber = 2,
  };
  // repeated uint32 lengths = 3 [packed = true];
  int lengths_size() const;
  private:
  int _internal_lengths_size() const;
  public:
  void clear_lengths();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lengths(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_lengths() const;
  void _internal_add_lengths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_lengths();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 lengths(int index) const;
  void set_lengths(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_lengths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      lengths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_lengths();

  // repeated sint64 coords = 4 [packed = true];
  int coords_size() const;
  private:
  int _internal_coords_size() const;
  public:
  void clear_coords();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_coords(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_coords() const;
  void _internal_add_coords(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_coords();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 coords(int index) const;
  void set_coords(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_coords(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      coords() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_coords();

  // bool hasZ = 1;
  void clear_hasz();
  bool hasz() const;
  void set_hasz(bool value);
  private:
  bool _internal_hasz() const;
  void _internal_set_hasz(bool value);
  public:

  // bool hasM = 2;
  void clear_hasm();
  bool hasm() const;
  void set_hasm(bool value);
  private:
  bool _internal_hasm() const;
  void _internal_set_hasm(bool value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > lengths_;
  mutable std::atomic<int> _lengths_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > coords_;
  mutable std::atomic<int> _coords_cached_byte_size_;
  bool hasz_;
  bool hasm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS GeometryValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GeometryValue) */ {
 public:
  inline GeometryValue() : GeometryValue(nullptr) {}
  virtual ~GeometryValue();

  GeometryValue(const GeometryValue& from);
  GeometryValue(GeometryValue&& from) noexcept
    : GeometryValue() {
    *this = ::std::move(from);
  }

  inline GeometryValue& operator=(const GeometryValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryValue& operator=(GeometryValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GeometryValue& default_instance();

  enum CompressedGeometryCase {
    kGeometry = 2,
    COMPRESSED_GEOMETRY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryValue* internal_default_instance() {
    return reinterpret_cast<const GeometryValue*>(
               &_GeometryValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GeometryValue& a, GeometryValue& b) {
    a.Swap(&b);
  }
  inline void Swap(GeometryValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeometryValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeometryValue* New() const final {
    return CreateMaybeMessage<GeometryValue>(nullptr);
  }

  GeometryValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GeometryValue& from);
  void MergeFrom(const GeometryValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeometryValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GeometryValue";
  }
  protected:
  explicit GeometryValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GeometryValue_EsriDefaultGeometry EsriDefaultGeometry;

  // accessors -------------------------------------------------------

  enum : int {
    kGeometryTypeFieldNumber = 1,
    kGeometryFieldNumber = 2,
  };
  // .esriPBuffer.EsriTypes.GeometryType geometryType = 1;
  void clear_geometrytype();
  ::esriPBuffer::EsriTypes_GeometryType geometrytype() const;
  void set_geometrytype(::esriPBuffer::EsriTypes_GeometryType value);
  private:
  ::esriPBuffer::EsriTypes_GeometryType _internal_geometrytype() const;
  void _internal_set_geometrytype(::esriPBuffer::EsriTypes_GeometryType value);
  public:

  // .esriPBuffer.graph.GeometryValue.EsriDefaultGeometry geometry = 2;
  bool has_geometry() const;
  private:
  bool _internal_has_geometry() const;
  public:
  void clear_geometry();
  const ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry& geometry() const;
  ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* release_geometry();
  ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* mutable_geometry();
  void set_allocated_geometry(::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* geometry);
  private:
  const ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry& _internal_geometry() const;
  ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* _internal_mutable_geometry();
  public:
  void unsafe_arena_set_allocated_geometry(
      ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* geometry);
  ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* unsafe_arena_release_geometry();

  void clear_compressed_geometry();
  CompressedGeometryCase compressed_geometry_case() const;
  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GeometryValue)
 private:
  class _Internal;
  void set_has_geometry();

  inline bool has_compressed_geometry() const;
  inline void clear_has_compressed_geometry();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int geometrytype_;
  union CompressedGeometryUnion {
    CompressedGeometryUnion() {}
    ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* geometry_;
  } compressed_geometry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS QuantizationParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.QuantizationParameters) */ {
 public:
  inline QuantizationParameters() : QuantizationParameters(nullptr) {}
  virtual ~QuantizationParameters();

  QuantizationParameters(const QuantizationParameters& from);
  QuantizationParameters(QuantizationParameters&& from) noexcept
    : QuantizationParameters() {
    *this = ::std::move(from);
  }

  inline QuantizationParameters& operator=(const QuantizationParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuantizationParameters& operator=(QuantizationParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const QuantizationParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantizationParameters* internal_default_instance() {
    return reinterpret_cast<const QuantizationParameters*>(
               &_QuantizationParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QuantizationParameters& a, QuantizationParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(QuantizationParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuantizationParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuantizationParameters* New() const final {
    return CreateMaybeMessage<QuantizationParameters>(nullptr);
  }

  QuantizationParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuantizationParameters>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const QuantizationParameters& from);
  void MergeFrom(const QuantizationParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QuantizationParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.QuantizationParameters";
  }
  protected:
  explicit QuantizationParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef QuantizationParameters_QuantizeMode QuantizeMode;
  static constexpr QuantizeMode view =
    QuantizationParameters_QuantizeMode_view;
  static constexpr QuantizeMode edit =
    QuantizationParameters_QuantizeMode_edit;
  static inline bool QuantizeMode_IsValid(int value) {
    return QuantizationParameters_QuantizeMode_IsValid(value);
  }
  static constexpr QuantizeMode QuantizeMode_MIN =
    QuantizationParameters_QuantizeMode_QuantizeMode_MIN;
  static constexpr QuantizeMode QuantizeMode_MAX =
    QuantizationParameters_QuantizeMode_QuantizeMode_MAX;
  static constexpr int QuantizeMode_ARRAYSIZE =
    QuantizationParameters_QuantizeMode_QuantizeMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& QuantizeMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, QuantizeMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function QuantizeMode_Name.");
    return QuantizationParameters_QuantizeMode_Name(enum_t_value);
  }
  static inline bool QuantizeMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      QuantizeMode* value) {
    return QuantizationParameters_QuantizeMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExtentFieldNumber = 1,
    kToleranceFieldNumber = 3,
    kModeFieldNumber = 2,
  };
  // .esriPBuffer.EsriTypes.Envelope extent = 1;
  bool has_extent() const;
  private:
  bool _internal_has_extent() const;
  public:
  void clear_extent();
  const ::esriPBuffer::EsriTypes_Envelope& extent() const;
  ::esriPBuffer::EsriTypes_Envelope* release_extent();
  ::esriPBuffer::EsriTypes_Envelope* mutable_extent();
  void set_allocated_extent(::esriPBuffer::EsriTypes_Envelope* extent);
  private:
  const ::esriPBuffer::EsriTypes_Envelope& _internal_extent() const;
  ::esriPBuffer::EsriTypes_Envelope* _internal_mutable_extent();
  public:
  void unsafe_arena_set_allocated_extent(
      ::esriPBuffer::EsriTypes_Envelope* extent);
  ::esriPBuffer::EsriTypes_Envelope* unsafe_arena_release_extent();

  // double tolerance = 3;
  void clear_tolerance();
  double tolerance() const;
  void set_tolerance(double value);
  private:
  double _internal_tolerance() const;
  void _internal_set_tolerance(double value);
  public:

  // .esriPBuffer.graph.QuantizationParameters.QuantizeMode mode = 2;
  void clear_mode();
  ::esriPBuffer::graph::QuantizationParameters_QuantizeMode mode() const;
  void set_mode(::esriPBuffer::graph::QuantizationParameters_QuantizeMode value);
  private:
  ::esriPBuffer::graph::QuantizationParameters_QuantizeMode _internal_mode() const;
  void _internal_set_mode(::esriPBuffer::graph::QuantizationParameters_QuantizeMode value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.QuantizationParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::esriPBuffer::EsriTypes_Envelope* extent_;
  double tolerance_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS Transform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  virtual ~Transform();

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Transform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform* New() const final {
    return CreateMaybeMessage<Transform>(nullptr);
  }

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.Transform";
  }
  protected:
  explicit Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFieldNumber = 1,
    kTranslateFieldNumber = 2,
  };
  // .esriPBuffer.EsriTypes.Scale scale = 1;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::esriPBuffer::EsriTypes_Scale& scale() const;
  ::esriPBuffer::EsriTypes_Scale* release_scale();
  ::esriPBuffer::EsriTypes_Scale* mutable_scale();
  void set_allocated_scale(::esriPBuffer::EsriTypes_Scale* scale);
  private:
  const ::esriPBuffer::EsriTypes_Scale& _internal_scale() const;
  ::esriPBuffer::EsriTypes_Scale* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::esriPBuffer::EsriTypes_Scale* scale);
  ::esriPBuffer::EsriTypes_Scale* unsafe_arena_release_scale();

  // .esriPBuffer.EsriTypes.Translate translate = 2;
  bool has_translate() const;
  private:
  bool _internal_has_translate() const;
  public:
  void clear_translate();
  const ::esriPBuffer::EsriTypes_Translate& translate() const;
  ::esriPBuffer::EsriTypes_Translate* release_translate();
  ::esriPBuffer::EsriTypes_Translate* mutable_translate();
  void set_allocated_translate(::esriPBuffer::EsriTypes_Translate* translate);
  private:
  const ::esriPBuffer::EsriTypes_Translate& _internal_translate() const;
  ::esriPBuffer::EsriTypes_Translate* _internal_mutable_translate();
  public:
  void unsafe_arena_set_allocated_translate(
      ::esriPBuffer::EsriTypes_Translate* translate);
  ::esriPBuffer::EsriTypes_Translate* unsafe_arena_release_translate();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.Transform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::esriPBuffer::EsriTypes_Scale* scale_;
  ::esriPBuffer::EsriTypes_Translate* translate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS GeometryArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GeometryArray) */ {
 public:
  inline GeometryArray() : GeometryArray(nullptr) {}
  virtual ~GeometryArray();

  GeometryArray(const GeometryArray& from);
  GeometryArray(GeometryArray&& from) noexcept
    : GeometryArray() {
    *this = ::std::move(from);
  }

  inline GeometryArray& operator=(const GeometryArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometryArray& operator=(GeometryArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GeometryArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeometryArray* internal_default_instance() {
    return reinterpret_cast<const GeometryArray*>(
               &_GeometryArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GeometryArray& a, GeometryArray& b) {
    a.Swap(&b);
  }
  inline void Swap(GeometryArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeometryArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeometryArray* New() const final {
    return CreateMaybeMessage<GeometryArray>(nullptr);
  }

  GeometryArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeometryArray>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GeometryArray& from);
  void MergeFrom(const GeometryArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeometryArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GeometryArray";
  }
  protected:
  explicit GeometryArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .esriPBuffer.graph.GeometryValue value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::esriPBuffer::graph::GeometryValue* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GeometryValue >*
      mutable_value();
  private:
  const ::esriPBuffer::graph::GeometryValue& _internal_value(int index) const;
  ::esriPBuffer::graph::GeometryValue* _internal_add_value();
  public:
  const ::esriPBuffer::graph::GeometryValue& value(int index) const;
  ::esriPBuffer::graph::GeometryValue* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GeometryValue >&
      value() const;

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GeometryArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GeometryValue > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS PrimitiveValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.PrimitiveValue) */ {
 public:
  inline PrimitiveValue() : PrimitiveValue(nullptr) {}
  virtual ~PrimitiveValue();

  PrimitiveValue(const PrimitiveValue& from);
  PrimitiveValue(PrimitiveValue&& from) noexcept
    : PrimitiveValue() {
    *this = ::std::move(from);
  }

  inline PrimitiveValue& operator=(const PrimitiveValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimitiveValue& operator=(PrimitiveValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PrimitiveValue& default_instance();

  enum ValueTypeCase {
    kStringValue = 1,
    kFloatValue = 2,
    kFloatCompressedAsInt32 = 3,
    kDoubleValue = 4,
    kDoubleCompressedAsFloat = 5,
    kDoubleCompressedAsInt64 = 6,
    kSint64Value = 7,
    kBoolValue = 8,
    kUuidValue = 9,
    kGeometryValue = 11,
    kNullTag = 12,
    kDatetimeValue = 13,
    VALUE_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrimitiveValue* internal_default_instance() {
    return reinterpret_cast<const PrimitiveValue*>(
               &_PrimitiveValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PrimitiveValue& a, PrimitiveValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimitiveValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimitiveValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrimitiveValue* New() const final {
    return CreateMaybeMessage<PrimitiveValue>(nullptr);
  }

  PrimitiveValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrimitiveValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PrimitiveValue& from);
  void MergeFrom(const PrimitiveValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrimitiveValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.PrimitiveValue";
  }
  protected:
  explicit PrimitiveValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 1,
    kFloatValueFieldNumber = 2,
    kFloatCompressedAsInt32FieldNumber = 3,
    kDoubleValueFieldNumber = 4,
    kDoubleCompressedAsFloatFieldNumber = 5,
    kDoubleCompressedAsInt64FieldNumber = 6,
    kSint64ValueFieldNumber = 7,
    kBoolValueFieldNumber = 8,
    kUuidValueFieldNumber = 9,
    kGeometryValueFieldNumber = 11,
    kNullTagFieldNumber = 12,
    kDatetimeValueFieldNumber = 13,
  };
  // string string_value = 1;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // float float_value = 2;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // sint32 float_compressed_as_int32 = 3;
  private:
  bool _internal_has_float_compressed_as_int32() const;
  public:
  void clear_float_compressed_as_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 float_compressed_as_int32() const;
  void set_float_compressed_as_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_float_compressed_as_int32() const;
  void _internal_set_float_compressed_as_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double double_value = 4;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // float double_compressed_as_float = 5;
  private:
  bool _internal_has_double_compressed_as_float() const;
  public:
  void clear_double_compressed_as_float();
  float double_compressed_as_float() const;
  void set_double_compressed_as_float(float value);
  private:
  float _internal_double_compressed_as_float() const;
  void _internal_set_double_compressed_as_float(float value);
  public:

  // sint64 double_compressed_as_int64 = 6;
  private:
  bool _internal_has_double_compressed_as_int64() const;
  public:
  void clear_double_compressed_as_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 double_compressed_as_int64() const;
  void set_double_compressed_as_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_double_compressed_as_int64() const;
  void _internal_set_double_compressed_as_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 sint64_value = 7;
  private:
  bool _internal_has_sint64_value() const;
  public:
  void clear_sint64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 sint64_value() const;
  void set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64_value() const;
  void _internal_set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool bool_value = 8;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // bytes uuid_value = 9;
  private:
  bool _internal_has_uuid_value() const;
  public:
  void clear_uuid_value();
  const std::string& uuid_value() const;
  void set_uuid_value(const std::string& value);
  void set_uuid_value(std::string&& value);
  void set_uuid_value(const char* value);
  void set_uuid_value(const void* value, size_t size);
  std::string* mutable_uuid_value();
  std::string* release_uuid_value();
  void set_allocated_uuid_value(std::string* uuid_value);
  private:
  const std::string& _internal_uuid_value() const;
  void _internal_set_uuid_value(const std::string& value);
  std::string* _internal_mutable_uuid_value();
  public:

  // .esriPBuffer.graph.GeometryValue geometry_value = 11;
  bool has_geometry_value() const;
  private:
  bool _internal_has_geometry_value() const;
  public:
  void clear_geometry_value();
  const ::esriPBuffer::graph::GeometryValue& geometry_value() const;
  ::esriPBuffer::graph::GeometryValue* release_geometry_value();
  ::esriPBuffer::graph::GeometryValue* mutable_geometry_value();
  void set_allocated_geometry_value(::esriPBuffer::graph::GeometryValue* geometry_value);
  private:
  const ::esriPBuffer::graph::GeometryValue& _internal_geometry_value() const;
  ::esriPBuffer::graph::GeometryValue* _internal_mutable_geometry_value();
  public:
  void unsafe_arena_set_allocated_geometry_value(
      ::esriPBuffer::graph::GeometryValue* geometry_value);
  ::esriPBuffer::graph::GeometryValue* unsafe_arena_release_geometry_value();

  // bool null_tag = 12;
  private:
  bool _internal_has_null_tag() const;
  public:
  void clear_null_tag();
  bool null_tag() const;
  void set_null_tag(bool value);
  private:
  bool _internal_null_tag() const;
  void _internal_set_null_tag(bool value);
  public:

  // int64 datetime_value = 13;
  private:
  bool _internal_has_datetime_value() const;
  public:
  void clear_datetime_value();
  ::PROTOBUF_NAMESPACE_ID::int64 datetime_value() const;
  void set_datetime_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_datetime_value() const;
  void _internal_set_datetime_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  void clear_value_type();
  ValueTypeCase value_type_case() const;
  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.PrimitiveValue)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_float_value();
  void set_has_float_compressed_as_int32();
  void set_has_double_value();
  void set_has_double_compressed_as_float();
  void set_has_double_compressed_as_int64();
  void set_has_sint64_value();
  void set_has_bool_value();
  void set_has_uuid_value();
  void set_has_geometry_value();
  void set_has_null_tag();
  void set_has_datetime_value();

  inline bool has_value_type() const;
  inline void clear_has_value_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueTypeUnion {
    ValueTypeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    float float_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 float_compressed_as_int32_;
    double double_value_;
    float double_compressed_as_float_;
    ::PROTOBUF_NAMESPACE_ID::int64 double_compressed_as_int64_;
    ::PROTOBUF_NAMESPACE_ID::int64 sint64_value_;
    bool bool_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_value_;
    ::esriPBuffer::graph::GeometryValue* geometry_value_;
    bool null_tag_;
    ::PROTOBUF_NAMESPACE_ID::int64 datetime_value_;
  } value_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class ObjectValue_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<ObjectValue_PropertiesEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::AnyValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<ObjectValue_PropertiesEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::AnyValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ObjectValue_PropertiesEntry_DoNotUse();
  explicit ObjectValue_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ObjectValue_PropertiesEntry_DoNotUse& other);
  static const ObjectValue_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ObjectValue_PropertiesEntry_DoNotUse*>(&_ObjectValue_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "esriPBuffer.graph.ObjectValue.PropertiesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class EXT_CLASS ObjectValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.ObjectValue) */ {
 public:
  inline ObjectValue() : ObjectValue(nullptr) {}
  virtual ~ObjectValue();

  ObjectValue(const ObjectValue& from);
  ObjectValue(ObjectValue&& from) noexcept
    : ObjectValue() {
    *this = ::std::move(from);
  }

  inline ObjectValue& operator=(const ObjectValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectValue& operator=(ObjectValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ObjectValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectValue* internal_default_instance() {
    return reinterpret_cast<const ObjectValue*>(
               &_ObjectValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ObjectValue& a, ObjectValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectValue* New() const final {
    return CreateMaybeMessage<ObjectValue>(nullptr);
  }

  ObjectValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ObjectValue& from);
  void MergeFrom(const ObjectValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.ObjectValue";
  }
  protected:
  explicit ObjectValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 1,
  };
  // map<string, .esriPBuffer.graph.AnyValue> properties = 1;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
      mutable_properties();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.ObjectValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      ObjectValue_PropertiesEntry_DoNotUse,
      std::string, ::esriPBuffer::graph::AnyValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EntityValue_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<EntityValue_PropertiesEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::AnyValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<EntityValue_PropertiesEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::AnyValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  EntityValue_PropertiesEntry_DoNotUse();
  explicit EntityValue_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EntityValue_PropertiesEntry_DoNotUse& other);
  static const EntityValue_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EntityValue_PropertiesEntry_DoNotUse*>(&_EntityValue_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "esriPBuffer.graph.EntityValue.PropertiesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class EXT_CLASS EntityValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.EntityValue) */ {
 public:
  inline EntityValue() : EntityValue(nullptr) {}
  virtual ~EntityValue();

  EntityValue(const EntityValue& from);
  EntityValue(EntityValue&& from) noexcept
    : EntityValue() {
    *this = ::std::move(from);
  }

  inline EntityValue& operator=(const EntityValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityValue& operator=(EntityValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EntityValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityValue* internal_default_instance() {
    return reinterpret_cast<const EntityValue*>(
               &_EntityValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(EntityValue& a, EntityValue& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityValue* New() const final {
    return CreateMaybeMessage<EntityValue>(nullptr);
  }

  EntityValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EntityValue& from);
  void MergeFrom(const EntityValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EntityValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.EntityValue";
  }
  protected:
  explicit EntityValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 2,
    kLabelFieldNumber = 1,
  };
  // map<string, .esriPBuffer.graph.AnyValue> properties = 2;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
      mutable_properties();

  // string label = 1;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.EntityValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      EntityValue_PropertiesEntry_DoNotUse,
      std::string, ::esriPBuffer::graph::AnyValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class RelationshipValue_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<RelationshipValue_PropertiesEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::AnyValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<RelationshipValue_PropertiesEntry_DoNotUse, 
    std::string, ::esriPBuffer::graph::AnyValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RelationshipValue_PropertiesEntry_DoNotUse();
  explicit RelationshipValue_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RelationshipValue_PropertiesEntry_DoNotUse& other);
  static const RelationshipValue_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RelationshipValue_PropertiesEntry_DoNotUse*>(&_RelationshipValue_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "esriPBuffer.graph.RelationshipValue.PropertiesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class EXT_CLASS RelationshipValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.RelationshipValue) */ {
 public:
  inline RelationshipValue() : RelationshipValue(nullptr) {}
  virtual ~RelationshipValue();

  RelationshipValue(const RelationshipValue& from);
  RelationshipValue(RelationshipValue&& from) noexcept
    : RelationshipValue() {
    *this = ::std::move(from);
  }

  inline RelationshipValue& operator=(const RelationshipValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelationshipValue& operator=(RelationshipValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RelationshipValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelationshipValue* internal_default_instance() {
    return reinterpret_cast<const RelationshipValue*>(
               &_RelationshipValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RelationshipValue& a, RelationshipValue& b) {
    a.Swap(&b);
  }
  inline void Swap(RelationshipValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelationshipValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelationshipValue* New() const final {
    return CreateMaybeMessage<RelationshipValue>(nullptr);
  }

  RelationshipValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelationshipValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RelationshipValue& from);
  void MergeFrom(const RelationshipValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RelationshipValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.RelationshipValue";
  }
  protected:
  explicit RelationshipValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // map<string, .esriPBuffer.graph.AnyValue> properties = 2;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
      mutable_properties();

  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.RelationshipValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      RelationshipValue_PropertiesEntry_DoNotUse,
      std::string, ::esriPBuffer::graph::AnyValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS PathValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.PathValue) */ {
 public:
  inline PathValue() : PathValue(nullptr) {}
  virtual ~PathValue();

  PathValue(const PathValue& from);
  PathValue(PathValue&& from) noexcept
    : PathValue() {
    *this = ::std::move(from);
  }

  inline PathValue& operator=(const PathValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathValue& operator=(PathValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PathValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathValue* internal_default_instance() {
    return reinterpret_cast<const PathValue*>(
               &_PathValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PathValue& a, PathValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PathValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathValue* New() const final {
    return CreateMaybeMessage<PathValue>(nullptr);
  }

  PathValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PathValue& from);
  void MergeFrom(const PathValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PathValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.PathValue";
  }
  protected:
  explicit PathValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 1,
    kRelationshipsFieldNumber = 2,
  };
  // repeated .esriPBuffer.graph.EntityValue entities = 1;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::esriPBuffer::graph::EntityValue* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::EntityValue >*
      mutable_entities();
  private:
  const ::esriPBuffer::graph::EntityValue& _internal_entities(int index) const;
  ::esriPBuffer::graph::EntityValue* _internal_add_entities();
  public:
  const ::esriPBuffer::graph::EntityValue& entities(int index) const;
  ::esriPBuffer::graph::EntityValue* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::EntityValue >&
      entities() const;

  // repeated .esriPBuffer.graph.RelationshipValue relationships = 2;
  int relationships_size() const;
  private:
  int _internal_relationships_size() const;
  public:
  void clear_relationships();
  ::esriPBuffer::graph::RelationshipValue* mutable_relationships(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::RelationshipValue >*
      mutable_relationships();
  private:
  const ::esriPBuffer::graph::RelationshipValue& _internal_relationships(int index) const;
  ::esriPBuffer::graph::RelationshipValue* _internal_add_relationships();
  public:
  const ::esriPBuffer::graph::RelationshipValue& relationships(int index) const;
  ::esriPBuffer::graph::RelationshipValue* add_relationships();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::RelationshipValue >&
      relationships() const;

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.PathValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::EntityValue > entities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::RelationshipValue > relationships_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS ArrayValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.ArrayValue) */ {
 public:
  inline ArrayValue() : ArrayValue(nullptr) {}
  virtual ~ArrayValue();

  ArrayValue(const ArrayValue& from);
  ArrayValue(ArrayValue&& from) noexcept
    : ArrayValue() {
    *this = ::std::move(from);
  }

  inline ArrayValue& operator=(const ArrayValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayValue& operator=(ArrayValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ArrayValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArrayValue* internal_default_instance() {
    return reinterpret_cast<const ArrayValue*>(
               &_ArrayValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ArrayValue& a, ArrayValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayValue* New() const final {
    return CreateMaybeMessage<ArrayValue>(nullptr);
  }

  ArrayValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ArrayValue& from);
  void MergeFrom(const ArrayValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArrayValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.ArrayValue";
  }
  protected:
  explicit ArrayValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .esriPBuffer.graph.AnyValue values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::esriPBuffer::graph::AnyValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::AnyValue >*
      mutable_values();
  private:
  const ::esriPBuffer::graph::AnyValue& _internal_values(int index) const;
  ::esriPBuffer::graph::AnyValue* _internal_add_values();
  public:
  const ::esriPBuffer::graph::AnyValue& values(int index) const;
  ::esriPBuffer::graph::AnyValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::AnyValue >&
      values() const;

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.ArrayValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::AnyValue > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS AnyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.AnyValue) */ {
 public:
  inline AnyValue() : AnyValue(nullptr) {}
  virtual ~AnyValue();

  AnyValue(const AnyValue& from);
  AnyValue(AnyValue&& from) noexcept
    : AnyValue() {
    *this = ::std::move(from);
  }

  inline AnyValue& operator=(const AnyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyValue& operator=(AnyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AnyValue& default_instance();

  enum AnyValueTypeCase {
    kPrimitiveValue = 1,
    kArrayValue = 2,
    kObjectValue = 3,
    kEntityValue = 4,
    kRelationshipValue = 5,
    kPathValue = 6,
    kFloatArray = 7,
    kFloatCompressedAsInt32Array = 8,
    kDoubleArray = 9,
    kDoubleCompressedAsFloatArray = 10,
    kDoubleCompressedAsInt64Array = 11,
    kSint64Array = 12,
    kBoolArray = 13,
    kNullArray = 14,
    kUuidArray = 15,
    kDateArray = 19,
    kStringArray = 16,
    kGeometryArray = 18,
    ANY_VALUE_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyValue* internal_default_instance() {
    return reinterpret_cast<const AnyValue*>(
               &_AnyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AnyValue& a, AnyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnyValue* New() const final {
    return CreateMaybeMessage<AnyValue>(nullptr);
  }

  AnyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnyValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AnyValue& from);
  void MergeFrom(const AnyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.AnyValue";
  }
  protected:
  explicit AnyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimitiveValueFieldNumber = 1,
    kArrayValueFieldNumber = 2,
    kObjectValueFieldNumber = 3,
    kEntityValueFieldNumber = 4,
    kRelationshipValueFieldNumber = 5,
    kPathValueFieldNumber = 6,
    kFloatArrayFieldNumber = 7,
    kFloatCompressedAsInt32ArrayFieldNumber = 8,
    kDoubleArrayFieldNumber = 9,
    kDoubleCompressedAsFloatArrayFieldNumber = 10,
    kDoubleCompressedAsInt64ArrayFieldNumber = 11,
    kSint64ArrayFieldNumber = 12,
    kBoolArrayFieldNumber = 13,
    kNullArrayFieldNumber = 14,
    kUuidArrayFieldNumber = 15,
    kDateArrayFieldNumber = 19,
    kStringArrayFieldNumber = 16,
    kGeometryArrayFieldNumber = 18,
  };
  // .esriPBuffer.graph.PrimitiveValue primitive_value = 1;
  bool has_primitive_value() const;
  private:
  bool _internal_has_primitive_value() const;
  public:
  void clear_primitive_value();
  const ::esriPBuffer::graph::PrimitiveValue& primitive_value() const;
  ::esriPBuffer::graph::PrimitiveValue* release_primitive_value();
  ::esriPBuffer::graph::PrimitiveValue* mutable_primitive_value();
  void set_allocated_primitive_value(::esriPBuffer::graph::PrimitiveValue* primitive_value);
  private:
  const ::esriPBuffer::graph::PrimitiveValue& _internal_primitive_value() const;
  ::esriPBuffer::graph::PrimitiveValue* _internal_mutable_primitive_value();
  public:
  void unsafe_arena_set_allocated_primitive_value(
      ::esriPBuffer::graph::PrimitiveValue* primitive_value);
  ::esriPBuffer::graph::PrimitiveValue* unsafe_arena_release_primitive_value();

  // .esriPBuffer.graph.ArrayValue array_value = 2;
  bool has_array_value() const;
  private:
  bool _internal_has_array_value() const;
  public:
  void clear_array_value();
  const ::esriPBuffer::graph::ArrayValue& array_value() const;
  ::esriPBuffer::graph::ArrayValue* release_array_value();
  ::esriPBuffer::graph::ArrayValue* mutable_array_value();
  void set_allocated_array_value(::esriPBuffer::graph::ArrayValue* array_value);
  private:
  const ::esriPBuffer::graph::ArrayValue& _internal_array_value() const;
  ::esriPBuffer::graph::ArrayValue* _internal_mutable_array_value();
  public:
  void unsafe_arena_set_allocated_array_value(
      ::esriPBuffer::graph::ArrayValue* array_value);
  ::esriPBuffer::graph::ArrayValue* unsafe_arena_release_array_value();

  // .esriPBuffer.graph.ObjectValue object_value = 3;
  bool has_object_value() const;
  private:
  bool _internal_has_object_value() const;
  public:
  void clear_object_value();
  const ::esriPBuffer::graph::ObjectValue& object_value() const;
  ::esriPBuffer::graph::ObjectValue* release_object_value();
  ::esriPBuffer::graph::ObjectValue* mutable_object_value();
  void set_allocated_object_value(::esriPBuffer::graph::ObjectValue* object_value);
  private:
  const ::esriPBuffer::graph::ObjectValue& _internal_object_value() const;
  ::esriPBuffer::graph::ObjectValue* _internal_mutable_object_value();
  public:
  void unsafe_arena_set_allocated_object_value(
      ::esriPBuffer::graph::ObjectValue* object_value);
  ::esriPBuffer::graph::ObjectValue* unsafe_arena_release_object_value();

  // .esriPBuffer.graph.EntityValue entity_value = 4;
  bool has_entity_value() const;
  private:
  bool _internal_has_entity_value() const;
  public:
  void clear_entity_value();
  const ::esriPBuffer::graph::EntityValue& entity_value() const;
  ::esriPBuffer::graph::EntityValue* release_entity_value();
  ::esriPBuffer::graph::EntityValue* mutable_entity_value();
  void set_allocated_entity_value(::esriPBuffer::graph::EntityValue* entity_value);
  private:
  const ::esriPBuffer::graph::EntityValue& _internal_entity_value() const;
  ::esriPBuffer::graph::EntityValue* _internal_mutable_entity_value();
  public:
  void unsafe_arena_set_allocated_entity_value(
      ::esriPBuffer::graph::EntityValue* entity_value);
  ::esriPBuffer::graph::EntityValue* unsafe_arena_release_entity_value();

  // .esriPBuffer.graph.RelationshipValue relationship_value = 5;
  bool has_relationship_value() const;
  private:
  bool _internal_has_relationship_value() const;
  public:
  void clear_relationship_value();
  const ::esriPBuffer::graph::RelationshipValue& relationship_value() const;
  ::esriPBuffer::graph::RelationshipValue* release_relationship_value();
  ::esriPBuffer::graph::RelationshipValue* mutable_relationship_value();
  void set_allocated_relationship_value(::esriPBuffer::graph::RelationshipValue* relationship_value);
  private:
  const ::esriPBuffer::graph::RelationshipValue& _internal_relationship_value() const;
  ::esriPBuffer::graph::RelationshipValue* _internal_mutable_relationship_value();
  public:
  void unsafe_arena_set_allocated_relationship_value(
      ::esriPBuffer::graph::RelationshipValue* relationship_value);
  ::esriPBuffer::graph::RelationshipValue* unsafe_arena_release_relationship_value();

  // .esriPBuffer.graph.PathValue path_value = 6;
  bool has_path_value() const;
  private:
  bool _internal_has_path_value() const;
  public:
  void clear_path_value();
  const ::esriPBuffer::graph::PathValue& path_value() const;
  ::esriPBuffer::graph::PathValue* release_path_value();
  ::esriPBuffer::graph::PathValue* mutable_path_value();
  void set_allocated_path_value(::esriPBuffer::graph::PathValue* path_value);
  private:
  const ::esriPBuffer::graph::PathValue& _internal_path_value() const;
  ::esriPBuffer::graph::PathValue* _internal_mutable_path_value();
  public:
  void unsafe_arena_set_allocated_path_value(
      ::esriPBuffer::graph::PathValue* path_value);
  ::esriPBuffer::graph::PathValue* unsafe_arena_release_path_value();

  // .esriPBuffer.graph.FloatArray float_array = 7;
  bool has_float_array() const;
  private:
  bool _internal_has_float_array() const;
  public:
  void clear_float_array();
  const ::esriPBuffer::graph::FloatArray& float_array() const;
  ::esriPBuffer::graph::FloatArray* release_float_array();
  ::esriPBuffer::graph::FloatArray* mutable_float_array();
  void set_allocated_float_array(::esriPBuffer::graph::FloatArray* float_array);
  private:
  const ::esriPBuffer::graph::FloatArray& _internal_float_array() const;
  ::esriPBuffer::graph::FloatArray* _internal_mutable_float_array();
  public:
  void unsafe_arena_set_allocated_float_array(
      ::esriPBuffer::graph::FloatArray* float_array);
  ::esriPBuffer::graph::FloatArray* unsafe_arena_release_float_array();

  // .esriPBuffer.graph.Int32Array float_compressed_as_int32_array = 8;
  bool has_float_compressed_as_int32_array() const;
  private:
  bool _internal_has_float_compressed_as_int32_array() const;
  public:
  void clear_float_compressed_as_int32_array();
  const ::esriPBuffer::graph::Int32Array& float_compressed_as_int32_array() const;
  ::esriPBuffer::graph::Int32Array* release_float_compressed_as_int32_array();
  ::esriPBuffer::graph::Int32Array* mutable_float_compressed_as_int32_array();
  void set_allocated_float_compressed_as_int32_array(::esriPBuffer::graph::Int32Array* float_compressed_as_int32_array);
  private:
  const ::esriPBuffer::graph::Int32Array& _internal_float_compressed_as_int32_array() const;
  ::esriPBuffer::graph::Int32Array* _internal_mutable_float_compressed_as_int32_array();
  public:
  void unsafe_arena_set_allocated_float_compressed_as_int32_array(
      ::esriPBuffer::graph::Int32Array* float_compressed_as_int32_array);
  ::esriPBuffer::graph::Int32Array* unsafe_arena_release_float_compressed_as_int32_array();

  // .esriPBuffer.graph.DoubleArray double_array = 9;
  bool has_double_array() const;
  private:
  bool _internal_has_double_array() const;
  public:
  void clear_double_array();
  const ::esriPBuffer::graph::DoubleArray& double_array() const;
  ::esriPBuffer::graph::DoubleArray* release_double_array();
  ::esriPBuffer::graph::DoubleArray* mutable_double_array();
  void set_allocated_double_array(::esriPBuffer::graph::DoubleArray* double_array);
  private:
  const ::esriPBuffer::graph::DoubleArray& _internal_double_array() const;
  ::esriPBuffer::graph::DoubleArray* _internal_mutable_double_array();
  public:
  void unsafe_arena_set_allocated_double_array(
      ::esriPBuffer::graph::DoubleArray* double_array);
  ::esriPBuffer::graph::DoubleArray* unsafe_arena_release_double_array();

  // .esriPBuffer.graph.FloatArray double_compressed_as_float_array = 10;
  bool has_double_compressed_as_float_array() const;
  private:
  bool _internal_has_double_compressed_as_float_array() const;
  public:
  void clear_double_compressed_as_float_array();
  const ::esriPBuffer::graph::FloatArray& double_compressed_as_float_array() const;
  ::esriPBuffer::graph::FloatArray* release_double_compressed_as_float_array();
  ::esriPBuffer::graph::FloatArray* mutable_double_compressed_as_float_array();
  void set_allocated_double_compressed_as_float_array(::esriPBuffer::graph::FloatArray* double_compressed_as_float_array);
  private:
  const ::esriPBuffer::graph::FloatArray& _internal_double_compressed_as_float_array() const;
  ::esriPBuffer::graph::FloatArray* _internal_mutable_double_compressed_as_float_array();
  public:
  void unsafe_arena_set_allocated_double_compressed_as_float_array(
      ::esriPBuffer::graph::FloatArray* double_compressed_as_float_array);
  ::esriPBuffer::graph::FloatArray* unsafe_arena_release_double_compressed_as_float_array();

  // .esriPBuffer.graph.Int64Array double_compressed_as_int64_array = 11;
  bool has_double_compressed_as_int64_array() const;
  private:
  bool _internal_has_double_compressed_as_int64_array() const;
  public:
  void clear_double_compressed_as_int64_array();
  const ::esriPBuffer::graph::Int64Array& double_compressed_as_int64_array() const;
  ::esriPBuffer::graph::Int64Array* release_double_compressed_as_int64_array();
  ::esriPBuffer::graph::Int64Array* mutable_double_compressed_as_int64_array();
  void set_allocated_double_compressed_as_int64_array(::esriPBuffer::graph::Int64Array* double_compressed_as_int64_array);
  private:
  const ::esriPBuffer::graph::Int64Array& _internal_double_compressed_as_int64_array() const;
  ::esriPBuffer::graph::Int64Array* _internal_mutable_double_compressed_as_int64_array();
  public:
  void unsafe_arena_set_allocated_double_compressed_as_int64_array(
      ::esriPBuffer::graph::Int64Array* double_compressed_as_int64_array);
  ::esriPBuffer::graph::Int64Array* unsafe_arena_release_double_compressed_as_int64_array();

  // .esriPBuffer.graph.Int64Array sint64_array = 12;
  bool has_sint64_array() const;
  private:
  bool _internal_has_sint64_array() const;
  public:
  void clear_sint64_array();
  const ::esriPBuffer::graph::Int64Array& sint64_array() const;
  ::esriPBuffer::graph::Int64Array* release_sint64_array();
  ::esriPBuffer::graph::Int64Array* mutable_sint64_array();
  void set_allocated_sint64_array(::esriPBuffer::graph::Int64Array* sint64_array);
  private:
  const ::esriPBuffer::graph::Int64Array& _internal_sint64_array() const;
  ::esriPBuffer::graph::Int64Array* _internal_mutable_sint64_array();
  public:
  void unsafe_arena_set_allocated_sint64_array(
      ::esriPBuffer::graph::Int64Array* sint64_array);
  ::esriPBuffer::graph::Int64Array* unsafe_arena_release_sint64_array();

  // .esriPBuffer.graph.BoolArray bool_array = 13;
  bool has_bool_array() const;
  private:
  bool _internal_has_bool_array() const;
  public:
  void clear_bool_array();
  const ::esriPBuffer::graph::BoolArray& bool_array() const;
  ::esriPBuffer::graph::BoolArray* release_bool_array();
  ::esriPBuffer::graph::BoolArray* mutable_bool_array();
  void set_allocated_bool_array(::esriPBuffer::graph::BoolArray* bool_array);
  private:
  const ::esriPBuffer::graph::BoolArray& _internal_bool_array() const;
  ::esriPBuffer::graph::BoolArray* _internal_mutable_bool_array();
  public:
  void unsafe_arena_set_allocated_bool_array(
      ::esriPBuffer::graph::BoolArray* bool_array);
  ::esriPBuffer::graph::BoolArray* unsafe_arena_release_bool_array();

  // .esriPBuffer.graph.NullArray null_array = 14;
  bool has_null_array() const;
  private:
  bool _internal_has_null_array() const;
  public:
  void clear_null_array();
  const ::esriPBuffer::graph::NullArray& null_array() const;
  ::esriPBuffer::graph::NullArray* release_null_array();
  ::esriPBuffer::graph::NullArray* mutable_null_array();
  void set_allocated_null_array(::esriPBuffer::graph::NullArray* null_array);
  private:
  const ::esriPBuffer::graph::NullArray& _internal_null_array() const;
  ::esriPBuffer::graph::NullArray* _internal_mutable_null_array();
  public:
  void unsafe_arena_set_allocated_null_array(
      ::esriPBuffer::graph::NullArray* null_array);
  ::esriPBuffer::graph::NullArray* unsafe_arena_release_null_array();

  // bytes uuid_array = 15;
  private:
  bool _internal_has_uuid_array() const;
  public:
  void clear_uuid_array();
  const std::string& uuid_array() const;
  void set_uuid_array(const std::string& value);
  void set_uuid_array(std::string&& value);
  void set_uuid_array(const char* value);
  void set_uuid_array(const void* value, size_t size);
  std::string* mutable_uuid_array();
  std::string* release_uuid_array();
  void set_allocated_uuid_array(std::string* uuid_array);
  private:
  const std::string& _internal_uuid_array() const;
  void _internal_set_uuid_array(const std::string& value);
  std::string* _internal_mutable_uuid_array();
  public:

  // .esriPBuffer.graph.DateTimeArray date_array = 19;
  bool has_date_array() const;
  private:
  bool _internal_has_date_array() const;
  public:
  void clear_date_array();
  const ::esriPBuffer::graph::DateTimeArray& date_array() const;
  ::esriPBuffer::graph::DateTimeArray* release_date_array();
  ::esriPBuffer::graph::DateTimeArray* mutable_date_array();
  void set_allocated_date_array(::esriPBuffer::graph::DateTimeArray* date_array);
  private:
  const ::esriPBuffer::graph::DateTimeArray& _internal_date_array() const;
  ::esriPBuffer::graph::DateTimeArray* _internal_mutable_date_array();
  public:
  void unsafe_arena_set_allocated_date_array(
      ::esriPBuffer::graph::DateTimeArray* date_array);
  ::esriPBuffer::graph::DateTimeArray* unsafe_arena_release_date_array();

  // .esriPBuffer.graph.StringArray string_array = 16;
  bool has_string_array() const;
  private:
  bool _internal_has_string_array() const;
  public:
  void clear_string_array();
  const ::esriPBuffer::graph::StringArray& string_array() const;
  ::esriPBuffer::graph::StringArray* release_string_array();
  ::esriPBuffer::graph::StringArray* mutable_string_array();
  void set_allocated_string_array(::esriPBuffer::graph::StringArray* string_array);
  private:
  const ::esriPBuffer::graph::StringArray& _internal_string_array() const;
  ::esriPBuffer::graph::StringArray* _internal_mutable_string_array();
  public:
  void unsafe_arena_set_allocated_string_array(
      ::esriPBuffer::graph::StringArray* string_array);
  ::esriPBuffer::graph::StringArray* unsafe_arena_release_string_array();

  // .esriPBuffer.graph.GeometryArray geometry_array = 18;
  bool has_geometry_array() const;
  private:
  bool _internal_has_geometry_array() const;
  public:
  void clear_geometry_array();
  const ::esriPBuffer::graph::GeometryArray& geometry_array() const;
  ::esriPBuffer::graph::GeometryArray* release_geometry_array();
  ::esriPBuffer::graph::GeometryArray* mutable_geometry_array();
  void set_allocated_geometry_array(::esriPBuffer::graph::GeometryArray* geometry_array);
  private:
  const ::esriPBuffer::graph::GeometryArray& _internal_geometry_array() const;
  ::esriPBuffer::graph::GeometryArray* _internal_mutable_geometry_array();
  public:
  void unsafe_arena_set_allocated_geometry_array(
      ::esriPBuffer::graph::GeometryArray* geometry_array);
  ::esriPBuffer::graph::GeometryArray* unsafe_arena_release_geometry_array();

  void clear_any_value_type();
  AnyValueTypeCase any_value_type_case() const;
  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.AnyValue)
 private:
  class _Internal;
  void set_has_primitive_value();
  void set_has_array_value();
  void set_has_object_value();
  void set_has_entity_value();
  void set_has_relationship_value();
  void set_has_path_value();
  void set_has_float_array();
  void set_has_float_compressed_as_int32_array();
  void set_has_double_array();
  void set_has_double_compressed_as_float_array();
  void set_has_double_compressed_as_int64_array();
  void set_has_sint64_array();
  void set_has_bool_array();
  void set_has_null_array();
  void set_has_uuid_array();
  void set_has_date_array();
  void set_has_string_array();
  void set_has_geometry_array();

  inline bool has_any_value_type() const;
  inline void clear_has_any_value_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union AnyValueTypeUnion {
    AnyValueTypeUnion() {}
    ::esriPBuffer::graph::PrimitiveValue* primitive_value_;
    ::esriPBuffer::graph::ArrayValue* array_value_;
    ::esriPBuffer::graph::ObjectValue* object_value_;
    ::esriPBuffer::graph::EntityValue* entity_value_;
    ::esriPBuffer::graph::RelationshipValue* relationship_value_;
    ::esriPBuffer::graph::PathValue* path_value_;
    ::esriPBuffer::graph::FloatArray* float_array_;
    ::esriPBuffer::graph::Int32Array* float_compressed_as_int32_array_;
    ::esriPBuffer::graph::DoubleArray* double_array_;
    ::esriPBuffer::graph::FloatArray* double_compressed_as_float_array_;
    ::esriPBuffer::graph::Int64Array* double_compressed_as_int64_array_;
    ::esriPBuffer::graph::Int64Array* sint64_array_;
    ::esriPBuffer::graph::BoolArray* bool_array_;
    ::esriPBuffer::graph::NullArray* null_array_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_array_;
    ::esriPBuffer::graph::DateTimeArray* date_array_;
    ::esriPBuffer::graph::StringArray* string_array_;
    ::esriPBuffer::graph::GeometryArray* geometry_array_;
  } any_value_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS Error PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  virtual ~Error();

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(nullptr);
  }

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // sint64 error_code = 1;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int64 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::int64 error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FloatArray

// repeated float value = 1 [packed = true];
inline int FloatArray::_internal_value_size() const {
  return value_.size();
}
inline int FloatArray::value_size() const {
  return _internal_value_size();
}
inline void FloatArray::clear_value() {
  value_.Clear();
}
inline float FloatArray::_internal_value(int index) const {
  return value_.Get(index);
}
inline float FloatArray::value(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.FloatArray.value)
  return _internal_value(index);
}
inline void FloatArray::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.FloatArray.value)
}
inline void FloatArray::_internal_add_value(float value) {
  value_.Add(value);
}
inline void FloatArray::add_value(float value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.FloatArray.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatArray::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatArray::value() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.FloatArray.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatArray::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.FloatArray.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// DoubleArray

// repeated double value = 1 [packed = true];
inline int DoubleArray::_internal_value_size() const {
  return value_.size();
}
inline int DoubleArray::value_size() const {
  return _internal_value_size();
}
inline void DoubleArray::clear_value() {
  value_.Clear();
}
inline double DoubleArray::_internal_value(int index) const {
  return value_.Get(index);
}
inline double DoubleArray::value(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.DoubleArray.value)
  return _internal_value(index);
}
inline void DoubleArray::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.DoubleArray.value)
}
inline void DoubleArray::_internal_add_value(double value) {
  value_.Add(value);
}
inline void DoubleArray::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.DoubleArray.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleArray::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleArray::value() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.DoubleArray.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleArray::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.DoubleArray.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// Int32Array

// repeated sint32 value = 1 [packed = true];
inline int Int32Array::_internal_value_size() const {
  return value_.size();
}
inline int Int32Array::value_size() const {
  return _internal_value_size();
}
inline void Int32Array::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Array::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Array::value(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.Int32Array.value)
  return _internal_value(index);
}
inline void Int32Array::set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.Int32Array.value)
}
inline void Int32Array::_internal_add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Add(value);
}
inline void Int32Array::add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.Int32Array.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Int32Array::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Int32Array::value() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.Int32Array.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Int32Array::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Int32Array::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.Int32Array.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// Int64Array

// repeated sint64 value = 1 [packed = true];
inline int Int64Array::_internal_value_size() const {
  return value_.size();
}
inline int Int64Array::value_size() const {
  return _internal_value_size();
}
inline void Int64Array::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Array::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Array::value(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.Int64Array.value)
  return _internal_value(index);
}
inline void Int64Array::set_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.Int64Array.value)
}
inline void Int64Array::_internal_add_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  value_.Add(value);
}
inline void Int64Array::add_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.Int64Array.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Int64Array::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Int64Array::value() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.Int64Array.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Int64Array::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Int64Array::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.Int64Array.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// BoolArray

// repeated bool value = 1 [packed = true];
inline int BoolArray::_internal_value_size() const {
  return value_.size();
}
inline int BoolArray::value_size() const {
  return _internal_value_size();
}
inline void BoolArray::clear_value() {
  value_.Clear();
}
inline bool BoolArray::_internal_value(int index) const {
  return value_.Get(index);
}
inline bool BoolArray::value(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.BoolArray.value)
  return _internal_value(index);
}
inline void BoolArray::set_value(int index, bool value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.BoolArray.value)
}
inline void BoolArray::_internal_add_value(bool value) {
  value_.Add(value);
}
inline void BoolArray::add_value(bool value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.BoolArray.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
BoolArray::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
BoolArray::value() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.BoolArray.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
BoolArray::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
BoolArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.BoolArray.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// DateTimeArray

// repeated int64 value = 1 [packed = true];
inline int DateTimeArray::_internal_value_size() const {
  return value_.size();
}
inline int DateTimeArray::value_size() const {
  return _internal_value_size();
}
inline void DateTimeArray::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DateTimeArray::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DateTimeArray::value(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.DateTimeArray.value)
  return _internal_value(index);
}
inline void DateTimeArray::set_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.DateTimeArray.value)
}
inline void DateTimeArray::_internal_add_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  value_.Add(value);
}
inline void DateTimeArray::add_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.DateTimeArray.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DateTimeArray::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DateTimeArray::value() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.DateTimeArray.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DateTimeArray::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DateTimeArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.DateTimeArray.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// NullArray

// sint64 length = 1;
inline void NullArray::clear_length() {
  length_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NullArray::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NullArray::length() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.NullArray.length)
  return _internal_length();
}
inline void NullArray::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  length_ = value;
}
inline void NullArray::set_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.NullArray.length)
}

// -------------------------------------------------------------------

// StringArray

// repeated string value = 1;
inline int StringArray::_internal_value_size() const {
  return value_.size();
}
inline int StringArray::value_size() const {
  return _internal_value_size();
}
inline void StringArray::clear_value() {
  value_.Clear();
}
inline std::string* StringArray::add_value() {
  // @@protoc_insertion_point(field_add_mutable:esriPBuffer.graph.StringArray.value)
  return _internal_add_value();
}
inline const std::string& StringArray::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& StringArray::value(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.StringArray.value)
  return _internal_value(index);
}
inline std::string* StringArray::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.StringArray.value)
  return value_.Mutable(index);
}
inline void StringArray::set_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.StringArray.value)
  value_.Mutable(index)->assign(value);
}
inline void StringArray::set_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.StringArray.value)
  value_.Mutable(index)->assign(std::move(value));
}
inline void StringArray::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.StringArray.value)
}
inline void StringArray::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.StringArray.value)
}
inline std::string* StringArray::_internal_add_value() {
  return value_.Add();
}
inline void StringArray::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.StringArray.value)
}
inline void StringArray::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.StringArray.value)
}
inline void StringArray::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:esriPBuffer.graph.StringArray.value)
}
inline void StringArray::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:esriPBuffer.graph.StringArray.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringArray::value() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.StringArray.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.StringArray.value)
  return &value_;
}

// -------------------------------------------------------------------

// GeometryValue_EsriDefaultGeometry

// bool hasZ = 1;
inline void GeometryValue_EsriDefaultGeometry::clear_hasz() {
  hasz_ = false;
}
inline bool GeometryValue_EsriDefaultGeometry::_internal_hasz() const {
  return hasz_;
}
inline bool GeometryValue_EsriDefaultGeometry::hasz() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry.hasZ)
  return _internal_hasz();
}
inline void GeometryValue_EsriDefaultGeometry::_internal_set_hasz(bool value) {
  
  hasz_ = value;
}
inline void GeometryValue_EsriDefaultGeometry::set_hasz(bool value) {
  _internal_set_hasz(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry.hasZ)
}

// bool hasM = 2;
inline void GeometryValue_EsriDefaultGeometry::clear_hasm() {
  hasm_ = false;
}
inline bool GeometryValue_EsriDefaultGeometry::_internal_hasm() const {
  return hasm_;
}
inline bool GeometryValue_EsriDefaultGeometry::hasm() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry.hasM)
  return _internal_hasm();
}
inline void GeometryValue_EsriDefaultGeometry::_internal_set_hasm(bool value) {
  
  hasm_ = value;
}
inline void GeometryValue_EsriDefaultGeometry::set_hasm(bool value) {
  _internal_set_hasm(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry.hasM)
}

// repeated uint32 lengths = 3 [packed = true];
inline int GeometryValue_EsriDefaultGeometry::_internal_lengths_size() const {
  return lengths_.size();
}
inline int GeometryValue_EsriDefaultGeometry::lengths_size() const {
  return _internal_lengths_size();
}
inline void GeometryValue_EsriDefaultGeometry::clear_lengths() {
  lengths_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GeometryValue_EsriDefaultGeometry::_internal_lengths(int index) const {
  return lengths_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GeometryValue_EsriDefaultGeometry::lengths(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry.lengths)
  return _internal_lengths(index);
}
inline void GeometryValue_EsriDefaultGeometry::set_lengths(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  lengths_.Set(index, value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry.lengths)
}
inline void GeometryValue_EsriDefaultGeometry::_internal_add_lengths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  lengths_.Add(value);
}
inline void GeometryValue_EsriDefaultGeometry::add_lengths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_lengths(value);
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry.lengths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GeometryValue_EsriDefaultGeometry::_internal_lengths() const {
  return lengths_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GeometryValue_EsriDefaultGeometry::lengths() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry.lengths)
  return _internal_lengths();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GeometryValue_EsriDefaultGeometry::_internal_mutable_lengths() {
  return &lengths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GeometryValue_EsriDefaultGeometry::mutable_lengths() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry.lengths)
  return _internal_mutable_lengths();
}

// repeated sint64 coords = 4 [packed = true];
inline int GeometryValue_EsriDefaultGeometry::_internal_coords_size() const {
  return coords_.size();
}
inline int GeometryValue_EsriDefaultGeometry::coords_size() const {
  return _internal_coords_size();
}
inline void GeometryValue_EsriDefaultGeometry::clear_coords() {
  coords_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GeometryValue_EsriDefaultGeometry::_internal_coords(int index) const {
  return coords_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GeometryValue_EsriDefaultGeometry::coords(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry.coords)
  return _internal_coords(index);
}
inline void GeometryValue_EsriDefaultGeometry::set_coords(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  coords_.Set(index, value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry.coords)
}
inline void GeometryValue_EsriDefaultGeometry::_internal_add_coords(::PROTOBUF_NAMESPACE_ID::int64 value) {
  coords_.Add(value);
}
inline void GeometryValue_EsriDefaultGeometry::add_coords(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_coords(value);
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry.coords)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GeometryValue_EsriDefaultGeometry::_internal_coords() const {
  return coords_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
GeometryValue_EsriDefaultGeometry::coords() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry.coords)
  return _internal_coords();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GeometryValue_EsriDefaultGeometry::_internal_mutable_coords() {
  return &coords_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
GeometryValue_EsriDefaultGeometry::mutable_coords() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.GeometryValue.EsriDefaultGeometry.coords)
  return _internal_mutable_coords();
}

// -------------------------------------------------------------------

// GeometryValue

// .esriPBuffer.EsriTypes.GeometryType geometryType = 1;
inline void GeometryValue::clear_geometrytype() {
  geometrytype_ = 0;
}
inline ::esriPBuffer::EsriTypes_GeometryType GeometryValue::_internal_geometrytype() const {
  return static_cast< ::esriPBuffer::EsriTypes_GeometryType >(geometrytype_);
}
inline ::esriPBuffer::EsriTypes_GeometryType GeometryValue::geometrytype() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GeometryValue.geometryType)
  return _internal_geometrytype();
}
inline void GeometryValue::_internal_set_geometrytype(::esriPBuffer::EsriTypes_GeometryType value) {
  
  geometrytype_ = value;
}
inline void GeometryValue::set_geometrytype(::esriPBuffer::EsriTypes_GeometryType value) {
  _internal_set_geometrytype(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GeometryValue.geometryType)
}

// .esriPBuffer.graph.GeometryValue.EsriDefaultGeometry geometry = 2;
inline bool GeometryValue::_internal_has_geometry() const {
  return compressed_geometry_case() == kGeometry;
}
inline bool GeometryValue::has_geometry() const {
  return _internal_has_geometry();
}
inline void GeometryValue::set_has_geometry() {
  _oneof_case_[0] = kGeometry;
}
inline void GeometryValue::clear_geometry() {
  if (_internal_has_geometry()) {
    if (GetArena() == nullptr) {
      delete compressed_geometry_.geometry_;
    }
    clear_has_compressed_geometry();
  }
}
inline ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* GeometryValue::release_geometry() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GeometryValue.geometry)
  if (_internal_has_geometry()) {
    clear_has_compressed_geometry();
      ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* temp = compressed_geometry_.geometry_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    compressed_geometry_.geometry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry& GeometryValue::_internal_geometry() const {
  return _internal_has_geometry()
      ? *compressed_geometry_.geometry_
      : *reinterpret_cast< ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry*>(&::esriPBuffer::graph::_GeometryValue_EsriDefaultGeometry_default_instance_);
}
inline const ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry& GeometryValue::geometry() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GeometryValue.geometry)
  return _internal_geometry();
}
inline ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* GeometryValue::unsafe_arena_release_geometry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.GeometryValue.geometry)
  if (_internal_has_geometry()) {
    clear_has_compressed_geometry();
    ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* temp = compressed_geometry_.geometry_;
    compressed_geometry_.geometry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GeometryValue::unsafe_arena_set_allocated_geometry(::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* geometry) {
  clear_compressed_geometry();
  if (geometry) {
    set_has_geometry();
    compressed_geometry_.geometry_ = geometry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GeometryValue.geometry)
}
inline ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* GeometryValue::_internal_mutable_geometry() {
  if (!_internal_has_geometry()) {
    clear_compressed_geometry();
    set_has_geometry();
    compressed_geometry_.geometry_ = CreateMaybeMessage< ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry >(GetArena());
  }
  return compressed_geometry_.geometry_;
}
inline ::esriPBuffer::graph::GeometryValue_EsriDefaultGeometry* GeometryValue::mutable_geometry() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GeometryValue.geometry)
  return _internal_mutable_geometry();
}

inline bool GeometryValue::has_compressed_geometry() const {
  return compressed_geometry_case() != COMPRESSED_GEOMETRY_NOT_SET;
}
inline void GeometryValue::clear_has_compressed_geometry() {
  _oneof_case_[0] = COMPRESSED_GEOMETRY_NOT_SET;
}
inline GeometryValue::CompressedGeometryCase GeometryValue::compressed_geometry_case() const {
  return GeometryValue::CompressedGeometryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// QuantizationParameters

// .esriPBuffer.EsriTypes.Envelope extent = 1;
inline bool QuantizationParameters::_internal_has_extent() const {
  return this != internal_default_instance() && extent_ != nullptr;
}
inline bool QuantizationParameters::has_extent() const {
  return _internal_has_extent();
}
inline const ::esriPBuffer::EsriTypes_Envelope& QuantizationParameters::_internal_extent() const {
  const ::esriPBuffer::EsriTypes_Envelope* p = extent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_Envelope*>(
      &::esriPBuffer::_EsriTypes_Envelope_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_Envelope& QuantizationParameters::extent() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.QuantizationParameters.extent)
  return _internal_extent();
}
inline void QuantizationParameters::unsafe_arena_set_allocated_extent(
    ::esriPBuffer::EsriTypes_Envelope* extent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extent_);
  }
  extent_ = extent;
  if (extent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.QuantizationParameters.extent)
}
inline ::esriPBuffer::EsriTypes_Envelope* QuantizationParameters::release_extent() {
  
  ::esriPBuffer::EsriTypes_Envelope* temp = extent_;
  extent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_Envelope* QuantizationParameters::unsafe_arena_release_extent() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.QuantizationParameters.extent)
  
  ::esriPBuffer::EsriTypes_Envelope* temp = extent_;
  extent_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_Envelope* QuantizationParameters::_internal_mutable_extent() {
  
  if (extent_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_Envelope>(GetArena());
    extent_ = p;
  }
  return extent_;
}
inline ::esriPBuffer::EsriTypes_Envelope* QuantizationParameters::mutable_extent() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.QuantizationParameters.extent)
  return _internal_mutable_extent();
}
inline void QuantizationParameters::set_allocated_extent(::esriPBuffer::EsriTypes_Envelope* extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extent_);
  }
  if (extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extent)->GetArena();
    if (message_arena != submessage_arena) {
      extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extent, submessage_arena);
    }
    
  } else {
    
  }
  extent_ = extent;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.QuantizationParameters.extent)
}

// .esriPBuffer.graph.QuantizationParameters.QuantizeMode mode = 2;
inline void QuantizationParameters::clear_mode() {
  mode_ = 0;
}
inline ::esriPBuffer::graph::QuantizationParameters_QuantizeMode QuantizationParameters::_internal_mode() const {
  return static_cast< ::esriPBuffer::graph::QuantizationParameters_QuantizeMode >(mode_);
}
inline ::esriPBuffer::graph::QuantizationParameters_QuantizeMode QuantizationParameters::mode() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.QuantizationParameters.mode)
  return _internal_mode();
}
inline void QuantizationParameters::_internal_set_mode(::esriPBuffer::graph::QuantizationParameters_QuantizeMode value) {
  
  mode_ = value;
}
inline void QuantizationParameters::set_mode(::esriPBuffer::graph::QuantizationParameters_QuantizeMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.QuantizationParameters.mode)
}

// double tolerance = 3;
inline void QuantizationParameters::clear_tolerance() {
  tolerance_ = 0;
}
inline double QuantizationParameters::_internal_tolerance() const {
  return tolerance_;
}
inline double QuantizationParameters::tolerance() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.QuantizationParameters.tolerance)
  return _internal_tolerance();
}
inline void QuantizationParameters::_internal_set_tolerance(double value) {
  
  tolerance_ = value;
}
inline void QuantizationParameters::set_tolerance(double value) {
  _internal_set_tolerance(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.QuantizationParameters.tolerance)
}

// -------------------------------------------------------------------

// Transform

// .esriPBuffer.EsriTypes.Scale scale = 1;
inline bool Transform::_internal_has_scale() const {
  return this != internal_default_instance() && scale_ != nullptr;
}
inline bool Transform::has_scale() const {
  return _internal_has_scale();
}
inline const ::esriPBuffer::EsriTypes_Scale& Transform::_internal_scale() const {
  const ::esriPBuffer::EsriTypes_Scale* p = scale_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_Scale*>(
      &::esriPBuffer::_EsriTypes_Scale_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_Scale& Transform::scale() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.Transform.scale)
  return _internal_scale();
}
inline void Transform::unsafe_arena_set_allocated_scale(
    ::esriPBuffer::EsriTypes_Scale* scale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.Transform.scale)
}
inline ::esriPBuffer::EsriTypes_Scale* Transform::release_scale() {
  
  ::esriPBuffer::EsriTypes_Scale* temp = scale_;
  scale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_Scale* Transform::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.Transform.scale)
  
  ::esriPBuffer::EsriTypes_Scale* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_Scale* Transform::_internal_mutable_scale() {
  
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_Scale>(GetArena());
    scale_ = p;
  }
  return scale_;
}
inline ::esriPBuffer::EsriTypes_Scale* Transform::mutable_scale() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.Transform.scale)
  return _internal_mutable_scale();
}
inline void Transform::set_allocated_scale(::esriPBuffer::EsriTypes_Scale* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale)->GetArena();
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.Transform.scale)
}

// .esriPBuffer.EsriTypes.Translate translate = 2;
inline bool Transform::_internal_has_translate() const {
  return this != internal_default_instance() && translate_ != nullptr;
}
inline bool Transform::has_translate() const {
  return _internal_has_translate();
}
inline const ::esriPBuffer::EsriTypes_Translate& Transform::_internal_translate() const {
  const ::esriPBuffer::EsriTypes_Translate* p = translate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_Translate*>(
      &::esriPBuffer::_EsriTypes_Translate_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_Translate& Transform::translate() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.Transform.translate)
  return _internal_translate();
}
inline void Transform::unsafe_arena_set_allocated_translate(
    ::esriPBuffer::EsriTypes_Translate* translate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translate_);
  }
  translate_ = translate;
  if (translate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.Transform.translate)
}
inline ::esriPBuffer::EsriTypes_Translate* Transform::release_translate() {
  
  ::esriPBuffer::EsriTypes_Translate* temp = translate_;
  translate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_Translate* Transform::unsafe_arena_release_translate() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.Transform.translate)
  
  ::esriPBuffer::EsriTypes_Translate* temp = translate_;
  translate_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_Translate* Transform::_internal_mutable_translate() {
  
  if (translate_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_Translate>(GetArena());
    translate_ = p;
  }
  return translate_;
}
inline ::esriPBuffer::EsriTypes_Translate* Transform::mutable_translate() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.Transform.translate)
  return _internal_mutable_translate();
}
inline void Transform::set_allocated_translate(::esriPBuffer::EsriTypes_Translate* translate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(translate_);
  }
  if (translate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translate)->GetArena();
    if (message_arena != submessage_arena) {
      translate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translate, submessage_arena);
    }
    
  } else {
    
  }
  translate_ = translate;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.Transform.translate)
}

// -------------------------------------------------------------------

// GeometryArray

// repeated .esriPBuffer.graph.GeometryValue value = 1;
inline int GeometryArray::_internal_value_size() const {
  return value_.size();
}
inline int GeometryArray::value_size() const {
  return _internal_value_size();
}
inline void GeometryArray::clear_value() {
  value_.Clear();
}
inline ::esriPBuffer::graph::GeometryValue* GeometryArray::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GeometryArray.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GeometryValue >*
GeometryArray::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.GeometryArray.value)
  return &value_;
}
inline const ::esriPBuffer::graph::GeometryValue& GeometryArray::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::esriPBuffer::graph::GeometryValue& GeometryArray::value(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GeometryArray.value)
  return _internal_value(index);
}
inline ::esriPBuffer::graph::GeometryValue* GeometryArray::_internal_add_value() {
  return value_.Add();
}
inline ::esriPBuffer::graph::GeometryValue* GeometryArray::add_value() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.GeometryArray.value)
  return _internal_add_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::GeometryValue >&
GeometryArray::value() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.GeometryArray.value)
  return value_;
}

// -------------------------------------------------------------------

// PrimitiveValue

// string string_value = 1;
inline bool PrimitiveValue::_internal_has_string_value() const {
  return value_type_case() == kStringValue;
}
inline void PrimitiveValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void PrimitiveValue::clear_string_value() {
  if (_internal_has_string_value()) {
    value_type_.string_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value_type();
  }
}
inline const std::string& PrimitiveValue::string_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.PrimitiveValue.string_value)
  return _internal_string_value();
}
inline void PrimitiveValue::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.PrimitiveValue.string_value)
}
inline std::string* PrimitiveValue::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.PrimitiveValue.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& PrimitiveValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_type_.string_value_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PrimitiveValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrimitiveValue::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.PrimitiveValue.string_value)
  if (!_internal_has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_value_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.PrimitiveValue.string_value)
}
inline void PrimitiveValue::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.PrimitiveValue.string_value)
}
inline void PrimitiveValue::set_string_value(const char* value,
                             size_t size) {
  if (!_internal_has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_value_.SetLite(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.PrimitiveValue.string_value)
}
inline std::string* PrimitiveValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_type_.string_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrimitiveValue::release_string_value() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.PrimitiveValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_value_type();
    return value_type_.string_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PrimitiveValue::set_allocated_string_value(std::string* string_value) {
  if (has_value_type()) {
    clear_value_type();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.PrimitiveValue.string_value)
}

// float float_value = 2;
inline bool PrimitiveValue::_internal_has_float_value() const {
  return value_type_case() == kFloatValue;
}
inline void PrimitiveValue::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void PrimitiveValue::clear_float_value() {
  if (_internal_has_float_value()) {
    value_type_.float_value_ = 0;
    clear_has_value_type();
  }
}
inline float PrimitiveValue::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return value_type_.float_value_;
  }
  return 0;
}
inline void PrimitiveValue::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_value_type();
    set_has_float_value();
  }
  value_type_.float_value_ = value;
}
inline float PrimitiveValue::float_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.PrimitiveValue.float_value)
  return _internal_float_value();
}
inline void PrimitiveValue::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.PrimitiveValue.float_value)
}

// sint32 float_compressed_as_int32 = 3;
inline bool PrimitiveValue::_internal_has_float_compressed_as_int32() const {
  return value_type_case() == kFloatCompressedAsInt32;
}
inline void PrimitiveValue::set_has_float_compressed_as_int32() {
  _oneof_case_[0] = kFloatCompressedAsInt32;
}
inline void PrimitiveValue::clear_float_compressed_as_int32() {
  if (_internal_has_float_compressed_as_int32()) {
    value_type_.float_compressed_as_int32_ = 0;
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrimitiveValue::_internal_float_compressed_as_int32() const {
  if (_internal_has_float_compressed_as_int32()) {
    return value_type_.float_compressed_as_int32_;
  }
  return 0;
}
inline void PrimitiveValue::_internal_set_float_compressed_as_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_float_compressed_as_int32()) {
    clear_value_type();
    set_has_float_compressed_as_int32();
  }
  value_type_.float_compressed_as_int32_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrimitiveValue::float_compressed_as_int32() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.PrimitiveValue.float_compressed_as_int32)
  return _internal_float_compressed_as_int32();
}
inline void PrimitiveValue::set_float_compressed_as_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_float_compressed_as_int32(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.PrimitiveValue.float_compressed_as_int32)
}

// double double_value = 4;
inline bool PrimitiveValue::_internal_has_double_value() const {
  return value_type_case() == kDoubleValue;
}
inline void PrimitiveValue::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void PrimitiveValue::clear_double_value() {
  if (_internal_has_double_value()) {
    value_type_.double_value_ = 0;
    clear_has_value_type();
  }
}
inline double PrimitiveValue::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return value_type_.double_value_;
  }
  return 0;
}
inline void PrimitiveValue::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value_type();
    set_has_double_value();
  }
  value_type_.double_value_ = value;
}
inline double PrimitiveValue::double_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.PrimitiveValue.double_value)
  return _internal_double_value();
}
inline void PrimitiveValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.PrimitiveValue.double_value)
}

// float double_compressed_as_float = 5;
inline bool PrimitiveValue::_internal_has_double_compressed_as_float() const {
  return value_type_case() == kDoubleCompressedAsFloat;
}
inline void PrimitiveValue::set_has_double_compressed_as_float() {
  _oneof_case_[0] = kDoubleCompressedAsFloat;
}
inline void PrimitiveValue::clear_double_compressed_as_float() {
  if (_internal_has_double_compressed_as_float()) {
    value_type_.double_compressed_as_float_ = 0;
    clear_has_value_type();
  }
}
inline float PrimitiveValue::_internal_double_compressed_as_float() const {
  if (_internal_has_double_compressed_as_float()) {
    return value_type_.double_compressed_as_float_;
  }
  return 0;
}
inline void PrimitiveValue::_internal_set_double_compressed_as_float(float value) {
  if (!_internal_has_double_compressed_as_float()) {
    clear_value_type();
    set_has_double_compressed_as_float();
  }
  value_type_.double_compressed_as_float_ = value;
}
inline float PrimitiveValue::double_compressed_as_float() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.PrimitiveValue.double_compressed_as_float)
  return _internal_double_compressed_as_float();
}
inline void PrimitiveValue::set_double_compressed_as_float(float value) {
  _internal_set_double_compressed_as_float(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.PrimitiveValue.double_compressed_as_float)
}

// sint64 double_compressed_as_int64 = 6;
inline bool PrimitiveValue::_internal_has_double_compressed_as_int64() const {
  return value_type_case() == kDoubleCompressedAsInt64;
}
inline void PrimitiveValue::set_has_double_compressed_as_int64() {
  _oneof_case_[0] = kDoubleCompressedAsInt64;
}
inline void PrimitiveValue::clear_double_compressed_as_int64() {
  if (_internal_has_double_compressed_as_int64()) {
    value_type_.double_compressed_as_int64_ = PROTOBUF_LONGLONG(0);
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrimitiveValue::_internal_double_compressed_as_int64() const {
  if (_internal_has_double_compressed_as_int64()) {
    return value_type_.double_compressed_as_int64_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void PrimitiveValue::_internal_set_double_compressed_as_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_double_compressed_as_int64()) {
    clear_value_type();
    set_has_double_compressed_as_int64();
  }
  value_type_.double_compressed_as_int64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrimitiveValue::double_compressed_as_int64() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.PrimitiveValue.double_compressed_as_int64)
  return _internal_double_compressed_as_int64();
}
inline void PrimitiveValue::set_double_compressed_as_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_double_compressed_as_int64(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.PrimitiveValue.double_compressed_as_int64)
}

// sint64 sint64_value = 7;
inline bool PrimitiveValue::_internal_has_sint64_value() const {
  return value_type_case() == kSint64Value;
}
inline void PrimitiveValue::set_has_sint64_value() {
  _oneof_case_[0] = kSint64Value;
}
inline void PrimitiveValue::clear_sint64_value() {
  if (_internal_has_sint64_value()) {
    value_type_.sint64_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrimitiveValue::_internal_sint64_value() const {
  if (_internal_has_sint64_value()) {
    return value_type_.sint64_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void PrimitiveValue::_internal_set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_sint64_value()) {
    clear_value_type();
    set_has_sint64_value();
  }
  value_type_.sint64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrimitiveValue::sint64_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.PrimitiveValue.sint64_value)
  return _internal_sint64_value();
}
inline void PrimitiveValue::set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sint64_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.PrimitiveValue.sint64_value)
}

// bool bool_value = 8;
inline bool PrimitiveValue::_internal_has_bool_value() const {
  return value_type_case() == kBoolValue;
}
inline void PrimitiveValue::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void PrimitiveValue::clear_bool_value() {
  if (_internal_has_bool_value()) {
    value_type_.bool_value_ = false;
    clear_has_value_type();
  }
}
inline bool PrimitiveValue::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return value_type_.bool_value_;
  }
  return false;
}
inline void PrimitiveValue::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value_type();
    set_has_bool_value();
  }
  value_type_.bool_value_ = value;
}
inline bool PrimitiveValue::bool_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.PrimitiveValue.bool_value)
  return _internal_bool_value();
}
inline void PrimitiveValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.PrimitiveValue.bool_value)
}

// bytes uuid_value = 9;
inline bool PrimitiveValue::_internal_has_uuid_value() const {
  return value_type_case() == kUuidValue;
}
inline void PrimitiveValue::set_has_uuid_value() {
  _oneof_case_[0] = kUuidValue;
}
inline void PrimitiveValue::clear_uuid_value() {
  if (_internal_has_uuid_value()) {
    value_type_.uuid_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value_type();
  }
}
inline const std::string& PrimitiveValue::uuid_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.PrimitiveValue.uuid_value)
  return _internal_uuid_value();
}
inline void PrimitiveValue::set_uuid_value(const std::string& value) {
  _internal_set_uuid_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.PrimitiveValue.uuid_value)
}
inline std::string* PrimitiveValue::mutable_uuid_value() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.PrimitiveValue.uuid_value)
  return _internal_mutable_uuid_value();
}
inline const std::string& PrimitiveValue::_internal_uuid_value() const {
  if (_internal_has_uuid_value()) {
    return value_type_.uuid_value_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PrimitiveValue::_internal_set_uuid_value(const std::string& value) {
  if (!_internal_has_uuid_value()) {
    clear_value_type();
    set_has_uuid_value();
    value_type_.uuid_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.uuid_value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrimitiveValue::set_uuid_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.PrimitiveValue.uuid_value)
  if (!_internal_has_uuid_value()) {
    clear_value_type();
    set_has_uuid_value();
    value_type_.uuid_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.uuid_value_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.PrimitiveValue.uuid_value)
}
inline void PrimitiveValue::set_uuid_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_uuid_value()) {
    clear_value_type();
    set_has_uuid_value();
    value_type_.uuid_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.uuid_value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.PrimitiveValue.uuid_value)
}
inline void PrimitiveValue::set_uuid_value(const void* value,
                             size_t size) {
  if (!_internal_has_uuid_value()) {
    clear_value_type();
    set_has_uuid_value();
    value_type_.uuid_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.uuid_value_.SetLite(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.PrimitiveValue.uuid_value)
}
inline std::string* PrimitiveValue::_internal_mutable_uuid_value() {
  if (!_internal_has_uuid_value()) {
    clear_value_type();
    set_has_uuid_value();
    value_type_.uuid_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_type_.uuid_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrimitiveValue::release_uuid_value() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.PrimitiveValue.uuid_value)
  if (_internal_has_uuid_value()) {
    clear_has_value_type();
    return value_type_.uuid_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void PrimitiveValue::set_allocated_uuid_value(std::string* uuid_value) {
  if (has_value_type()) {
    clear_value_type();
  }
  if (uuid_value != nullptr) {
    set_has_uuid_value();
    value_type_.uuid_value_.UnsafeSetDefault(uuid_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(uuid_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.PrimitiveValue.uuid_value)
}

// .esriPBuffer.graph.GeometryValue geometry_value = 11;
inline bool PrimitiveValue::_internal_has_geometry_value() const {
  return value_type_case() == kGeometryValue;
}
inline bool PrimitiveValue::has_geometry_value() const {
  return _internal_has_geometry_value();
}
inline void PrimitiveValue::set_has_geometry_value() {
  _oneof_case_[0] = kGeometryValue;
}
inline void PrimitiveValue::clear_geometry_value() {
  if (_internal_has_geometry_value()) {
    if (GetArena() == nullptr) {
      delete value_type_.geometry_value_;
    }
    clear_has_value_type();
  }
}
inline ::esriPBuffer::graph::GeometryValue* PrimitiveValue::release_geometry_value() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.PrimitiveValue.geometry_value)
  if (_internal_has_geometry_value()) {
    clear_has_value_type();
      ::esriPBuffer::graph::GeometryValue* temp = value_type_.geometry_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_type_.geometry_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::GeometryValue& PrimitiveValue::_internal_geometry_value() const {
  return _internal_has_geometry_value()
      ? *value_type_.geometry_value_
      : *reinterpret_cast< ::esriPBuffer::graph::GeometryValue*>(&::esriPBuffer::graph::_GeometryValue_default_instance_);
}
inline const ::esriPBuffer::graph::GeometryValue& PrimitiveValue::geometry_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.PrimitiveValue.geometry_value)
  return _internal_geometry_value();
}
inline ::esriPBuffer::graph::GeometryValue* PrimitiveValue::unsafe_arena_release_geometry_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.PrimitiveValue.geometry_value)
  if (_internal_has_geometry_value()) {
    clear_has_value_type();
    ::esriPBuffer::graph::GeometryValue* temp = value_type_.geometry_value_;
    value_type_.geometry_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PrimitiveValue::unsafe_arena_set_allocated_geometry_value(::esriPBuffer::graph::GeometryValue* geometry_value) {
  clear_value_type();
  if (geometry_value) {
    set_has_geometry_value();
    value_type_.geometry_value_ = geometry_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.PrimitiveValue.geometry_value)
}
inline ::esriPBuffer::graph::GeometryValue* PrimitiveValue::_internal_mutable_geometry_value() {
  if (!_internal_has_geometry_value()) {
    clear_value_type();
    set_has_geometry_value();
    value_type_.geometry_value_ = CreateMaybeMessage< ::esriPBuffer::graph::GeometryValue >(GetArena());
  }
  return value_type_.geometry_value_;
}
inline ::esriPBuffer::graph::GeometryValue* PrimitiveValue::mutable_geometry_value() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.PrimitiveValue.geometry_value)
  return _internal_mutable_geometry_value();
}

// bool null_tag = 12;
inline bool PrimitiveValue::_internal_has_null_tag() const {
  return value_type_case() == kNullTag;
}
inline void PrimitiveValue::set_has_null_tag() {
  _oneof_case_[0] = kNullTag;
}
inline void PrimitiveValue::clear_null_tag() {
  if (_internal_has_null_tag()) {
    value_type_.null_tag_ = false;
    clear_has_value_type();
  }
}
inline bool PrimitiveValue::_internal_null_tag() const {
  if (_internal_has_null_tag()) {
    return value_type_.null_tag_;
  }
  return false;
}
inline void PrimitiveValue::_internal_set_null_tag(bool value) {
  if (!_internal_has_null_tag()) {
    clear_value_type();
    set_has_null_tag();
  }
  value_type_.null_tag_ = value;
}
inline bool PrimitiveValue::null_tag() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.PrimitiveValue.null_tag)
  return _internal_null_tag();
}
inline void PrimitiveValue::set_null_tag(bool value) {
  _internal_set_null_tag(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.PrimitiveValue.null_tag)
}

// int64 datetime_value = 13;
inline bool PrimitiveValue::_internal_has_datetime_value() const {
  return value_type_case() == kDatetimeValue;
}
inline void PrimitiveValue::set_has_datetime_value() {
  _oneof_case_[0] = kDatetimeValue;
}
inline void PrimitiveValue::clear_datetime_value() {
  if (_internal_has_datetime_value()) {
    value_type_.datetime_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrimitiveValue::_internal_datetime_value() const {
  if (_internal_has_datetime_value()) {
    return value_type_.datetime_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void PrimitiveValue::_internal_set_datetime_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_datetime_value()) {
    clear_value_type();
    set_has_datetime_value();
  }
  value_type_.datetime_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PrimitiveValue::datetime_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.PrimitiveValue.datetime_value)
  return _internal_datetime_value();
}
inline void PrimitiveValue::set_datetime_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_datetime_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.PrimitiveValue.datetime_value)
}

inline bool PrimitiveValue::has_value_type() const {
  return value_type_case() != VALUE_TYPE_NOT_SET;
}
inline void PrimitiveValue::clear_has_value_type() {
  _oneof_case_[0] = VALUE_TYPE_NOT_SET;
}
inline PrimitiveValue::ValueTypeCase PrimitiveValue::value_type_case() const {
  return PrimitiveValue::ValueTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ObjectValue

// map<string, .esriPBuffer.graph.AnyValue> properties = 1;
inline int ObjectValue::_internal_properties_size() const {
  return properties_.size();
}
inline int ObjectValue::properties_size() const {
  return _internal_properties_size();
}
inline void ObjectValue::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
ObjectValue::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
ObjectValue::properties() const {
  // @@protoc_insertion_point(field_map:esriPBuffer.graph.ObjectValue.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
ObjectValue::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
ObjectValue::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:esriPBuffer.graph.ObjectValue.properties)
  return _internal_mutable_properties();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EntityValue

// string label = 1;
inline void EntityValue::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityValue::label() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.EntityValue.label)
  return _internal_label();
}
inline void EntityValue::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.EntityValue.label)
}
inline std::string* EntityValue::mutable_label() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.EntityValue.label)
  return _internal_mutable_label();
}
inline const std::string& EntityValue::_internal_label() const {
  return label_.Get();
}
inline void EntityValue::_internal_set_label(const std::string& value) {
  
  label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityValue::set_label(std::string&& value) {
  
  label_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.EntityValue.label)
}
inline void EntityValue::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.EntityValue.label)
}
inline void EntityValue::set_label(const char* value,
    size_t size) {
  
  label_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.EntityValue.label)
}
inline std::string* EntityValue::_internal_mutable_label() {
  
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityValue::release_label() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.EntityValue.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityValue::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.EntityValue.label)
}

// map<string, .esriPBuffer.graph.AnyValue> properties = 2;
inline int EntityValue::_internal_properties_size() const {
  return properties_.size();
}
inline int EntityValue::properties_size() const {
  return _internal_properties_size();
}
inline void EntityValue::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
EntityValue::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
EntityValue::properties() const {
  // @@protoc_insertion_point(field_map:esriPBuffer.graph.EntityValue.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
EntityValue::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
EntityValue::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:esriPBuffer.graph.EntityValue.properties)
  return _internal_mutable_properties();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RelationshipValue

// string type = 1;
inline void RelationshipValue::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RelationshipValue::type() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.RelationshipValue.type)
  return _internal_type();
}
inline void RelationshipValue::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.RelationshipValue.type)
}
inline std::string* RelationshipValue::mutable_type() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.RelationshipValue.type)
  return _internal_mutable_type();
}
inline const std::string& RelationshipValue::_internal_type() const {
  return type_.Get();
}
inline void RelationshipValue::_internal_set_type(const std::string& value) {
  
  type_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RelationshipValue::set_type(std::string&& value) {
  
  type_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.RelationshipValue.type)
}
inline void RelationshipValue::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.RelationshipValue.type)
}
inline void RelationshipValue::set_type(const char* value,
    size_t size) {
  
  type_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.RelationshipValue.type)
}
inline std::string* RelationshipValue::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RelationshipValue::release_type() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.RelationshipValue.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RelationshipValue::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.RelationshipValue.type)
}

// map<string, .esriPBuffer.graph.AnyValue> properties = 2;
inline int RelationshipValue::_internal_properties_size() const {
  return properties_.size();
}
inline int RelationshipValue::properties_size() const {
  return _internal_properties_size();
}
inline void RelationshipValue::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
RelationshipValue::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >&
RelationshipValue::properties() const {
  // @@protoc_insertion_point(field_map:esriPBuffer.graph.RelationshipValue.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
RelationshipValue::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::esriPBuffer::graph::AnyValue >*
RelationshipValue::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:esriPBuffer.graph.RelationshipValue.properties)
  return _internal_mutable_properties();
}

// -------------------------------------------------------------------

// PathValue

// repeated .esriPBuffer.graph.EntityValue entities = 1;
inline int PathValue::_internal_entities_size() const {
  return entities_.size();
}
inline int PathValue::entities_size() const {
  return _internal_entities_size();
}
inline void PathValue::clear_entities() {
  entities_.Clear();
}
inline ::esriPBuffer::graph::EntityValue* PathValue::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.PathValue.entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::EntityValue >*
PathValue::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.PathValue.entities)
  return &entities_;
}
inline const ::esriPBuffer::graph::EntityValue& PathValue::_internal_entities(int index) const {
  return entities_.Get(index);
}
inline const ::esriPBuffer::graph::EntityValue& PathValue::entities(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.PathValue.entities)
  return _internal_entities(index);
}
inline ::esriPBuffer::graph::EntityValue* PathValue::_internal_add_entities() {
  return entities_.Add();
}
inline ::esriPBuffer::graph::EntityValue* PathValue::add_entities() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.PathValue.entities)
  return _internal_add_entities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::EntityValue >&
PathValue::entities() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.PathValue.entities)
  return entities_;
}

// repeated .esriPBuffer.graph.RelationshipValue relationships = 2;
inline int PathValue::_internal_relationships_size() const {
  return relationships_.size();
}
inline int PathValue::relationships_size() const {
  return _internal_relationships_size();
}
inline void PathValue::clear_relationships() {
  relationships_.Clear();
}
inline ::esriPBuffer::graph::RelationshipValue* PathValue::mutable_relationships(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.PathValue.relationships)
  return relationships_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::RelationshipValue >*
PathValue::mutable_relationships() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.PathValue.relationships)
  return &relationships_;
}
inline const ::esriPBuffer::graph::RelationshipValue& PathValue::_internal_relationships(int index) const {
  return relationships_.Get(index);
}
inline const ::esriPBuffer::graph::RelationshipValue& PathValue::relationships(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.PathValue.relationships)
  return _internal_relationships(index);
}
inline ::esriPBuffer::graph::RelationshipValue* PathValue::_internal_add_relationships() {
  return relationships_.Add();
}
inline ::esriPBuffer::graph::RelationshipValue* PathValue::add_relationships() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.PathValue.relationships)
  return _internal_add_relationships();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::RelationshipValue >&
PathValue::relationships() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.PathValue.relationships)
  return relationships_;
}

// -------------------------------------------------------------------

// ArrayValue

// repeated .esriPBuffer.graph.AnyValue values = 1;
inline int ArrayValue::_internal_values_size() const {
  return values_.size();
}
inline int ArrayValue::values_size() const {
  return _internal_values_size();
}
inline void ArrayValue::clear_values() {
  values_.Clear();
}
inline ::esriPBuffer::graph::AnyValue* ArrayValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.ArrayValue.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::AnyValue >*
ArrayValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.graph.ArrayValue.values)
  return &values_;
}
inline const ::esriPBuffer::graph::AnyValue& ArrayValue::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::esriPBuffer::graph::AnyValue& ArrayValue::values(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.ArrayValue.values)
  return _internal_values(index);
}
inline ::esriPBuffer::graph::AnyValue* ArrayValue::_internal_add_values() {
  return values_.Add();
}
inline ::esriPBuffer::graph::AnyValue* ArrayValue::add_values() {
  // @@protoc_insertion_point(field_add:esriPBuffer.graph.ArrayValue.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::graph::AnyValue >&
ArrayValue::values() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.graph.ArrayValue.values)
  return values_;
}

// -------------------------------------------------------------------

// AnyValue

// .esriPBuffer.graph.PrimitiveValue primitive_value = 1;
inline bool AnyValue::_internal_has_primitive_value() const {
  return any_value_type_case() == kPrimitiveValue;
}
inline bool AnyValue::has_primitive_value() const {
  return _internal_has_primitive_value();
}
inline void AnyValue::set_has_primitive_value() {
  _oneof_case_[0] = kPrimitiveValue;
}
inline void AnyValue::clear_primitive_value() {
  if (_internal_has_primitive_value()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.primitive_value_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::PrimitiveValue* AnyValue::release_primitive_value() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.primitive_value)
  if (_internal_has_primitive_value()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::PrimitiveValue* temp = any_value_type_.primitive_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.primitive_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::PrimitiveValue& AnyValue::_internal_primitive_value() const {
  return _internal_has_primitive_value()
      ? *any_value_type_.primitive_value_
      : *reinterpret_cast< ::esriPBuffer::graph::PrimitiveValue*>(&::esriPBuffer::graph::_PrimitiveValue_default_instance_);
}
inline const ::esriPBuffer::graph::PrimitiveValue& AnyValue::primitive_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.primitive_value)
  return _internal_primitive_value();
}
inline ::esriPBuffer::graph::PrimitiveValue* AnyValue::unsafe_arena_release_primitive_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.primitive_value)
  if (_internal_has_primitive_value()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::PrimitiveValue* temp = any_value_type_.primitive_value_;
    any_value_type_.primitive_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_primitive_value(::esriPBuffer::graph::PrimitiveValue* primitive_value) {
  clear_any_value_type();
  if (primitive_value) {
    set_has_primitive_value();
    any_value_type_.primitive_value_ = primitive_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.primitive_value)
}
inline ::esriPBuffer::graph::PrimitiveValue* AnyValue::_internal_mutable_primitive_value() {
  if (!_internal_has_primitive_value()) {
    clear_any_value_type();
    set_has_primitive_value();
    any_value_type_.primitive_value_ = CreateMaybeMessage< ::esriPBuffer::graph::PrimitiveValue >(GetArena());
  }
  return any_value_type_.primitive_value_;
}
inline ::esriPBuffer::graph::PrimitiveValue* AnyValue::mutable_primitive_value() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.primitive_value)
  return _internal_mutable_primitive_value();
}

// .esriPBuffer.graph.ArrayValue array_value = 2;
inline bool AnyValue::_internal_has_array_value() const {
  return any_value_type_case() == kArrayValue;
}
inline bool AnyValue::has_array_value() const {
  return _internal_has_array_value();
}
inline void AnyValue::set_has_array_value() {
  _oneof_case_[0] = kArrayValue;
}
inline void AnyValue::clear_array_value() {
  if (_internal_has_array_value()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.array_value_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::ArrayValue* AnyValue::release_array_value() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.array_value)
  if (_internal_has_array_value()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::ArrayValue* temp = any_value_type_.array_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.array_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::ArrayValue& AnyValue::_internal_array_value() const {
  return _internal_has_array_value()
      ? *any_value_type_.array_value_
      : *reinterpret_cast< ::esriPBuffer::graph::ArrayValue*>(&::esriPBuffer::graph::_ArrayValue_default_instance_);
}
inline const ::esriPBuffer::graph::ArrayValue& AnyValue::array_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.array_value)
  return _internal_array_value();
}
inline ::esriPBuffer::graph::ArrayValue* AnyValue::unsafe_arena_release_array_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.array_value)
  if (_internal_has_array_value()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::ArrayValue* temp = any_value_type_.array_value_;
    any_value_type_.array_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_array_value(::esriPBuffer::graph::ArrayValue* array_value) {
  clear_any_value_type();
  if (array_value) {
    set_has_array_value();
    any_value_type_.array_value_ = array_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.array_value)
}
inline ::esriPBuffer::graph::ArrayValue* AnyValue::_internal_mutable_array_value() {
  if (!_internal_has_array_value()) {
    clear_any_value_type();
    set_has_array_value();
    any_value_type_.array_value_ = CreateMaybeMessage< ::esriPBuffer::graph::ArrayValue >(GetArena());
  }
  return any_value_type_.array_value_;
}
inline ::esriPBuffer::graph::ArrayValue* AnyValue::mutable_array_value() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.array_value)
  return _internal_mutable_array_value();
}

// .esriPBuffer.graph.ObjectValue object_value = 3;
inline bool AnyValue::_internal_has_object_value() const {
  return any_value_type_case() == kObjectValue;
}
inline bool AnyValue::has_object_value() const {
  return _internal_has_object_value();
}
inline void AnyValue::set_has_object_value() {
  _oneof_case_[0] = kObjectValue;
}
inline void AnyValue::clear_object_value() {
  if (_internal_has_object_value()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.object_value_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::ObjectValue* AnyValue::release_object_value() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.object_value)
  if (_internal_has_object_value()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::ObjectValue* temp = any_value_type_.object_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.object_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::ObjectValue& AnyValue::_internal_object_value() const {
  return _internal_has_object_value()
      ? *any_value_type_.object_value_
      : *reinterpret_cast< ::esriPBuffer::graph::ObjectValue*>(&::esriPBuffer::graph::_ObjectValue_default_instance_);
}
inline const ::esriPBuffer::graph::ObjectValue& AnyValue::object_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.object_value)
  return _internal_object_value();
}
inline ::esriPBuffer::graph::ObjectValue* AnyValue::unsafe_arena_release_object_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.object_value)
  if (_internal_has_object_value()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::ObjectValue* temp = any_value_type_.object_value_;
    any_value_type_.object_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_object_value(::esriPBuffer::graph::ObjectValue* object_value) {
  clear_any_value_type();
  if (object_value) {
    set_has_object_value();
    any_value_type_.object_value_ = object_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.object_value)
}
inline ::esriPBuffer::graph::ObjectValue* AnyValue::_internal_mutable_object_value() {
  if (!_internal_has_object_value()) {
    clear_any_value_type();
    set_has_object_value();
    any_value_type_.object_value_ = CreateMaybeMessage< ::esriPBuffer::graph::ObjectValue >(GetArena());
  }
  return any_value_type_.object_value_;
}
inline ::esriPBuffer::graph::ObjectValue* AnyValue::mutable_object_value() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.object_value)
  return _internal_mutable_object_value();
}

// .esriPBuffer.graph.EntityValue entity_value = 4;
inline bool AnyValue::_internal_has_entity_value() const {
  return any_value_type_case() == kEntityValue;
}
inline bool AnyValue::has_entity_value() const {
  return _internal_has_entity_value();
}
inline void AnyValue::set_has_entity_value() {
  _oneof_case_[0] = kEntityValue;
}
inline void AnyValue::clear_entity_value() {
  if (_internal_has_entity_value()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.entity_value_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::EntityValue* AnyValue::release_entity_value() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.entity_value)
  if (_internal_has_entity_value()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::EntityValue* temp = any_value_type_.entity_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.entity_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::EntityValue& AnyValue::_internal_entity_value() const {
  return _internal_has_entity_value()
      ? *any_value_type_.entity_value_
      : *reinterpret_cast< ::esriPBuffer::graph::EntityValue*>(&::esriPBuffer::graph::_EntityValue_default_instance_);
}
inline const ::esriPBuffer::graph::EntityValue& AnyValue::entity_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.entity_value)
  return _internal_entity_value();
}
inline ::esriPBuffer::graph::EntityValue* AnyValue::unsafe_arena_release_entity_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.entity_value)
  if (_internal_has_entity_value()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::EntityValue* temp = any_value_type_.entity_value_;
    any_value_type_.entity_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_entity_value(::esriPBuffer::graph::EntityValue* entity_value) {
  clear_any_value_type();
  if (entity_value) {
    set_has_entity_value();
    any_value_type_.entity_value_ = entity_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.entity_value)
}
inline ::esriPBuffer::graph::EntityValue* AnyValue::_internal_mutable_entity_value() {
  if (!_internal_has_entity_value()) {
    clear_any_value_type();
    set_has_entity_value();
    any_value_type_.entity_value_ = CreateMaybeMessage< ::esriPBuffer::graph::EntityValue >(GetArena());
  }
  return any_value_type_.entity_value_;
}
inline ::esriPBuffer::graph::EntityValue* AnyValue::mutable_entity_value() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.entity_value)
  return _internal_mutable_entity_value();
}

// .esriPBuffer.graph.RelationshipValue relationship_value = 5;
inline bool AnyValue::_internal_has_relationship_value() const {
  return any_value_type_case() == kRelationshipValue;
}
inline bool AnyValue::has_relationship_value() const {
  return _internal_has_relationship_value();
}
inline void AnyValue::set_has_relationship_value() {
  _oneof_case_[0] = kRelationshipValue;
}
inline void AnyValue::clear_relationship_value() {
  if (_internal_has_relationship_value()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.relationship_value_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::RelationshipValue* AnyValue::release_relationship_value() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.relationship_value)
  if (_internal_has_relationship_value()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::RelationshipValue* temp = any_value_type_.relationship_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.relationship_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::RelationshipValue& AnyValue::_internal_relationship_value() const {
  return _internal_has_relationship_value()
      ? *any_value_type_.relationship_value_
      : *reinterpret_cast< ::esriPBuffer::graph::RelationshipValue*>(&::esriPBuffer::graph::_RelationshipValue_default_instance_);
}
inline const ::esriPBuffer::graph::RelationshipValue& AnyValue::relationship_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.relationship_value)
  return _internal_relationship_value();
}
inline ::esriPBuffer::graph::RelationshipValue* AnyValue::unsafe_arena_release_relationship_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.relationship_value)
  if (_internal_has_relationship_value()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::RelationshipValue* temp = any_value_type_.relationship_value_;
    any_value_type_.relationship_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_relationship_value(::esriPBuffer::graph::RelationshipValue* relationship_value) {
  clear_any_value_type();
  if (relationship_value) {
    set_has_relationship_value();
    any_value_type_.relationship_value_ = relationship_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.relationship_value)
}
inline ::esriPBuffer::graph::RelationshipValue* AnyValue::_internal_mutable_relationship_value() {
  if (!_internal_has_relationship_value()) {
    clear_any_value_type();
    set_has_relationship_value();
    any_value_type_.relationship_value_ = CreateMaybeMessage< ::esriPBuffer::graph::RelationshipValue >(GetArena());
  }
  return any_value_type_.relationship_value_;
}
inline ::esriPBuffer::graph::RelationshipValue* AnyValue::mutable_relationship_value() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.relationship_value)
  return _internal_mutable_relationship_value();
}

// .esriPBuffer.graph.PathValue path_value = 6;
inline bool AnyValue::_internal_has_path_value() const {
  return any_value_type_case() == kPathValue;
}
inline bool AnyValue::has_path_value() const {
  return _internal_has_path_value();
}
inline void AnyValue::set_has_path_value() {
  _oneof_case_[0] = kPathValue;
}
inline void AnyValue::clear_path_value() {
  if (_internal_has_path_value()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.path_value_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::PathValue* AnyValue::release_path_value() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.path_value)
  if (_internal_has_path_value()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::PathValue* temp = any_value_type_.path_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.path_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::PathValue& AnyValue::_internal_path_value() const {
  return _internal_has_path_value()
      ? *any_value_type_.path_value_
      : *reinterpret_cast< ::esriPBuffer::graph::PathValue*>(&::esriPBuffer::graph::_PathValue_default_instance_);
}
inline const ::esriPBuffer::graph::PathValue& AnyValue::path_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.path_value)
  return _internal_path_value();
}
inline ::esriPBuffer::graph::PathValue* AnyValue::unsafe_arena_release_path_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.path_value)
  if (_internal_has_path_value()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::PathValue* temp = any_value_type_.path_value_;
    any_value_type_.path_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_path_value(::esriPBuffer::graph::PathValue* path_value) {
  clear_any_value_type();
  if (path_value) {
    set_has_path_value();
    any_value_type_.path_value_ = path_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.path_value)
}
inline ::esriPBuffer::graph::PathValue* AnyValue::_internal_mutable_path_value() {
  if (!_internal_has_path_value()) {
    clear_any_value_type();
    set_has_path_value();
    any_value_type_.path_value_ = CreateMaybeMessage< ::esriPBuffer::graph::PathValue >(GetArena());
  }
  return any_value_type_.path_value_;
}
inline ::esriPBuffer::graph::PathValue* AnyValue::mutable_path_value() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.path_value)
  return _internal_mutable_path_value();
}

// .esriPBuffer.graph.FloatArray float_array = 7;
inline bool AnyValue::_internal_has_float_array() const {
  return any_value_type_case() == kFloatArray;
}
inline bool AnyValue::has_float_array() const {
  return _internal_has_float_array();
}
inline void AnyValue::set_has_float_array() {
  _oneof_case_[0] = kFloatArray;
}
inline void AnyValue::clear_float_array() {
  if (_internal_has_float_array()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.float_array_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::FloatArray* AnyValue::release_float_array() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.float_array)
  if (_internal_has_float_array()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::FloatArray* temp = any_value_type_.float_array_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.float_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::FloatArray& AnyValue::_internal_float_array() const {
  return _internal_has_float_array()
      ? *any_value_type_.float_array_
      : *reinterpret_cast< ::esriPBuffer::graph::FloatArray*>(&::esriPBuffer::graph::_FloatArray_default_instance_);
}
inline const ::esriPBuffer::graph::FloatArray& AnyValue::float_array() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.float_array)
  return _internal_float_array();
}
inline ::esriPBuffer::graph::FloatArray* AnyValue::unsafe_arena_release_float_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.float_array)
  if (_internal_has_float_array()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::FloatArray* temp = any_value_type_.float_array_;
    any_value_type_.float_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_float_array(::esriPBuffer::graph::FloatArray* float_array) {
  clear_any_value_type();
  if (float_array) {
    set_has_float_array();
    any_value_type_.float_array_ = float_array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.float_array)
}
inline ::esriPBuffer::graph::FloatArray* AnyValue::_internal_mutable_float_array() {
  if (!_internal_has_float_array()) {
    clear_any_value_type();
    set_has_float_array();
    any_value_type_.float_array_ = CreateMaybeMessage< ::esriPBuffer::graph::FloatArray >(GetArena());
  }
  return any_value_type_.float_array_;
}
inline ::esriPBuffer::graph::FloatArray* AnyValue::mutable_float_array() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.float_array)
  return _internal_mutable_float_array();
}

// .esriPBuffer.graph.Int32Array float_compressed_as_int32_array = 8;
inline bool AnyValue::_internal_has_float_compressed_as_int32_array() const {
  return any_value_type_case() == kFloatCompressedAsInt32Array;
}
inline bool AnyValue::has_float_compressed_as_int32_array() const {
  return _internal_has_float_compressed_as_int32_array();
}
inline void AnyValue::set_has_float_compressed_as_int32_array() {
  _oneof_case_[0] = kFloatCompressedAsInt32Array;
}
inline void AnyValue::clear_float_compressed_as_int32_array() {
  if (_internal_has_float_compressed_as_int32_array()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.float_compressed_as_int32_array_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::Int32Array* AnyValue::release_float_compressed_as_int32_array() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.float_compressed_as_int32_array)
  if (_internal_has_float_compressed_as_int32_array()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::Int32Array* temp = any_value_type_.float_compressed_as_int32_array_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.float_compressed_as_int32_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::Int32Array& AnyValue::_internal_float_compressed_as_int32_array() const {
  return _internal_has_float_compressed_as_int32_array()
      ? *any_value_type_.float_compressed_as_int32_array_
      : *reinterpret_cast< ::esriPBuffer::graph::Int32Array*>(&::esriPBuffer::graph::_Int32Array_default_instance_);
}
inline const ::esriPBuffer::graph::Int32Array& AnyValue::float_compressed_as_int32_array() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.float_compressed_as_int32_array)
  return _internal_float_compressed_as_int32_array();
}
inline ::esriPBuffer::graph::Int32Array* AnyValue::unsafe_arena_release_float_compressed_as_int32_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.float_compressed_as_int32_array)
  if (_internal_has_float_compressed_as_int32_array()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::Int32Array* temp = any_value_type_.float_compressed_as_int32_array_;
    any_value_type_.float_compressed_as_int32_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_float_compressed_as_int32_array(::esriPBuffer::graph::Int32Array* float_compressed_as_int32_array) {
  clear_any_value_type();
  if (float_compressed_as_int32_array) {
    set_has_float_compressed_as_int32_array();
    any_value_type_.float_compressed_as_int32_array_ = float_compressed_as_int32_array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.float_compressed_as_int32_array)
}
inline ::esriPBuffer::graph::Int32Array* AnyValue::_internal_mutable_float_compressed_as_int32_array() {
  if (!_internal_has_float_compressed_as_int32_array()) {
    clear_any_value_type();
    set_has_float_compressed_as_int32_array();
    any_value_type_.float_compressed_as_int32_array_ = CreateMaybeMessage< ::esriPBuffer::graph::Int32Array >(GetArena());
  }
  return any_value_type_.float_compressed_as_int32_array_;
}
inline ::esriPBuffer::graph::Int32Array* AnyValue::mutable_float_compressed_as_int32_array() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.float_compressed_as_int32_array)
  return _internal_mutable_float_compressed_as_int32_array();
}

// .esriPBuffer.graph.DoubleArray double_array = 9;
inline bool AnyValue::_internal_has_double_array() const {
  return any_value_type_case() == kDoubleArray;
}
inline bool AnyValue::has_double_array() const {
  return _internal_has_double_array();
}
inline void AnyValue::set_has_double_array() {
  _oneof_case_[0] = kDoubleArray;
}
inline void AnyValue::clear_double_array() {
  if (_internal_has_double_array()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.double_array_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::DoubleArray* AnyValue::release_double_array() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.double_array)
  if (_internal_has_double_array()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::DoubleArray* temp = any_value_type_.double_array_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.double_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::DoubleArray& AnyValue::_internal_double_array() const {
  return _internal_has_double_array()
      ? *any_value_type_.double_array_
      : *reinterpret_cast< ::esriPBuffer::graph::DoubleArray*>(&::esriPBuffer::graph::_DoubleArray_default_instance_);
}
inline const ::esriPBuffer::graph::DoubleArray& AnyValue::double_array() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.double_array)
  return _internal_double_array();
}
inline ::esriPBuffer::graph::DoubleArray* AnyValue::unsafe_arena_release_double_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.double_array)
  if (_internal_has_double_array()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::DoubleArray* temp = any_value_type_.double_array_;
    any_value_type_.double_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_double_array(::esriPBuffer::graph::DoubleArray* double_array) {
  clear_any_value_type();
  if (double_array) {
    set_has_double_array();
    any_value_type_.double_array_ = double_array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.double_array)
}
inline ::esriPBuffer::graph::DoubleArray* AnyValue::_internal_mutable_double_array() {
  if (!_internal_has_double_array()) {
    clear_any_value_type();
    set_has_double_array();
    any_value_type_.double_array_ = CreateMaybeMessage< ::esriPBuffer::graph::DoubleArray >(GetArena());
  }
  return any_value_type_.double_array_;
}
inline ::esriPBuffer::graph::DoubleArray* AnyValue::mutable_double_array() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.double_array)
  return _internal_mutable_double_array();
}

// .esriPBuffer.graph.FloatArray double_compressed_as_float_array = 10;
inline bool AnyValue::_internal_has_double_compressed_as_float_array() const {
  return any_value_type_case() == kDoubleCompressedAsFloatArray;
}
inline bool AnyValue::has_double_compressed_as_float_array() const {
  return _internal_has_double_compressed_as_float_array();
}
inline void AnyValue::set_has_double_compressed_as_float_array() {
  _oneof_case_[0] = kDoubleCompressedAsFloatArray;
}
inline void AnyValue::clear_double_compressed_as_float_array() {
  if (_internal_has_double_compressed_as_float_array()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.double_compressed_as_float_array_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::FloatArray* AnyValue::release_double_compressed_as_float_array() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.double_compressed_as_float_array)
  if (_internal_has_double_compressed_as_float_array()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::FloatArray* temp = any_value_type_.double_compressed_as_float_array_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.double_compressed_as_float_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::FloatArray& AnyValue::_internal_double_compressed_as_float_array() const {
  return _internal_has_double_compressed_as_float_array()
      ? *any_value_type_.double_compressed_as_float_array_
      : *reinterpret_cast< ::esriPBuffer::graph::FloatArray*>(&::esriPBuffer::graph::_FloatArray_default_instance_);
}
inline const ::esriPBuffer::graph::FloatArray& AnyValue::double_compressed_as_float_array() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.double_compressed_as_float_array)
  return _internal_double_compressed_as_float_array();
}
inline ::esriPBuffer::graph::FloatArray* AnyValue::unsafe_arena_release_double_compressed_as_float_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.double_compressed_as_float_array)
  if (_internal_has_double_compressed_as_float_array()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::FloatArray* temp = any_value_type_.double_compressed_as_float_array_;
    any_value_type_.double_compressed_as_float_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_double_compressed_as_float_array(::esriPBuffer::graph::FloatArray* double_compressed_as_float_array) {
  clear_any_value_type();
  if (double_compressed_as_float_array) {
    set_has_double_compressed_as_float_array();
    any_value_type_.double_compressed_as_float_array_ = double_compressed_as_float_array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.double_compressed_as_float_array)
}
inline ::esriPBuffer::graph::FloatArray* AnyValue::_internal_mutable_double_compressed_as_float_array() {
  if (!_internal_has_double_compressed_as_float_array()) {
    clear_any_value_type();
    set_has_double_compressed_as_float_array();
    any_value_type_.double_compressed_as_float_array_ = CreateMaybeMessage< ::esriPBuffer::graph::FloatArray >(GetArena());
  }
  return any_value_type_.double_compressed_as_float_array_;
}
inline ::esriPBuffer::graph::FloatArray* AnyValue::mutable_double_compressed_as_float_array() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.double_compressed_as_float_array)
  return _internal_mutable_double_compressed_as_float_array();
}

// .esriPBuffer.graph.Int64Array double_compressed_as_int64_array = 11;
inline bool AnyValue::_internal_has_double_compressed_as_int64_array() const {
  return any_value_type_case() == kDoubleCompressedAsInt64Array;
}
inline bool AnyValue::has_double_compressed_as_int64_array() const {
  return _internal_has_double_compressed_as_int64_array();
}
inline void AnyValue::set_has_double_compressed_as_int64_array() {
  _oneof_case_[0] = kDoubleCompressedAsInt64Array;
}
inline void AnyValue::clear_double_compressed_as_int64_array() {
  if (_internal_has_double_compressed_as_int64_array()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.double_compressed_as_int64_array_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::Int64Array* AnyValue::release_double_compressed_as_int64_array() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.double_compressed_as_int64_array)
  if (_internal_has_double_compressed_as_int64_array()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::Int64Array* temp = any_value_type_.double_compressed_as_int64_array_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.double_compressed_as_int64_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::Int64Array& AnyValue::_internal_double_compressed_as_int64_array() const {
  return _internal_has_double_compressed_as_int64_array()
      ? *any_value_type_.double_compressed_as_int64_array_
      : *reinterpret_cast< ::esriPBuffer::graph::Int64Array*>(&::esriPBuffer::graph::_Int64Array_default_instance_);
}
inline const ::esriPBuffer::graph::Int64Array& AnyValue::double_compressed_as_int64_array() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.double_compressed_as_int64_array)
  return _internal_double_compressed_as_int64_array();
}
inline ::esriPBuffer::graph::Int64Array* AnyValue::unsafe_arena_release_double_compressed_as_int64_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.double_compressed_as_int64_array)
  if (_internal_has_double_compressed_as_int64_array()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::Int64Array* temp = any_value_type_.double_compressed_as_int64_array_;
    any_value_type_.double_compressed_as_int64_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_double_compressed_as_int64_array(::esriPBuffer::graph::Int64Array* double_compressed_as_int64_array) {
  clear_any_value_type();
  if (double_compressed_as_int64_array) {
    set_has_double_compressed_as_int64_array();
    any_value_type_.double_compressed_as_int64_array_ = double_compressed_as_int64_array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.double_compressed_as_int64_array)
}
inline ::esriPBuffer::graph::Int64Array* AnyValue::_internal_mutable_double_compressed_as_int64_array() {
  if (!_internal_has_double_compressed_as_int64_array()) {
    clear_any_value_type();
    set_has_double_compressed_as_int64_array();
    any_value_type_.double_compressed_as_int64_array_ = CreateMaybeMessage< ::esriPBuffer::graph::Int64Array >(GetArena());
  }
  return any_value_type_.double_compressed_as_int64_array_;
}
inline ::esriPBuffer::graph::Int64Array* AnyValue::mutable_double_compressed_as_int64_array() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.double_compressed_as_int64_array)
  return _internal_mutable_double_compressed_as_int64_array();
}

// .esriPBuffer.graph.Int64Array sint64_array = 12;
inline bool AnyValue::_internal_has_sint64_array() const {
  return any_value_type_case() == kSint64Array;
}
inline bool AnyValue::has_sint64_array() const {
  return _internal_has_sint64_array();
}
inline void AnyValue::set_has_sint64_array() {
  _oneof_case_[0] = kSint64Array;
}
inline void AnyValue::clear_sint64_array() {
  if (_internal_has_sint64_array()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.sint64_array_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::Int64Array* AnyValue::release_sint64_array() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.sint64_array)
  if (_internal_has_sint64_array()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::Int64Array* temp = any_value_type_.sint64_array_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.sint64_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::Int64Array& AnyValue::_internal_sint64_array() const {
  return _internal_has_sint64_array()
      ? *any_value_type_.sint64_array_
      : *reinterpret_cast< ::esriPBuffer::graph::Int64Array*>(&::esriPBuffer::graph::_Int64Array_default_instance_);
}
inline const ::esriPBuffer::graph::Int64Array& AnyValue::sint64_array() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.sint64_array)
  return _internal_sint64_array();
}
inline ::esriPBuffer::graph::Int64Array* AnyValue::unsafe_arena_release_sint64_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.sint64_array)
  if (_internal_has_sint64_array()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::Int64Array* temp = any_value_type_.sint64_array_;
    any_value_type_.sint64_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_sint64_array(::esriPBuffer::graph::Int64Array* sint64_array) {
  clear_any_value_type();
  if (sint64_array) {
    set_has_sint64_array();
    any_value_type_.sint64_array_ = sint64_array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.sint64_array)
}
inline ::esriPBuffer::graph::Int64Array* AnyValue::_internal_mutable_sint64_array() {
  if (!_internal_has_sint64_array()) {
    clear_any_value_type();
    set_has_sint64_array();
    any_value_type_.sint64_array_ = CreateMaybeMessage< ::esriPBuffer::graph::Int64Array >(GetArena());
  }
  return any_value_type_.sint64_array_;
}
inline ::esriPBuffer::graph::Int64Array* AnyValue::mutable_sint64_array() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.sint64_array)
  return _internal_mutable_sint64_array();
}

// .esriPBuffer.graph.BoolArray bool_array = 13;
inline bool AnyValue::_internal_has_bool_array() const {
  return any_value_type_case() == kBoolArray;
}
inline bool AnyValue::has_bool_array() const {
  return _internal_has_bool_array();
}
inline void AnyValue::set_has_bool_array() {
  _oneof_case_[0] = kBoolArray;
}
inline void AnyValue::clear_bool_array() {
  if (_internal_has_bool_array()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.bool_array_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::BoolArray* AnyValue::release_bool_array() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.bool_array)
  if (_internal_has_bool_array()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::BoolArray* temp = any_value_type_.bool_array_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.bool_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::BoolArray& AnyValue::_internal_bool_array() const {
  return _internal_has_bool_array()
      ? *any_value_type_.bool_array_
      : *reinterpret_cast< ::esriPBuffer::graph::BoolArray*>(&::esriPBuffer::graph::_BoolArray_default_instance_);
}
inline const ::esriPBuffer::graph::BoolArray& AnyValue::bool_array() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.bool_array)
  return _internal_bool_array();
}
inline ::esriPBuffer::graph::BoolArray* AnyValue::unsafe_arena_release_bool_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.bool_array)
  if (_internal_has_bool_array()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::BoolArray* temp = any_value_type_.bool_array_;
    any_value_type_.bool_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_bool_array(::esriPBuffer::graph::BoolArray* bool_array) {
  clear_any_value_type();
  if (bool_array) {
    set_has_bool_array();
    any_value_type_.bool_array_ = bool_array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.bool_array)
}
inline ::esriPBuffer::graph::BoolArray* AnyValue::_internal_mutable_bool_array() {
  if (!_internal_has_bool_array()) {
    clear_any_value_type();
    set_has_bool_array();
    any_value_type_.bool_array_ = CreateMaybeMessage< ::esriPBuffer::graph::BoolArray >(GetArena());
  }
  return any_value_type_.bool_array_;
}
inline ::esriPBuffer::graph::BoolArray* AnyValue::mutable_bool_array() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.bool_array)
  return _internal_mutable_bool_array();
}

// .esriPBuffer.graph.NullArray null_array = 14;
inline bool AnyValue::_internal_has_null_array() const {
  return any_value_type_case() == kNullArray;
}
inline bool AnyValue::has_null_array() const {
  return _internal_has_null_array();
}
inline void AnyValue::set_has_null_array() {
  _oneof_case_[0] = kNullArray;
}
inline void AnyValue::clear_null_array() {
  if (_internal_has_null_array()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.null_array_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::NullArray* AnyValue::release_null_array() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.null_array)
  if (_internal_has_null_array()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::NullArray* temp = any_value_type_.null_array_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.null_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::NullArray& AnyValue::_internal_null_array() const {
  return _internal_has_null_array()
      ? *any_value_type_.null_array_
      : *reinterpret_cast< ::esriPBuffer::graph::NullArray*>(&::esriPBuffer::graph::_NullArray_default_instance_);
}
inline const ::esriPBuffer::graph::NullArray& AnyValue::null_array() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.null_array)
  return _internal_null_array();
}
inline ::esriPBuffer::graph::NullArray* AnyValue::unsafe_arena_release_null_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.null_array)
  if (_internal_has_null_array()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::NullArray* temp = any_value_type_.null_array_;
    any_value_type_.null_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_null_array(::esriPBuffer::graph::NullArray* null_array) {
  clear_any_value_type();
  if (null_array) {
    set_has_null_array();
    any_value_type_.null_array_ = null_array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.null_array)
}
inline ::esriPBuffer::graph::NullArray* AnyValue::_internal_mutable_null_array() {
  if (!_internal_has_null_array()) {
    clear_any_value_type();
    set_has_null_array();
    any_value_type_.null_array_ = CreateMaybeMessage< ::esriPBuffer::graph::NullArray >(GetArena());
  }
  return any_value_type_.null_array_;
}
inline ::esriPBuffer::graph::NullArray* AnyValue::mutable_null_array() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.null_array)
  return _internal_mutable_null_array();
}

// bytes uuid_array = 15;
inline bool AnyValue::_internal_has_uuid_array() const {
  return any_value_type_case() == kUuidArray;
}
inline void AnyValue::set_has_uuid_array() {
  _oneof_case_[0] = kUuidArray;
}
inline void AnyValue::clear_uuid_array() {
  if (_internal_has_uuid_array()) {
    any_value_type_.uuid_array_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_any_value_type();
  }
}
inline const std::string& AnyValue::uuid_array() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.uuid_array)
  return _internal_uuid_array();
}
inline void AnyValue::set_uuid_array(const std::string& value) {
  _internal_set_uuid_array(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.AnyValue.uuid_array)
}
inline std::string* AnyValue::mutable_uuid_array() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.uuid_array)
  return _internal_mutable_uuid_array();
}
inline const std::string& AnyValue::_internal_uuid_array() const {
  if (_internal_has_uuid_array()) {
    return any_value_type_.uuid_array_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AnyValue::_internal_set_uuid_array(const std::string& value) {
  if (!_internal_has_uuid_array()) {
    clear_any_value_type();
    set_has_uuid_array();
    any_value_type_.uuid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  any_value_type_.uuid_array_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AnyValue::set_uuid_array(std::string&& value) {
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.AnyValue.uuid_array)
  if (!_internal_has_uuid_array()) {
    clear_any_value_type();
    set_has_uuid_array();
    any_value_type_.uuid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  any_value_type_.uuid_array_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.AnyValue.uuid_array)
}
inline void AnyValue::set_uuid_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_uuid_array()) {
    clear_any_value_type();
    set_has_uuid_array();
    any_value_type_.uuid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  any_value_type_.uuid_array_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.AnyValue.uuid_array)
}
inline void AnyValue::set_uuid_array(const void* value,
                             size_t size) {
  if (!_internal_has_uuid_array()) {
    clear_any_value_type();
    set_has_uuid_array();
    any_value_type_.uuid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  any_value_type_.uuid_array_.SetLite(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.AnyValue.uuid_array)
}
inline std::string* AnyValue::_internal_mutable_uuid_array() {
  if (!_internal_has_uuid_array()) {
    clear_any_value_type();
    set_has_uuid_array();
    any_value_type_.uuid_array_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return any_value_type_.uuid_array_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AnyValue::release_uuid_array() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.uuid_array)
  if (_internal_has_uuid_array()) {
    clear_has_any_value_type();
    return any_value_type_.uuid_array_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void AnyValue::set_allocated_uuid_array(std::string* uuid_array) {
  if (has_any_value_type()) {
    clear_any_value_type();
  }
  if (uuid_array != nullptr) {
    set_has_uuid_array();
    any_value_type_.uuid_array_.UnsafeSetDefault(uuid_array);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(uuid_array);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.AnyValue.uuid_array)
}

// .esriPBuffer.graph.DateTimeArray date_array = 19;
inline bool AnyValue::_internal_has_date_array() const {
  return any_value_type_case() == kDateArray;
}
inline bool AnyValue::has_date_array() const {
  return _internal_has_date_array();
}
inline void AnyValue::set_has_date_array() {
  _oneof_case_[0] = kDateArray;
}
inline void AnyValue::clear_date_array() {
  if (_internal_has_date_array()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.date_array_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::DateTimeArray* AnyValue::release_date_array() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.date_array)
  if (_internal_has_date_array()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::DateTimeArray* temp = any_value_type_.date_array_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.date_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::DateTimeArray& AnyValue::_internal_date_array() const {
  return _internal_has_date_array()
      ? *any_value_type_.date_array_
      : *reinterpret_cast< ::esriPBuffer::graph::DateTimeArray*>(&::esriPBuffer::graph::_DateTimeArray_default_instance_);
}
inline const ::esriPBuffer::graph::DateTimeArray& AnyValue::date_array() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.date_array)
  return _internal_date_array();
}
inline ::esriPBuffer::graph::DateTimeArray* AnyValue::unsafe_arena_release_date_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.date_array)
  if (_internal_has_date_array()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::DateTimeArray* temp = any_value_type_.date_array_;
    any_value_type_.date_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_date_array(::esriPBuffer::graph::DateTimeArray* date_array) {
  clear_any_value_type();
  if (date_array) {
    set_has_date_array();
    any_value_type_.date_array_ = date_array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.date_array)
}
inline ::esriPBuffer::graph::DateTimeArray* AnyValue::_internal_mutable_date_array() {
  if (!_internal_has_date_array()) {
    clear_any_value_type();
    set_has_date_array();
    any_value_type_.date_array_ = CreateMaybeMessage< ::esriPBuffer::graph::DateTimeArray >(GetArena());
  }
  return any_value_type_.date_array_;
}
inline ::esriPBuffer::graph::DateTimeArray* AnyValue::mutable_date_array() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.date_array)
  return _internal_mutable_date_array();
}

// .esriPBuffer.graph.StringArray string_array = 16;
inline bool AnyValue::_internal_has_string_array() const {
  return any_value_type_case() == kStringArray;
}
inline bool AnyValue::has_string_array() const {
  return _internal_has_string_array();
}
inline void AnyValue::set_has_string_array() {
  _oneof_case_[0] = kStringArray;
}
inline void AnyValue::clear_string_array() {
  if (_internal_has_string_array()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.string_array_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::StringArray* AnyValue::release_string_array() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.string_array)
  if (_internal_has_string_array()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::StringArray* temp = any_value_type_.string_array_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.string_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::StringArray& AnyValue::_internal_string_array() const {
  return _internal_has_string_array()
      ? *any_value_type_.string_array_
      : *reinterpret_cast< ::esriPBuffer::graph::StringArray*>(&::esriPBuffer::graph::_StringArray_default_instance_);
}
inline const ::esriPBuffer::graph::StringArray& AnyValue::string_array() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.string_array)
  return _internal_string_array();
}
inline ::esriPBuffer::graph::StringArray* AnyValue::unsafe_arena_release_string_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.string_array)
  if (_internal_has_string_array()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::StringArray* temp = any_value_type_.string_array_;
    any_value_type_.string_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_string_array(::esriPBuffer::graph::StringArray* string_array) {
  clear_any_value_type();
  if (string_array) {
    set_has_string_array();
    any_value_type_.string_array_ = string_array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.string_array)
}
inline ::esriPBuffer::graph::StringArray* AnyValue::_internal_mutable_string_array() {
  if (!_internal_has_string_array()) {
    clear_any_value_type();
    set_has_string_array();
    any_value_type_.string_array_ = CreateMaybeMessage< ::esriPBuffer::graph::StringArray >(GetArena());
  }
  return any_value_type_.string_array_;
}
inline ::esriPBuffer::graph::StringArray* AnyValue::mutable_string_array() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.string_array)
  return _internal_mutable_string_array();
}

// .esriPBuffer.graph.GeometryArray geometry_array = 18;
inline bool AnyValue::_internal_has_geometry_array() const {
  return any_value_type_case() == kGeometryArray;
}
inline bool AnyValue::has_geometry_array() const {
  return _internal_has_geometry_array();
}
inline void AnyValue::set_has_geometry_array() {
  _oneof_case_[0] = kGeometryArray;
}
inline void AnyValue::clear_geometry_array() {
  if (_internal_has_geometry_array()) {
    if (GetArena() == nullptr) {
      delete any_value_type_.geometry_array_;
    }
    clear_has_any_value_type();
  }
}
inline ::esriPBuffer::graph::GeometryArray* AnyValue::release_geometry_array() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.AnyValue.geometry_array)
  if (_internal_has_geometry_array()) {
    clear_has_any_value_type();
      ::esriPBuffer::graph::GeometryArray* temp = any_value_type_.geometry_array_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    any_value_type_.geometry_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::GeometryArray& AnyValue::_internal_geometry_array() const {
  return _internal_has_geometry_array()
      ? *any_value_type_.geometry_array_
      : *reinterpret_cast< ::esriPBuffer::graph::GeometryArray*>(&::esriPBuffer::graph::_GeometryArray_default_instance_);
}
inline const ::esriPBuffer::graph::GeometryArray& AnyValue::geometry_array() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.AnyValue.geometry_array)
  return _internal_geometry_array();
}
inline ::esriPBuffer::graph::GeometryArray* AnyValue::unsafe_arena_release_geometry_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.AnyValue.geometry_array)
  if (_internal_has_geometry_array()) {
    clear_has_any_value_type();
    ::esriPBuffer::graph::GeometryArray* temp = any_value_type_.geometry_array_;
    any_value_type_.geometry_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnyValue::unsafe_arena_set_allocated_geometry_array(::esriPBuffer::graph::GeometryArray* geometry_array) {
  clear_any_value_type();
  if (geometry_array) {
    set_has_geometry_array();
    any_value_type_.geometry_array_ = geometry_array;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.AnyValue.geometry_array)
}
inline ::esriPBuffer::graph::GeometryArray* AnyValue::_internal_mutable_geometry_array() {
  if (!_internal_has_geometry_array()) {
    clear_any_value_type();
    set_has_geometry_array();
    any_value_type_.geometry_array_ = CreateMaybeMessage< ::esriPBuffer::graph::GeometryArray >(GetArena());
  }
  return any_value_type_.geometry_array_;
}
inline ::esriPBuffer::graph::GeometryArray* AnyValue::mutable_geometry_array() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.AnyValue.geometry_array)
  return _internal_mutable_geometry_array();
}

inline bool AnyValue::has_any_value_type() const {
  return any_value_type_case() != ANY_VALUE_TYPE_NOT_SET;
}
inline void AnyValue::clear_has_any_value_type() {
  _oneof_case_[0] = ANY_VALUE_TYPE_NOT_SET;
}
inline AnyValue::AnyValueTypeCase AnyValue::any_value_type_case() const {
  return AnyValue::AnyValueTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Error

// sint64 error_code = 1;
inline void Error::clear_error_code() {
  error_code_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Error::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Error::error_code() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.Error.error_code)
  return _internal_error_code();
}
inline void Error::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  error_code_ = value;
}
inline void Error::set_error_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.Error.error_code)
}

// string error_message = 2;
inline void Error::clear_error_message() {
  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Error::error_message() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.Error.error_message)
  return _internal_error_message();
}
inline void Error::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.Error.error_message)
}
inline std::string* Error::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.Error.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& Error::_internal_error_message() const {
  return error_message_.Get();
}
inline void Error::_internal_set_error_message(const std::string& value) {
  
  error_message_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Error::set_error_message(std::string&& value) {
  
  error_message_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.Error.error_message)
}
inline void Error::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.Error.error_message)
}
inline void Error::set_error_message(const char* value,
    size_t size) {
  
  error_message_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.Error.error_message)
}
inline std::string* Error::_internal_mutable_error_message() {
  
  return error_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Error::release_error_message() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.Error.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Error::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.Error.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace esriPBuffer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::esriPBuffer::graph::QuantizationParameters_QuantizeMode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fEsriGraphTypes_2eproto
