// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/UpdateFieldRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "esriPBuffer/graph/DataModelTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto EXT_CLASS
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct EXT_CLASS TableStruct_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace esriPBuffer {
namespace graph {
class GraphPropertyMask;
class GraphPropertyMaskDefaultTypeInternal;
EXT_CLASS extern GraphPropertyMaskDefaultTypeInternal _GraphPropertyMask_default_instance_;
class GraphPropertyUpdateRequest;
class GraphPropertyUpdateRequestDefaultTypeInternal;
EXT_CLASS extern GraphPropertyUpdateRequestDefaultTypeInternal _GraphPropertyUpdateRequest_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> EXT_CLASS ::esriPBuffer::graph::GraphPropertyMask* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphPropertyMask>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::GraphPropertyUpdateRequest* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphPropertyUpdateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esriPBuffer {
namespace graph {

// ===================================================================

class EXT_CLASS GraphPropertyMask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphPropertyMask) */ {
 public:
  inline GraphPropertyMask() : GraphPropertyMask(nullptr) {}
  virtual ~GraphPropertyMask();

  GraphPropertyMask(const GraphPropertyMask& from);
  GraphPropertyMask(GraphPropertyMask&& from) noexcept
    : GraphPropertyMask() {
    *this = ::std::move(from);
  }

  inline GraphPropertyMask& operator=(const GraphPropertyMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphPropertyMask& operator=(GraphPropertyMask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphPropertyMask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphPropertyMask* internal_default_instance() {
    return reinterpret_cast<const GraphPropertyMask*>(
               &_GraphPropertyMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GraphPropertyMask& a, GraphPropertyMask& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphPropertyMask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphPropertyMask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphPropertyMask* New() const final {
    return CreateMaybeMessage<GraphPropertyMask>(nullptr);
  }

  GraphPropertyMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphPropertyMask>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphPropertyMask& from);
  void MergeFrom(const GraphPropertyMask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphPropertyMask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphPropertyMask";
  }
  protected:
  explicit GraphPropertyMask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateNameFieldNumber = 1,
    kUpdateAliasFieldNumber = 2,
    kUpdateFieldTypeFieldNumber = 3,
    kUpdateGeometryTypeFieldNumber = 4,
    kUpdateDefaultValueFieldNumber = 5,
    kUpdateNullableFieldNumber = 6,
    kUpdateEditableFieldNumber = 7,
    kUpdateVisibleFieldNumber = 8,
    kUpdateRequiredFieldNumber = 9,
    kUpdateDomainFieldNumber = 10,
    kUpdateHasZFieldNumber = 12,
    kUpdateHasMFieldNumber = 13,
    kUpdateSearchableFieldNumber = 14,
  };
  // bool update_name = 1;
  void clear_update_name();
  bool update_name() const;
  void set_update_name(bool value);
  private:
  bool _internal_update_name() const;
  void _internal_set_update_name(bool value);
  public:

  // bool update_alias = 2;
  void clear_update_alias();
  bool update_alias() const;
  void set_update_alias(bool value);
  private:
  bool _internal_update_alias() const;
  void _internal_set_update_alias(bool value);
  public:

  // bool update_field_type = 3;
  void clear_update_field_type();
  bool update_field_type() const;
  void set_update_field_type(bool value);
  private:
  bool _internal_update_field_type() const;
  void _internal_set_update_field_type(bool value);
  public:

  // bool update_geometry_type = 4;
  void clear_update_geometry_type();
  bool update_geometry_type() const;
  void set_update_geometry_type(bool value);
  private:
  bool _internal_update_geometry_type() const;
  void _internal_set_update_geometry_type(bool value);
  public:

  // bool update_default_value = 5;
  void clear_update_default_value();
  bool update_default_value() const;
  void set_update_default_value(bool value);
  private:
  bool _internal_update_default_value() const;
  void _internal_set_update_default_value(bool value);
  public:

  // bool update_nullable = 6;
  void clear_update_nullable();
  bool update_nullable() const;
  void set_update_nullable(bool value);
  private:
  bool _internal_update_nullable() const;
  void _internal_set_update_nullable(bool value);
  public:

  // bool update_editable = 7;
  void clear_update_editable();
  bool update_editable() const;
  void set_update_editable(bool value);
  private:
  bool _internal_update_editable() const;
  void _internal_set_update_editable(bool value);
  public:

  // bool update_visible = 8;
  void clear_update_visible();
  bool update_visible() const;
  void set_update_visible(bool value);
  private:
  bool _internal_update_visible() const;
  void _internal_set_update_visible(bool value);
  public:

  // bool update_required = 9;
  void clear_update_required();
  bool update_required() const;
  void set_update_required(bool value);
  private:
  bool _internal_update_required() const;
  void _internal_set_update_required(bool value);
  public:

  // bool update_domain = 10;
  void clear_update_domain();
  bool update_domain() const;
  void set_update_domain(bool value);
  private:
  bool _internal_update_domain() const;
  void _internal_set_update_domain(bool value);
  public:

  // bool update_has_z = 12;
  void clear_update_has_z();
  bool update_has_z() const;
  void set_update_has_z(bool value);
  private:
  bool _internal_update_has_z() const;
  void _internal_set_update_has_z(bool value);
  public:

  // bool update_has_m = 13;
  void clear_update_has_m();
  bool update_has_m() const;
  void set_update_has_m(bool value);
  private:
  bool _internal_update_has_m() const;
  void _internal_set_update_has_m(bool value);
  public:

  // bool update_searchable = 14;
  void clear_update_searchable();
  bool update_searchable() const;
  void set_update_searchable(bool value);
  private:
  bool _internal_update_searchable() const;
  void _internal_set_update_searchable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphPropertyMask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool update_name_;
  bool update_alias_;
  bool update_field_type_;
  bool update_geometry_type_;
  bool update_default_value_;
  bool update_nullable_;
  bool update_editable_;
  bool update_visible_;
  bool update_required_;
  bool update_domain_;
  bool update_has_z_;
  bool update_has_m_;
  bool update_searchable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS GraphPropertyUpdateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphPropertyUpdateRequest) */ {
 public:
  inline GraphPropertyUpdateRequest() : GraphPropertyUpdateRequest(nullptr) {}
  virtual ~GraphPropertyUpdateRequest();

  GraphPropertyUpdateRequest(const GraphPropertyUpdateRequest& from);
  GraphPropertyUpdateRequest(GraphPropertyUpdateRequest&& from) noexcept
    : GraphPropertyUpdateRequest() {
    *this = ::std::move(from);
  }

  inline GraphPropertyUpdateRequest& operator=(const GraphPropertyUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphPropertyUpdateRequest& operator=(GraphPropertyUpdateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphPropertyUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphPropertyUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const GraphPropertyUpdateRequest*>(
               &_GraphPropertyUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GraphPropertyUpdateRequest& a, GraphPropertyUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphPropertyUpdateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphPropertyUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphPropertyUpdateRequest* New() const final {
    return CreateMaybeMessage<GraphPropertyUpdateRequest>(nullptr);
  }

  GraphPropertyUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphPropertyUpdateRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphPropertyUpdateRequest& from);
  void MergeFrom(const GraphPropertyUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphPropertyUpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphPropertyUpdateRequest";
  }
  protected:
  explicit GraphPropertyUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 3,
    kMaskFieldNumber = 1,
    kGraphPropertyFieldNumber = 2,
  };
  // string property_name = 3;
  void clear_property_name();
  const std::string& property_name() const;
  void set_property_name(const std::string& value);
  void set_property_name(std::string&& value);
  void set_property_name(const char* value);
  void set_property_name(const char* value, size_t size);
  std::string* mutable_property_name();
  std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // .esriPBuffer.graph.GraphPropertyMask mask = 1;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  const ::esriPBuffer::graph::GraphPropertyMask& mask() const;
  ::esriPBuffer::graph::GraphPropertyMask* release_mask();
  ::esriPBuffer::graph::GraphPropertyMask* mutable_mask();
  void set_allocated_mask(::esriPBuffer::graph::GraphPropertyMask* mask);
  private:
  const ::esriPBuffer::graph::GraphPropertyMask& _internal_mask() const;
  ::esriPBuffer::graph::GraphPropertyMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      ::esriPBuffer::graph::GraphPropertyMask* mask);
  ::esriPBuffer::graph::GraphPropertyMask* unsafe_arena_release_mask();

  // .esriPBuffer.graph.GraphProperty graph_property = 2;
  bool has_graph_property() const;
  private:
  bool _internal_has_graph_property() const;
  public:
  void clear_graph_property();
  const ::esriPBuffer::graph::GraphProperty& graph_property() const;
  ::esriPBuffer::graph::GraphProperty* release_graph_property();
  ::esriPBuffer::graph::GraphProperty* mutable_graph_property();
  void set_allocated_graph_property(::esriPBuffer::graph::GraphProperty* graph_property);
  private:
  const ::esriPBuffer::graph::GraphProperty& _internal_graph_property() const;
  ::esriPBuffer::graph::GraphProperty* _internal_mutable_graph_property();
  public:
  void unsafe_arena_set_allocated_graph_property(
      ::esriPBuffer::graph::GraphProperty* graph_property);
  ::esriPBuffer::graph::GraphProperty* unsafe_arena_release_graph_property();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphPropertyUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  ::esriPBuffer::graph::GraphPropertyMask* mask_;
  ::esriPBuffer::graph::GraphProperty* graph_property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GraphPropertyMask

// bool update_name = 1;
inline void GraphPropertyMask::clear_update_name() {
  update_name_ = false;
}
inline bool GraphPropertyMask::_internal_update_name() const {
  return update_name_;
}
inline bool GraphPropertyMask::update_name() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyMask.update_name)
  return _internal_update_name();
}
inline void GraphPropertyMask::_internal_set_update_name(bool value) {
  
  update_name_ = value;
}
inline void GraphPropertyMask::set_update_name(bool value) {
  _internal_set_update_name(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphPropertyMask.update_name)
}

// bool update_alias = 2;
inline void GraphPropertyMask::clear_update_alias() {
  update_alias_ = false;
}
inline bool GraphPropertyMask::_internal_update_alias() const {
  return update_alias_;
}
inline bool GraphPropertyMask::update_alias() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyMask.update_alias)
  return _internal_update_alias();
}
inline void GraphPropertyMask::_internal_set_update_alias(bool value) {
  
  update_alias_ = value;
}
inline void GraphPropertyMask::set_update_alias(bool value) {
  _internal_set_update_alias(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphPropertyMask.update_alias)
}

// bool update_field_type = 3;
inline void GraphPropertyMask::clear_update_field_type() {
  update_field_type_ = false;
}
inline bool GraphPropertyMask::_internal_update_field_type() const {
  return update_field_type_;
}
inline bool GraphPropertyMask::update_field_type() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyMask.update_field_type)
  return _internal_update_field_type();
}
inline void GraphPropertyMask::_internal_set_update_field_type(bool value) {
  
  update_field_type_ = value;
}
inline void GraphPropertyMask::set_update_field_type(bool value) {
  _internal_set_update_field_type(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphPropertyMask.update_field_type)
}

// bool update_geometry_type = 4;
inline void GraphPropertyMask::clear_update_geometry_type() {
  update_geometry_type_ = false;
}
inline bool GraphPropertyMask::_internal_update_geometry_type() const {
  return update_geometry_type_;
}
inline bool GraphPropertyMask::update_geometry_type() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyMask.update_geometry_type)
  return _internal_update_geometry_type();
}
inline void GraphPropertyMask::_internal_set_update_geometry_type(bool value) {
  
  update_geometry_type_ = value;
}
inline void GraphPropertyMask::set_update_geometry_type(bool value) {
  _internal_set_update_geometry_type(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphPropertyMask.update_geometry_type)
}

// bool update_default_value = 5;
inline void GraphPropertyMask::clear_update_default_value() {
  update_default_value_ = false;
}
inline bool GraphPropertyMask::_internal_update_default_value() const {
  return update_default_value_;
}
inline bool GraphPropertyMask::update_default_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyMask.update_default_value)
  return _internal_update_default_value();
}
inline void GraphPropertyMask::_internal_set_update_default_value(bool value) {
  
  update_default_value_ = value;
}
inline void GraphPropertyMask::set_update_default_value(bool value) {
  _internal_set_update_default_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphPropertyMask.update_default_value)
}

// bool update_nullable = 6;
inline void GraphPropertyMask::clear_update_nullable() {
  update_nullable_ = false;
}
inline bool GraphPropertyMask::_internal_update_nullable() const {
  return update_nullable_;
}
inline bool GraphPropertyMask::update_nullable() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyMask.update_nullable)
  return _internal_update_nullable();
}
inline void GraphPropertyMask::_internal_set_update_nullable(bool value) {
  
  update_nullable_ = value;
}
inline void GraphPropertyMask::set_update_nullable(bool value) {
  _internal_set_update_nullable(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphPropertyMask.update_nullable)
}

// bool update_editable = 7;
inline void GraphPropertyMask::clear_update_editable() {
  update_editable_ = false;
}
inline bool GraphPropertyMask::_internal_update_editable() const {
  return update_editable_;
}
inline bool GraphPropertyMask::update_editable() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyMask.update_editable)
  return _internal_update_editable();
}
inline void GraphPropertyMask::_internal_set_update_editable(bool value) {
  
  update_editable_ = value;
}
inline void GraphPropertyMask::set_update_editable(bool value) {
  _internal_set_update_editable(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphPropertyMask.update_editable)
}

// bool update_visible = 8;
inline void GraphPropertyMask::clear_update_visible() {
  update_visible_ = false;
}
inline bool GraphPropertyMask::_internal_update_visible() const {
  return update_visible_;
}
inline bool GraphPropertyMask::update_visible() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyMask.update_visible)
  return _internal_update_visible();
}
inline void GraphPropertyMask::_internal_set_update_visible(bool value) {
  
  update_visible_ = value;
}
inline void GraphPropertyMask::set_update_visible(bool value) {
  _internal_set_update_visible(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphPropertyMask.update_visible)
}

// bool update_required = 9;
inline void GraphPropertyMask::clear_update_required() {
  update_required_ = false;
}
inline bool GraphPropertyMask::_internal_update_required() const {
  return update_required_;
}
inline bool GraphPropertyMask::update_required() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyMask.update_required)
  return _internal_update_required();
}
inline void GraphPropertyMask::_internal_set_update_required(bool value) {
  
  update_required_ = value;
}
inline void GraphPropertyMask::set_update_required(bool value) {
  _internal_set_update_required(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphPropertyMask.update_required)
}

// bool update_domain = 10;
inline void GraphPropertyMask::clear_update_domain() {
  update_domain_ = false;
}
inline bool GraphPropertyMask::_internal_update_domain() const {
  return update_domain_;
}
inline bool GraphPropertyMask::update_domain() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyMask.update_domain)
  return _internal_update_domain();
}
inline void GraphPropertyMask::_internal_set_update_domain(bool value) {
  
  update_domain_ = value;
}
inline void GraphPropertyMask::set_update_domain(bool value) {
  _internal_set_update_domain(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphPropertyMask.update_domain)
}

// bool update_has_z = 12;
inline void GraphPropertyMask::clear_update_has_z() {
  update_has_z_ = false;
}
inline bool GraphPropertyMask::_internal_update_has_z() const {
  return update_has_z_;
}
inline bool GraphPropertyMask::update_has_z() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyMask.update_has_z)
  return _internal_update_has_z();
}
inline void GraphPropertyMask::_internal_set_update_has_z(bool value) {
  
  update_has_z_ = value;
}
inline void GraphPropertyMask::set_update_has_z(bool value) {
  _internal_set_update_has_z(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphPropertyMask.update_has_z)
}

// bool update_has_m = 13;
inline void GraphPropertyMask::clear_update_has_m() {
  update_has_m_ = false;
}
inline bool GraphPropertyMask::_internal_update_has_m() const {
  return update_has_m_;
}
inline bool GraphPropertyMask::update_has_m() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyMask.update_has_m)
  return _internal_update_has_m();
}
inline void GraphPropertyMask::_internal_set_update_has_m(bool value) {
  
  update_has_m_ = value;
}
inline void GraphPropertyMask::set_update_has_m(bool value) {
  _internal_set_update_has_m(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphPropertyMask.update_has_m)
}

// bool update_searchable = 14;
inline void GraphPropertyMask::clear_update_searchable() {
  update_searchable_ = false;
}
inline bool GraphPropertyMask::_internal_update_searchable() const {
  return update_searchable_;
}
inline bool GraphPropertyMask::update_searchable() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyMask.update_searchable)
  return _internal_update_searchable();
}
inline void GraphPropertyMask::_internal_set_update_searchable(bool value) {
  
  update_searchable_ = value;
}
inline void GraphPropertyMask::set_update_searchable(bool value) {
  _internal_set_update_searchable(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphPropertyMask.update_searchable)
}

// -------------------------------------------------------------------

// GraphPropertyUpdateRequest

// .esriPBuffer.graph.GraphPropertyMask mask = 1;
inline bool GraphPropertyUpdateRequest::_internal_has_mask() const {
  return this != internal_default_instance() && mask_ != nullptr;
}
inline bool GraphPropertyUpdateRequest::has_mask() const {
  return _internal_has_mask();
}
inline void GraphPropertyUpdateRequest::clear_mask() {
  if (GetArena() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
inline const ::esriPBuffer::graph::GraphPropertyMask& GraphPropertyUpdateRequest::_internal_mask() const {
  const ::esriPBuffer::graph::GraphPropertyMask* p = mask_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::GraphPropertyMask*>(
      &::esriPBuffer::graph::_GraphPropertyMask_default_instance_);
}
inline const ::esriPBuffer::graph::GraphPropertyMask& GraphPropertyUpdateRequest::mask() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyUpdateRequest.mask)
  return _internal_mask();
}
inline void GraphPropertyUpdateRequest::unsafe_arena_set_allocated_mask(
    ::esriPBuffer::graph::GraphPropertyMask* mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  mask_ = mask;
  if (mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphPropertyUpdateRequest.mask)
}
inline ::esriPBuffer::graph::GraphPropertyMask* GraphPropertyUpdateRequest::release_mask() {
  
  ::esriPBuffer::graph::GraphPropertyMask* temp = mask_;
  mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::GraphPropertyMask* GraphPropertyUpdateRequest::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphPropertyUpdateRequest.mask)
  
  ::esriPBuffer::graph::GraphPropertyMask* temp = mask_;
  mask_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::GraphPropertyMask* GraphPropertyUpdateRequest::_internal_mutable_mask() {
  
  if (mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::GraphPropertyMask>(GetArena());
    mask_ = p;
  }
  return mask_;
}
inline ::esriPBuffer::graph::GraphPropertyMask* GraphPropertyUpdateRequest::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphPropertyUpdateRequest.mask)
  return _internal_mutable_mask();
}
inline void GraphPropertyUpdateRequest::set_allocated_mask(::esriPBuffer::graph::GraphPropertyMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mask_;
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mask);
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    
  } else {
    
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphPropertyUpdateRequest.mask)
}

// .esriPBuffer.graph.GraphProperty graph_property = 2;
inline bool GraphPropertyUpdateRequest::_internal_has_graph_property() const {
  return this != internal_default_instance() && graph_property_ != nullptr;
}
inline bool GraphPropertyUpdateRequest::has_graph_property() const {
  return _internal_has_graph_property();
}
inline const ::esriPBuffer::graph::GraphProperty& GraphPropertyUpdateRequest::_internal_graph_property() const {
  const ::esriPBuffer::graph::GraphProperty* p = graph_property_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::GraphProperty*>(
      &::esriPBuffer::graph::_GraphProperty_default_instance_);
}
inline const ::esriPBuffer::graph::GraphProperty& GraphPropertyUpdateRequest::graph_property() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyUpdateRequest.graph_property)
  return _internal_graph_property();
}
inline void GraphPropertyUpdateRequest::unsafe_arena_set_allocated_graph_property(
    ::esriPBuffer::graph::GraphProperty* graph_property) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_property_);
  }
  graph_property_ = graph_property;
  if (graph_property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphPropertyUpdateRequest.graph_property)
}
inline ::esriPBuffer::graph::GraphProperty* GraphPropertyUpdateRequest::release_graph_property() {
  
  ::esriPBuffer::graph::GraphProperty* temp = graph_property_;
  graph_property_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::GraphProperty* GraphPropertyUpdateRequest::unsafe_arena_release_graph_property() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphPropertyUpdateRequest.graph_property)
  
  ::esriPBuffer::graph::GraphProperty* temp = graph_property_;
  graph_property_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::GraphProperty* GraphPropertyUpdateRequest::_internal_mutable_graph_property() {
  
  if (graph_property_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::GraphProperty>(GetArena());
    graph_property_ = p;
  }
  return graph_property_;
}
inline ::esriPBuffer::graph::GraphProperty* GraphPropertyUpdateRequest::mutable_graph_property() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphPropertyUpdateRequest.graph_property)
  return _internal_mutable_graph_property();
}
inline void GraphPropertyUpdateRequest::set_allocated_graph_property(::esriPBuffer::graph::GraphProperty* graph_property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_property_);
  }
  if (graph_property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_property)->GetArena();
    if (message_arena != submessage_arena) {
      graph_property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_property, submessage_arena);
    }
    
  } else {
    
  }
  graph_property_ = graph_property;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphPropertyUpdateRequest.graph_property)
}

// string property_name = 3;
inline void GraphPropertyUpdateRequest::clear_property_name() {
  property_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GraphPropertyUpdateRequest::property_name() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphPropertyUpdateRequest.property_name)
  return _internal_property_name();
}
inline void GraphPropertyUpdateRequest::set_property_name(const std::string& value) {
  _internal_set_property_name(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.GraphPropertyUpdateRequest.property_name)
}
inline std::string* GraphPropertyUpdateRequest::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphPropertyUpdateRequest.property_name)
  return _internal_mutable_property_name();
}
inline const std::string& GraphPropertyUpdateRequest::_internal_property_name() const {
  return property_name_.Get();
}
inline void GraphPropertyUpdateRequest::_internal_set_property_name(const std::string& value) {
  
  property_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphPropertyUpdateRequest::set_property_name(std::string&& value) {
  
  property_name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.graph.GraphPropertyUpdateRequest.property_name)
}
inline void GraphPropertyUpdateRequest::set_property_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  property_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.graph.GraphPropertyUpdateRequest.property_name)
}
inline void GraphPropertyUpdateRequest::set_property_name(const char* value,
    size_t size) {
  
  property_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.graph.GraphPropertyUpdateRequest.property_name)
}
inline std::string* GraphPropertyUpdateRequest::_internal_mutable_property_name() {
  
  return property_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphPropertyUpdateRequest::release_property_name() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphPropertyUpdateRequest.property_name)
  return property_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphPropertyUpdateRequest::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  property_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphPropertyUpdateRequest.property_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace esriPBuffer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fUpdateFieldRequest_2eproto
