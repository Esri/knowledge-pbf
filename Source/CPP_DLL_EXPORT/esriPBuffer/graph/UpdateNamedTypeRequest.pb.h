// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/graph/UpdateNamedTypeRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "esriPBuffer/graph/DataModelTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto EXT_CLASS
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct EXT_CLASS TableStruct_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace esriPBuffer {
namespace graph {
class GraphEntityTypeUpdate;
class GraphEntityTypeUpdateDefaultTypeInternal;
EXT_CLASS extern GraphEntityTypeUpdateDefaultTypeInternal _GraphEntityTypeUpdate_default_instance_;
class GraphNamedObjectTypeUpdateRequest;
class GraphNamedObjectTypeUpdateRequestDefaultTypeInternal;
EXT_CLASS extern GraphNamedObjectTypeUpdateRequestDefaultTypeInternal _GraphNamedObjectTypeUpdateRequest_default_instance_;
class GraphRelationshipTypeUpdate;
class GraphRelationshipTypeUpdateDefaultTypeInternal;
EXT_CLASS extern GraphRelationshipTypeUpdateDefaultTypeInternal _GraphRelationshipTypeUpdate_default_instance_;
class NamedObjectTypeMask;
class NamedObjectTypeMaskDefaultTypeInternal;
EXT_CLASS extern NamedObjectTypeMaskDefaultTypeInternal _NamedObjectTypeMask_default_instance_;
class RelationshipTypeMask;
class RelationshipTypeMaskDefaultTypeInternal;
EXT_CLASS extern RelationshipTypeMaskDefaultTypeInternal _RelationshipTypeMask_default_instance_;
}  // namespace graph
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> EXT_CLASS ::esriPBuffer::graph::GraphEntityTypeUpdate* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphEntityTypeUpdate>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::GraphNamedObjectTypeUpdateRequest* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphNamedObjectTypeUpdateRequest>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::GraphRelationshipTypeUpdate* Arena::CreateMaybeMessage<::esriPBuffer::graph::GraphRelationshipTypeUpdate>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::NamedObjectTypeMask* Arena::CreateMaybeMessage<::esriPBuffer::graph::NamedObjectTypeMask>(Arena*);
template<> EXT_CLASS ::esriPBuffer::graph::RelationshipTypeMask* Arena::CreateMaybeMessage<::esriPBuffer::graph::RelationshipTypeMask>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esriPBuffer {
namespace graph {

// ===================================================================

class EXT_CLASS GraphNamedObjectTypeUpdateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest) */ {
 public:
  inline GraphNamedObjectTypeUpdateRequest() : GraphNamedObjectTypeUpdateRequest(nullptr) {}
  virtual ~GraphNamedObjectTypeUpdateRequest();

  GraphNamedObjectTypeUpdateRequest(const GraphNamedObjectTypeUpdateRequest& from);
  GraphNamedObjectTypeUpdateRequest(GraphNamedObjectTypeUpdateRequest&& from) noexcept
    : GraphNamedObjectTypeUpdateRequest() {
    *this = ::std::move(from);
  }

  inline GraphNamedObjectTypeUpdateRequest& operator=(const GraphNamedObjectTypeUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphNamedObjectTypeUpdateRequest& operator=(GraphNamedObjectTypeUpdateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphNamedObjectTypeUpdateRequest& default_instance();

  enum NamedTypeUpdateCase {
    kEntityUpdate = 1,
    kRelationshipUpdate = 2,
    NAMED_TYPE_UPDATE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphNamedObjectTypeUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const GraphNamedObjectTypeUpdateRequest*>(
               &_GraphNamedObjectTypeUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GraphNamedObjectTypeUpdateRequest& a, GraphNamedObjectTypeUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphNamedObjectTypeUpdateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphNamedObjectTypeUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphNamedObjectTypeUpdateRequest* New() const final {
    return CreateMaybeMessage<GraphNamedObjectTypeUpdateRequest>(nullptr);
  }

  GraphNamedObjectTypeUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphNamedObjectTypeUpdateRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphNamedObjectTypeUpdateRequest& from);
  void MergeFrom(const GraphNamedObjectTypeUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphNamedObjectTypeUpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest";
  }
  protected:
  explicit GraphNamedObjectTypeUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityUpdateFieldNumber = 1,
    kRelationshipUpdateFieldNumber = 2,
  };
  // .esriPBuffer.graph.GraphEntityTypeUpdate entity_update = 1;
  bool has_entity_update() const;
  private:
  bool _internal_has_entity_update() const;
  public:
  void clear_entity_update();
  const ::esriPBuffer::graph::GraphEntityTypeUpdate& entity_update() const;
  ::esriPBuffer::graph::GraphEntityTypeUpdate* release_entity_update();
  ::esriPBuffer::graph::GraphEntityTypeUpdate* mutable_entity_update();
  void set_allocated_entity_update(::esriPBuffer::graph::GraphEntityTypeUpdate* entity_update);
  private:
  const ::esriPBuffer::graph::GraphEntityTypeUpdate& _internal_entity_update() const;
  ::esriPBuffer::graph::GraphEntityTypeUpdate* _internal_mutable_entity_update();
  public:
  void unsafe_arena_set_allocated_entity_update(
      ::esriPBuffer::graph::GraphEntityTypeUpdate* entity_update);
  ::esriPBuffer::graph::GraphEntityTypeUpdate* unsafe_arena_release_entity_update();

  // .esriPBuffer.graph.GraphRelationshipTypeUpdate relationship_update = 2;
  bool has_relationship_update() const;
  private:
  bool _internal_has_relationship_update() const;
  public:
  void clear_relationship_update();
  const ::esriPBuffer::graph::GraphRelationshipTypeUpdate& relationship_update() const;
  ::esriPBuffer::graph::GraphRelationshipTypeUpdate* release_relationship_update();
  ::esriPBuffer::graph::GraphRelationshipTypeUpdate* mutable_relationship_update();
  void set_allocated_relationship_update(::esriPBuffer::graph::GraphRelationshipTypeUpdate* relationship_update);
  private:
  const ::esriPBuffer::graph::GraphRelationshipTypeUpdate& _internal_relationship_update() const;
  ::esriPBuffer::graph::GraphRelationshipTypeUpdate* _internal_mutable_relationship_update();
  public:
  void unsafe_arena_set_allocated_relationship_update(
      ::esriPBuffer::graph::GraphRelationshipTypeUpdate* relationship_update);
  ::esriPBuffer::graph::GraphRelationshipTypeUpdate* unsafe_arena_release_relationship_update();

  void clear_named_type_update();
  NamedTypeUpdateCase named_type_update_case() const;
  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest)
 private:
  class _Internal;
  void set_has_entity_update();
  void set_has_relationship_update();

  inline bool has_named_type_update() const;
  inline void clear_has_named_type_update();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union NamedTypeUpdateUnion {
    NamedTypeUpdateUnion() {}
    ::esriPBuffer::graph::GraphEntityTypeUpdate* entity_update_;
    ::esriPBuffer::graph::GraphRelationshipTypeUpdate* relationship_update_;
  } named_type_update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS NamedObjectTypeMask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.NamedObjectTypeMask) */ {
 public:
  inline NamedObjectTypeMask() : NamedObjectTypeMask(nullptr) {}
  virtual ~NamedObjectTypeMask();

  NamedObjectTypeMask(const NamedObjectTypeMask& from);
  NamedObjectTypeMask(NamedObjectTypeMask&& from) noexcept
    : NamedObjectTypeMask() {
    *this = ::std::move(from);
  }

  inline NamedObjectTypeMask& operator=(const NamedObjectTypeMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedObjectTypeMask& operator=(NamedObjectTypeMask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const NamedObjectTypeMask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedObjectTypeMask* internal_default_instance() {
    return reinterpret_cast<const NamedObjectTypeMask*>(
               &_NamedObjectTypeMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NamedObjectTypeMask& a, NamedObjectTypeMask& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedObjectTypeMask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedObjectTypeMask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamedObjectTypeMask* New() const final {
    return CreateMaybeMessage<NamedObjectTypeMask>(nullptr);
  }

  NamedObjectTypeMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamedObjectTypeMask>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NamedObjectTypeMask& from);
  void MergeFrom(const NamedObjectTypeMask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NamedObjectTypeMask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.NamedObjectTypeMask";
  }
  protected:
  explicit NamedObjectTypeMask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateNameFieldNumber = 1,
    kUpdateAliasFieldNumber = 2,
    kUpdateRoleFieldNumber = 4,
  };
  // bool update_name = 1;
  void clear_update_name();
  bool update_name() const;
  void set_update_name(bool value);
  private:
  bool _internal_update_name() const;
  void _internal_set_update_name(bool value);
  public:

  // bool update_alias = 2;
  void clear_update_alias();
  bool update_alias() const;
  void set_update_alias(bool value);
  private:
  bool _internal_update_alias() const;
  void _internal_set_update_alias(bool value);
  public:

  // bool update_role = 4;
  void clear_update_role();
  bool update_role() const;
  void set_update_role(bool value);
  private:
  bool _internal_update_role() const;
  void _internal_set_update_role(bool value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.NamedObjectTypeMask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool update_name_;
  bool update_alias_;
  bool update_role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS GraphEntityTypeUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphEntityTypeUpdate) */ {
 public:
  inline GraphEntityTypeUpdate() : GraphEntityTypeUpdate(nullptr) {}
  virtual ~GraphEntityTypeUpdate();

  GraphEntityTypeUpdate(const GraphEntityTypeUpdate& from);
  GraphEntityTypeUpdate(GraphEntityTypeUpdate&& from) noexcept
    : GraphEntityTypeUpdate() {
    *this = ::std::move(from);
  }

  inline GraphEntityTypeUpdate& operator=(const GraphEntityTypeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphEntityTypeUpdate& operator=(GraphEntityTypeUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphEntityTypeUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphEntityTypeUpdate* internal_default_instance() {
    return reinterpret_cast<const GraphEntityTypeUpdate*>(
               &_GraphEntityTypeUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GraphEntityTypeUpdate& a, GraphEntityTypeUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphEntityTypeUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphEntityTypeUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphEntityTypeUpdate* New() const final {
    return CreateMaybeMessage<GraphEntityTypeUpdate>(nullptr);
  }

  GraphEntityTypeUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphEntityTypeUpdate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphEntityTypeUpdate& from);
  void MergeFrom(const GraphEntityTypeUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphEntityTypeUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphEntityTypeUpdate";
  }
  protected:
  explicit GraphEntityTypeUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaskFieldNumber = 1,
    kEntityTypeFieldNumber = 2,
  };
  // .esriPBuffer.graph.NamedObjectTypeMask mask = 1;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  const ::esriPBuffer::graph::NamedObjectTypeMask& mask() const;
  ::esriPBuffer::graph::NamedObjectTypeMask* release_mask();
  ::esriPBuffer::graph::NamedObjectTypeMask* mutable_mask();
  void set_allocated_mask(::esriPBuffer::graph::NamedObjectTypeMask* mask);
  private:
  const ::esriPBuffer::graph::NamedObjectTypeMask& _internal_mask() const;
  ::esriPBuffer::graph::NamedObjectTypeMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      ::esriPBuffer::graph::NamedObjectTypeMask* mask);
  ::esriPBuffer::graph::NamedObjectTypeMask* unsafe_arena_release_mask();

  // .esriPBuffer.graph.EntityType entity_type = 2;
  bool has_entity_type() const;
  private:
  bool _internal_has_entity_type() const;
  public:
  void clear_entity_type();
  const ::esriPBuffer::graph::EntityType& entity_type() const;
  ::esriPBuffer::graph::EntityType* release_entity_type();
  ::esriPBuffer::graph::EntityType* mutable_entity_type();
  void set_allocated_entity_type(::esriPBuffer::graph::EntityType* entity_type);
  private:
  const ::esriPBuffer::graph::EntityType& _internal_entity_type() const;
  ::esriPBuffer::graph::EntityType* _internal_mutable_entity_type();
  public:
  void unsafe_arena_set_allocated_entity_type(
      ::esriPBuffer::graph::EntityType* entity_type);
  ::esriPBuffer::graph::EntityType* unsafe_arena_release_entity_type();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphEntityTypeUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::esriPBuffer::graph::NamedObjectTypeMask* mask_;
  ::esriPBuffer::graph::EntityType* entity_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS RelationshipTypeMask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.RelationshipTypeMask) */ {
 public:
  inline RelationshipTypeMask() : RelationshipTypeMask(nullptr) {}
  virtual ~RelationshipTypeMask();

  RelationshipTypeMask(const RelationshipTypeMask& from);
  RelationshipTypeMask(RelationshipTypeMask&& from) noexcept
    : RelationshipTypeMask() {
    *this = ::std::move(from);
  }

  inline RelationshipTypeMask& operator=(const RelationshipTypeMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelationshipTypeMask& operator=(RelationshipTypeMask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RelationshipTypeMask& default_instance();

  enum OriginEntityTypeCase {
    kAddOriginEntityTypes = 2,
    kDeleteOriginEntityTypes = 3,
    ORIGIN_ENTITY_TYPE_NOT_SET = 0,
  };

  enum DestEntityTypeCase {
    kAddDestEntityTypes = 4,
    kDeleteDestEntityTypes = 5,
    DEST_ENTITY_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelationshipTypeMask* internal_default_instance() {
    return reinterpret_cast<const RelationshipTypeMask*>(
               &_RelationshipTypeMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RelationshipTypeMask& a, RelationshipTypeMask& b) {
    a.Swap(&b);
  }
  inline void Swap(RelationshipTypeMask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelationshipTypeMask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelationshipTypeMask* New() const final {
    return CreateMaybeMessage<RelationshipTypeMask>(nullptr);
  }

  RelationshipTypeMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelationshipTypeMask>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RelationshipTypeMask& from);
  void MergeFrom(const RelationshipTypeMask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RelationshipTypeMask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.RelationshipTypeMask";
  }
  protected:
  explicit RelationshipTypeMask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamedObjectTypeMaskFieldNumber = 1,
    kAddOriginEntityTypesFieldNumber = 2,
    kDeleteOriginEntityTypesFieldNumber = 3,
    kAddDestEntityTypesFieldNumber = 4,
    kDeleteDestEntityTypesFieldNumber = 5,
  };
  // .esriPBuffer.graph.NamedObjectTypeMask named_object_type_mask = 1;
  bool has_named_object_type_mask() const;
  private:
  bool _internal_has_named_object_type_mask() const;
  public:
  void clear_named_object_type_mask();
  const ::esriPBuffer::graph::NamedObjectTypeMask& named_object_type_mask() const;
  ::esriPBuffer::graph::NamedObjectTypeMask* release_named_object_type_mask();
  ::esriPBuffer::graph::NamedObjectTypeMask* mutable_named_object_type_mask();
  void set_allocated_named_object_type_mask(::esriPBuffer::graph::NamedObjectTypeMask* named_object_type_mask);
  private:
  const ::esriPBuffer::graph::NamedObjectTypeMask& _internal_named_object_type_mask() const;
  ::esriPBuffer::graph::NamedObjectTypeMask* _internal_mutable_named_object_type_mask();
  public:
  void unsafe_arena_set_allocated_named_object_type_mask(
      ::esriPBuffer::graph::NamedObjectTypeMask* named_object_type_mask);
  ::esriPBuffer::graph::NamedObjectTypeMask* unsafe_arena_release_named_object_type_mask();

  // bool add_origin_entity_types = 2;
  private:
  bool _internal_has_add_origin_entity_types() const;
  public:
  void clear_add_origin_entity_types();
  bool add_origin_entity_types() const;
  void set_add_origin_entity_types(bool value);
  private:
  bool _internal_add_origin_entity_types() const;
  void _internal_set_add_origin_entity_types(bool value);
  public:

  // bool delete_origin_entity_types = 3;
  private:
  bool _internal_has_delete_origin_entity_types() const;
  public:
  void clear_delete_origin_entity_types();
  bool delete_origin_entity_types() const;
  void set_delete_origin_entity_types(bool value);
  private:
  bool _internal_delete_origin_entity_types() const;
  void _internal_set_delete_origin_entity_types(bool value);
  public:

  // bool add_dest_entity_types = 4;
  private:
  bool _internal_has_add_dest_entity_types() const;
  public:
  void clear_add_dest_entity_types();
  bool add_dest_entity_types() const;
  void set_add_dest_entity_types(bool value);
  private:
  bool _internal_add_dest_entity_types() const;
  void _internal_set_add_dest_entity_types(bool value);
  public:

  // bool delete_dest_entity_types = 5;
  private:
  bool _internal_has_delete_dest_entity_types() const;
  public:
  void clear_delete_dest_entity_types();
  bool delete_dest_entity_types() const;
  void set_delete_dest_entity_types(bool value);
  private:
  bool _internal_delete_dest_entity_types() const;
  void _internal_set_delete_dest_entity_types(bool value);
  public:

  void clear_origin_entity_type();
  OriginEntityTypeCase origin_entity_type_case() const;
  void clear_dest_entity_type();
  DestEntityTypeCase dest_entity_type_case() const;
  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.RelationshipTypeMask)
 private:
  class _Internal;
  void set_has_add_origin_entity_types();
  void set_has_delete_origin_entity_types();
  void set_has_add_dest_entity_types();
  void set_has_delete_dest_entity_types();

  inline bool has_origin_entity_type() const;
  inline void clear_has_origin_entity_type();

  inline bool has_dest_entity_type() const;
  inline void clear_has_dest_entity_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::esriPBuffer::graph::NamedObjectTypeMask* named_object_type_mask_;
  union OriginEntityTypeUnion {
    OriginEntityTypeUnion() {}
    bool add_origin_entity_types_;
    bool delete_origin_entity_types_;
  } origin_entity_type_;
  union DestEntityTypeUnion {
    DestEntityTypeUnion() {}
    bool add_dest_entity_types_;
    bool delete_dest_entity_types_;
  } dest_entity_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS GraphRelationshipTypeUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.graph.GraphRelationshipTypeUpdate) */ {
 public:
  inline GraphRelationshipTypeUpdate() : GraphRelationshipTypeUpdate(nullptr) {}
  virtual ~GraphRelationshipTypeUpdate();

  GraphRelationshipTypeUpdate(const GraphRelationshipTypeUpdate& from);
  GraphRelationshipTypeUpdate(GraphRelationshipTypeUpdate&& from) noexcept
    : GraphRelationshipTypeUpdate() {
    *this = ::std::move(from);
  }

  inline GraphRelationshipTypeUpdate& operator=(const GraphRelationshipTypeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphRelationshipTypeUpdate& operator=(GraphRelationshipTypeUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GraphRelationshipTypeUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphRelationshipTypeUpdate* internal_default_instance() {
    return reinterpret_cast<const GraphRelationshipTypeUpdate*>(
               &_GraphRelationshipTypeUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GraphRelationshipTypeUpdate& a, GraphRelationshipTypeUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphRelationshipTypeUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphRelationshipTypeUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphRelationshipTypeUpdate* New() const final {
    return CreateMaybeMessage<GraphRelationshipTypeUpdate>(nullptr);
  }

  GraphRelationshipTypeUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphRelationshipTypeUpdate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GraphRelationshipTypeUpdate& from);
  void MergeFrom(const GraphRelationshipTypeUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphRelationshipTypeUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.graph.GraphRelationshipTypeUpdate";
  }
  protected:
  explicit GraphRelationshipTypeUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaskFieldNumber = 1,
    kRelationshipTypeFieldNumber = 2,
  };
  // .esriPBuffer.graph.RelationshipTypeMask mask = 1;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  const ::esriPBuffer::graph::RelationshipTypeMask& mask() const;
  ::esriPBuffer::graph::RelationshipTypeMask* release_mask();
  ::esriPBuffer::graph::RelationshipTypeMask* mutable_mask();
  void set_allocated_mask(::esriPBuffer::graph::RelationshipTypeMask* mask);
  private:
  const ::esriPBuffer::graph::RelationshipTypeMask& _internal_mask() const;
  ::esriPBuffer::graph::RelationshipTypeMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      ::esriPBuffer::graph::RelationshipTypeMask* mask);
  ::esriPBuffer::graph::RelationshipTypeMask* unsafe_arena_release_mask();

  // .esriPBuffer.graph.RelationshipType relationship_type = 2;
  bool has_relationship_type() const;
  private:
  bool _internal_has_relationship_type() const;
  public:
  void clear_relationship_type();
  const ::esriPBuffer::graph::RelationshipType& relationship_type() const;
  ::esriPBuffer::graph::RelationshipType* release_relationship_type();
  ::esriPBuffer::graph::RelationshipType* mutable_relationship_type();
  void set_allocated_relationship_type(::esriPBuffer::graph::RelationshipType* relationship_type);
  private:
  const ::esriPBuffer::graph::RelationshipType& _internal_relationship_type() const;
  ::esriPBuffer::graph::RelationshipType* _internal_mutable_relationship_type();
  public:
  void unsafe_arena_set_allocated_relationship_type(
      ::esriPBuffer::graph::RelationshipType* relationship_type);
  ::esriPBuffer::graph::RelationshipType* unsafe_arena_release_relationship_type();

  // @@protoc_insertion_point(class_scope:esriPBuffer.graph.GraphRelationshipTypeUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::esriPBuffer::graph::RelationshipTypeMask* mask_;
  ::esriPBuffer::graph::RelationshipType* relationship_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GraphNamedObjectTypeUpdateRequest

// .esriPBuffer.graph.GraphEntityTypeUpdate entity_update = 1;
inline bool GraphNamedObjectTypeUpdateRequest::_internal_has_entity_update() const {
  return named_type_update_case() == kEntityUpdate;
}
inline bool GraphNamedObjectTypeUpdateRequest::has_entity_update() const {
  return _internal_has_entity_update();
}
inline void GraphNamedObjectTypeUpdateRequest::set_has_entity_update() {
  _oneof_case_[0] = kEntityUpdate;
}
inline void GraphNamedObjectTypeUpdateRequest::clear_entity_update() {
  if (_internal_has_entity_update()) {
    if (GetArena() == nullptr) {
      delete named_type_update_.entity_update_;
    }
    clear_has_named_type_update();
  }
}
inline ::esriPBuffer::graph::GraphEntityTypeUpdate* GraphNamedObjectTypeUpdateRequest::release_entity_update() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest.entity_update)
  if (_internal_has_entity_update()) {
    clear_has_named_type_update();
      ::esriPBuffer::graph::GraphEntityTypeUpdate* temp = named_type_update_.entity_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    named_type_update_.entity_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::GraphEntityTypeUpdate& GraphNamedObjectTypeUpdateRequest::_internal_entity_update() const {
  return _internal_has_entity_update()
      ? *named_type_update_.entity_update_
      : *reinterpret_cast< ::esriPBuffer::graph::GraphEntityTypeUpdate*>(&::esriPBuffer::graph::_GraphEntityTypeUpdate_default_instance_);
}
inline const ::esriPBuffer::graph::GraphEntityTypeUpdate& GraphNamedObjectTypeUpdateRequest::entity_update() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest.entity_update)
  return _internal_entity_update();
}
inline ::esriPBuffer::graph::GraphEntityTypeUpdate* GraphNamedObjectTypeUpdateRequest::unsafe_arena_release_entity_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest.entity_update)
  if (_internal_has_entity_update()) {
    clear_has_named_type_update();
    ::esriPBuffer::graph::GraphEntityTypeUpdate* temp = named_type_update_.entity_update_;
    named_type_update_.entity_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GraphNamedObjectTypeUpdateRequest::unsafe_arena_set_allocated_entity_update(::esriPBuffer::graph::GraphEntityTypeUpdate* entity_update) {
  clear_named_type_update();
  if (entity_update) {
    set_has_entity_update();
    named_type_update_.entity_update_ = entity_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest.entity_update)
}
inline ::esriPBuffer::graph::GraphEntityTypeUpdate* GraphNamedObjectTypeUpdateRequest::_internal_mutable_entity_update() {
  if (!_internal_has_entity_update()) {
    clear_named_type_update();
    set_has_entity_update();
    named_type_update_.entity_update_ = CreateMaybeMessage< ::esriPBuffer::graph::GraphEntityTypeUpdate >(GetArena());
  }
  return named_type_update_.entity_update_;
}
inline ::esriPBuffer::graph::GraphEntityTypeUpdate* GraphNamedObjectTypeUpdateRequest::mutable_entity_update() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest.entity_update)
  return _internal_mutable_entity_update();
}

// .esriPBuffer.graph.GraphRelationshipTypeUpdate relationship_update = 2;
inline bool GraphNamedObjectTypeUpdateRequest::_internal_has_relationship_update() const {
  return named_type_update_case() == kRelationshipUpdate;
}
inline bool GraphNamedObjectTypeUpdateRequest::has_relationship_update() const {
  return _internal_has_relationship_update();
}
inline void GraphNamedObjectTypeUpdateRequest::set_has_relationship_update() {
  _oneof_case_[0] = kRelationshipUpdate;
}
inline void GraphNamedObjectTypeUpdateRequest::clear_relationship_update() {
  if (_internal_has_relationship_update()) {
    if (GetArena() == nullptr) {
      delete named_type_update_.relationship_update_;
    }
    clear_has_named_type_update();
  }
}
inline ::esriPBuffer::graph::GraphRelationshipTypeUpdate* GraphNamedObjectTypeUpdateRequest::release_relationship_update() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest.relationship_update)
  if (_internal_has_relationship_update()) {
    clear_has_named_type_update();
      ::esriPBuffer::graph::GraphRelationshipTypeUpdate* temp = named_type_update_.relationship_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    named_type_update_.relationship_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::graph::GraphRelationshipTypeUpdate& GraphNamedObjectTypeUpdateRequest::_internal_relationship_update() const {
  return _internal_has_relationship_update()
      ? *named_type_update_.relationship_update_
      : *reinterpret_cast< ::esriPBuffer::graph::GraphRelationshipTypeUpdate*>(&::esriPBuffer::graph::_GraphRelationshipTypeUpdate_default_instance_);
}
inline const ::esriPBuffer::graph::GraphRelationshipTypeUpdate& GraphNamedObjectTypeUpdateRequest::relationship_update() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest.relationship_update)
  return _internal_relationship_update();
}
inline ::esriPBuffer::graph::GraphRelationshipTypeUpdate* GraphNamedObjectTypeUpdateRequest::unsafe_arena_release_relationship_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest.relationship_update)
  if (_internal_has_relationship_update()) {
    clear_has_named_type_update();
    ::esriPBuffer::graph::GraphRelationshipTypeUpdate* temp = named_type_update_.relationship_update_;
    named_type_update_.relationship_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GraphNamedObjectTypeUpdateRequest::unsafe_arena_set_allocated_relationship_update(::esriPBuffer::graph::GraphRelationshipTypeUpdate* relationship_update) {
  clear_named_type_update();
  if (relationship_update) {
    set_has_relationship_update();
    named_type_update_.relationship_update_ = relationship_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest.relationship_update)
}
inline ::esriPBuffer::graph::GraphRelationshipTypeUpdate* GraphNamedObjectTypeUpdateRequest::_internal_mutable_relationship_update() {
  if (!_internal_has_relationship_update()) {
    clear_named_type_update();
    set_has_relationship_update();
    named_type_update_.relationship_update_ = CreateMaybeMessage< ::esriPBuffer::graph::GraphRelationshipTypeUpdate >(GetArena());
  }
  return named_type_update_.relationship_update_;
}
inline ::esriPBuffer::graph::GraphRelationshipTypeUpdate* GraphNamedObjectTypeUpdateRequest::mutable_relationship_update() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphNamedObjectTypeUpdateRequest.relationship_update)
  return _internal_mutable_relationship_update();
}

inline bool GraphNamedObjectTypeUpdateRequest::has_named_type_update() const {
  return named_type_update_case() != NAMED_TYPE_UPDATE_NOT_SET;
}
inline void GraphNamedObjectTypeUpdateRequest::clear_has_named_type_update() {
  _oneof_case_[0] = NAMED_TYPE_UPDATE_NOT_SET;
}
inline GraphNamedObjectTypeUpdateRequest::NamedTypeUpdateCase GraphNamedObjectTypeUpdateRequest::named_type_update_case() const {
  return GraphNamedObjectTypeUpdateRequest::NamedTypeUpdateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NamedObjectTypeMask

// bool update_name = 1;
inline void NamedObjectTypeMask::clear_update_name() {
  update_name_ = false;
}
inline bool NamedObjectTypeMask::_internal_update_name() const {
  return update_name_;
}
inline bool NamedObjectTypeMask::update_name() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.NamedObjectTypeMask.update_name)
  return _internal_update_name();
}
inline void NamedObjectTypeMask::_internal_set_update_name(bool value) {
  
  update_name_ = value;
}
inline void NamedObjectTypeMask::set_update_name(bool value) {
  _internal_set_update_name(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.NamedObjectTypeMask.update_name)
}

// bool update_alias = 2;
inline void NamedObjectTypeMask::clear_update_alias() {
  update_alias_ = false;
}
inline bool NamedObjectTypeMask::_internal_update_alias() const {
  return update_alias_;
}
inline bool NamedObjectTypeMask::update_alias() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.NamedObjectTypeMask.update_alias)
  return _internal_update_alias();
}
inline void NamedObjectTypeMask::_internal_set_update_alias(bool value) {
  
  update_alias_ = value;
}
inline void NamedObjectTypeMask::set_update_alias(bool value) {
  _internal_set_update_alias(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.NamedObjectTypeMask.update_alias)
}

// bool update_role = 4;
inline void NamedObjectTypeMask::clear_update_role() {
  update_role_ = false;
}
inline bool NamedObjectTypeMask::_internal_update_role() const {
  return update_role_;
}
inline bool NamedObjectTypeMask::update_role() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.NamedObjectTypeMask.update_role)
  return _internal_update_role();
}
inline void NamedObjectTypeMask::_internal_set_update_role(bool value) {
  
  update_role_ = value;
}
inline void NamedObjectTypeMask::set_update_role(bool value) {
  _internal_set_update_role(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.NamedObjectTypeMask.update_role)
}

// -------------------------------------------------------------------

// GraphEntityTypeUpdate

// .esriPBuffer.graph.NamedObjectTypeMask mask = 1;
inline bool GraphEntityTypeUpdate::_internal_has_mask() const {
  return this != internal_default_instance() && mask_ != nullptr;
}
inline bool GraphEntityTypeUpdate::has_mask() const {
  return _internal_has_mask();
}
inline void GraphEntityTypeUpdate::clear_mask() {
  if (GetArena() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
inline const ::esriPBuffer::graph::NamedObjectTypeMask& GraphEntityTypeUpdate::_internal_mask() const {
  const ::esriPBuffer::graph::NamedObjectTypeMask* p = mask_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::NamedObjectTypeMask*>(
      &::esriPBuffer::graph::_NamedObjectTypeMask_default_instance_);
}
inline const ::esriPBuffer::graph::NamedObjectTypeMask& GraphEntityTypeUpdate::mask() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphEntityTypeUpdate.mask)
  return _internal_mask();
}
inline void GraphEntityTypeUpdate::unsafe_arena_set_allocated_mask(
    ::esriPBuffer::graph::NamedObjectTypeMask* mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  mask_ = mask;
  if (mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphEntityTypeUpdate.mask)
}
inline ::esriPBuffer::graph::NamedObjectTypeMask* GraphEntityTypeUpdate::release_mask() {
  
  ::esriPBuffer::graph::NamedObjectTypeMask* temp = mask_;
  mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::NamedObjectTypeMask* GraphEntityTypeUpdate::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphEntityTypeUpdate.mask)
  
  ::esriPBuffer::graph::NamedObjectTypeMask* temp = mask_;
  mask_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::NamedObjectTypeMask* GraphEntityTypeUpdate::_internal_mutable_mask() {
  
  if (mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::NamedObjectTypeMask>(GetArena());
    mask_ = p;
  }
  return mask_;
}
inline ::esriPBuffer::graph::NamedObjectTypeMask* GraphEntityTypeUpdate::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphEntityTypeUpdate.mask)
  return _internal_mutable_mask();
}
inline void GraphEntityTypeUpdate::set_allocated_mask(::esriPBuffer::graph::NamedObjectTypeMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mask_;
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mask);
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    
  } else {
    
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphEntityTypeUpdate.mask)
}

// .esriPBuffer.graph.EntityType entity_type = 2;
inline bool GraphEntityTypeUpdate::_internal_has_entity_type() const {
  return this != internal_default_instance() && entity_type_ != nullptr;
}
inline bool GraphEntityTypeUpdate::has_entity_type() const {
  return _internal_has_entity_type();
}
inline const ::esriPBuffer::graph::EntityType& GraphEntityTypeUpdate::_internal_entity_type() const {
  const ::esriPBuffer::graph::EntityType* p = entity_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::EntityType*>(
      &::esriPBuffer::graph::_EntityType_default_instance_);
}
inline const ::esriPBuffer::graph::EntityType& GraphEntityTypeUpdate::entity_type() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphEntityTypeUpdate.entity_type)
  return _internal_entity_type();
}
inline void GraphEntityTypeUpdate::unsafe_arena_set_allocated_entity_type(
    ::esriPBuffer::graph::EntityType* entity_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_type_);
  }
  entity_type_ = entity_type;
  if (entity_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphEntityTypeUpdate.entity_type)
}
inline ::esriPBuffer::graph::EntityType* GraphEntityTypeUpdate::release_entity_type() {
  
  ::esriPBuffer::graph::EntityType* temp = entity_type_;
  entity_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::EntityType* GraphEntityTypeUpdate::unsafe_arena_release_entity_type() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphEntityTypeUpdate.entity_type)
  
  ::esriPBuffer::graph::EntityType* temp = entity_type_;
  entity_type_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::EntityType* GraphEntityTypeUpdate::_internal_mutable_entity_type() {
  
  if (entity_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::EntityType>(GetArena());
    entity_type_ = p;
  }
  return entity_type_;
}
inline ::esriPBuffer::graph::EntityType* GraphEntityTypeUpdate::mutable_entity_type() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphEntityTypeUpdate.entity_type)
  return _internal_mutable_entity_type();
}
inline void GraphEntityTypeUpdate::set_allocated_entity_type(::esriPBuffer::graph::EntityType* entity_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_type_);
  }
  if (entity_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_type)->GetArena();
    if (message_arena != submessage_arena) {
      entity_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_type, submessage_arena);
    }
    
  } else {
    
  }
  entity_type_ = entity_type;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphEntityTypeUpdate.entity_type)
}

// -------------------------------------------------------------------

// RelationshipTypeMask

// .esriPBuffer.graph.NamedObjectTypeMask named_object_type_mask = 1;
inline bool RelationshipTypeMask::_internal_has_named_object_type_mask() const {
  return this != internal_default_instance() && named_object_type_mask_ != nullptr;
}
inline bool RelationshipTypeMask::has_named_object_type_mask() const {
  return _internal_has_named_object_type_mask();
}
inline void RelationshipTypeMask::clear_named_object_type_mask() {
  if (GetArena() == nullptr && named_object_type_mask_ != nullptr) {
    delete named_object_type_mask_;
  }
  named_object_type_mask_ = nullptr;
}
inline const ::esriPBuffer::graph::NamedObjectTypeMask& RelationshipTypeMask::_internal_named_object_type_mask() const {
  const ::esriPBuffer::graph::NamedObjectTypeMask* p = named_object_type_mask_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::NamedObjectTypeMask*>(
      &::esriPBuffer::graph::_NamedObjectTypeMask_default_instance_);
}
inline const ::esriPBuffer::graph::NamedObjectTypeMask& RelationshipTypeMask::named_object_type_mask() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.RelationshipTypeMask.named_object_type_mask)
  return _internal_named_object_type_mask();
}
inline void RelationshipTypeMask::unsafe_arena_set_allocated_named_object_type_mask(
    ::esriPBuffer::graph::NamedObjectTypeMask* named_object_type_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(named_object_type_mask_);
  }
  named_object_type_mask_ = named_object_type_mask;
  if (named_object_type_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.RelationshipTypeMask.named_object_type_mask)
}
inline ::esriPBuffer::graph::NamedObjectTypeMask* RelationshipTypeMask::release_named_object_type_mask() {
  
  ::esriPBuffer::graph::NamedObjectTypeMask* temp = named_object_type_mask_;
  named_object_type_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::NamedObjectTypeMask* RelationshipTypeMask::unsafe_arena_release_named_object_type_mask() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.RelationshipTypeMask.named_object_type_mask)
  
  ::esriPBuffer::graph::NamedObjectTypeMask* temp = named_object_type_mask_;
  named_object_type_mask_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::NamedObjectTypeMask* RelationshipTypeMask::_internal_mutable_named_object_type_mask() {
  
  if (named_object_type_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::NamedObjectTypeMask>(GetArena());
    named_object_type_mask_ = p;
  }
  return named_object_type_mask_;
}
inline ::esriPBuffer::graph::NamedObjectTypeMask* RelationshipTypeMask::mutable_named_object_type_mask() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.RelationshipTypeMask.named_object_type_mask)
  return _internal_mutable_named_object_type_mask();
}
inline void RelationshipTypeMask::set_allocated_named_object_type_mask(::esriPBuffer::graph::NamedObjectTypeMask* named_object_type_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete named_object_type_mask_;
  }
  if (named_object_type_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(named_object_type_mask);
    if (message_arena != submessage_arena) {
      named_object_type_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, named_object_type_mask, submessage_arena);
    }
    
  } else {
    
  }
  named_object_type_mask_ = named_object_type_mask;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.RelationshipTypeMask.named_object_type_mask)
}

// bool add_origin_entity_types = 2;
inline bool RelationshipTypeMask::_internal_has_add_origin_entity_types() const {
  return origin_entity_type_case() == kAddOriginEntityTypes;
}
inline void RelationshipTypeMask::set_has_add_origin_entity_types() {
  _oneof_case_[0] = kAddOriginEntityTypes;
}
inline void RelationshipTypeMask::clear_add_origin_entity_types() {
  if (_internal_has_add_origin_entity_types()) {
    origin_entity_type_.add_origin_entity_types_ = false;
    clear_has_origin_entity_type();
  }
}
inline bool RelationshipTypeMask::_internal_add_origin_entity_types() const {
  if (_internal_has_add_origin_entity_types()) {
    return origin_entity_type_.add_origin_entity_types_;
  }
  return false;
}
inline void RelationshipTypeMask::_internal_set_add_origin_entity_types(bool value) {
  if (!_internal_has_add_origin_entity_types()) {
    clear_origin_entity_type();
    set_has_add_origin_entity_types();
  }
  origin_entity_type_.add_origin_entity_types_ = value;
}
inline bool RelationshipTypeMask::add_origin_entity_types() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.RelationshipTypeMask.add_origin_entity_types)
  return _internal_add_origin_entity_types();
}
inline void RelationshipTypeMask::set_add_origin_entity_types(bool value) {
  _internal_set_add_origin_entity_types(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.RelationshipTypeMask.add_origin_entity_types)
}

// bool delete_origin_entity_types = 3;
inline bool RelationshipTypeMask::_internal_has_delete_origin_entity_types() const {
  return origin_entity_type_case() == kDeleteOriginEntityTypes;
}
inline void RelationshipTypeMask::set_has_delete_origin_entity_types() {
  _oneof_case_[0] = kDeleteOriginEntityTypes;
}
inline void RelationshipTypeMask::clear_delete_origin_entity_types() {
  if (_internal_has_delete_origin_entity_types()) {
    origin_entity_type_.delete_origin_entity_types_ = false;
    clear_has_origin_entity_type();
  }
}
inline bool RelationshipTypeMask::_internal_delete_origin_entity_types() const {
  if (_internal_has_delete_origin_entity_types()) {
    return origin_entity_type_.delete_origin_entity_types_;
  }
  return false;
}
inline void RelationshipTypeMask::_internal_set_delete_origin_entity_types(bool value) {
  if (!_internal_has_delete_origin_entity_types()) {
    clear_origin_entity_type();
    set_has_delete_origin_entity_types();
  }
  origin_entity_type_.delete_origin_entity_types_ = value;
}
inline bool RelationshipTypeMask::delete_origin_entity_types() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.RelationshipTypeMask.delete_origin_entity_types)
  return _internal_delete_origin_entity_types();
}
inline void RelationshipTypeMask::set_delete_origin_entity_types(bool value) {
  _internal_set_delete_origin_entity_types(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.RelationshipTypeMask.delete_origin_entity_types)
}

// bool add_dest_entity_types = 4;
inline bool RelationshipTypeMask::_internal_has_add_dest_entity_types() const {
  return dest_entity_type_case() == kAddDestEntityTypes;
}
inline void RelationshipTypeMask::set_has_add_dest_entity_types() {
  _oneof_case_[1] = kAddDestEntityTypes;
}
inline void RelationshipTypeMask::clear_add_dest_entity_types() {
  if (_internal_has_add_dest_entity_types()) {
    dest_entity_type_.add_dest_entity_types_ = false;
    clear_has_dest_entity_type();
  }
}
inline bool RelationshipTypeMask::_internal_add_dest_entity_types() const {
  if (_internal_has_add_dest_entity_types()) {
    return dest_entity_type_.add_dest_entity_types_;
  }
  return false;
}
inline void RelationshipTypeMask::_internal_set_add_dest_entity_types(bool value) {
  if (!_internal_has_add_dest_entity_types()) {
    clear_dest_entity_type();
    set_has_add_dest_entity_types();
  }
  dest_entity_type_.add_dest_entity_types_ = value;
}
inline bool RelationshipTypeMask::add_dest_entity_types() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.RelationshipTypeMask.add_dest_entity_types)
  return _internal_add_dest_entity_types();
}
inline void RelationshipTypeMask::set_add_dest_entity_types(bool value) {
  _internal_set_add_dest_entity_types(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.RelationshipTypeMask.add_dest_entity_types)
}

// bool delete_dest_entity_types = 5;
inline bool RelationshipTypeMask::_internal_has_delete_dest_entity_types() const {
  return dest_entity_type_case() == kDeleteDestEntityTypes;
}
inline void RelationshipTypeMask::set_has_delete_dest_entity_types() {
  _oneof_case_[1] = kDeleteDestEntityTypes;
}
inline void RelationshipTypeMask::clear_delete_dest_entity_types() {
  if (_internal_has_delete_dest_entity_types()) {
    dest_entity_type_.delete_dest_entity_types_ = false;
    clear_has_dest_entity_type();
  }
}
inline bool RelationshipTypeMask::_internal_delete_dest_entity_types() const {
  if (_internal_has_delete_dest_entity_types()) {
    return dest_entity_type_.delete_dest_entity_types_;
  }
  return false;
}
inline void RelationshipTypeMask::_internal_set_delete_dest_entity_types(bool value) {
  if (!_internal_has_delete_dest_entity_types()) {
    clear_dest_entity_type();
    set_has_delete_dest_entity_types();
  }
  dest_entity_type_.delete_dest_entity_types_ = value;
}
inline bool RelationshipTypeMask::delete_dest_entity_types() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.RelationshipTypeMask.delete_dest_entity_types)
  return _internal_delete_dest_entity_types();
}
inline void RelationshipTypeMask::set_delete_dest_entity_types(bool value) {
  _internal_set_delete_dest_entity_types(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.graph.RelationshipTypeMask.delete_dest_entity_types)
}

inline bool RelationshipTypeMask::has_origin_entity_type() const {
  return origin_entity_type_case() != ORIGIN_ENTITY_TYPE_NOT_SET;
}
inline void RelationshipTypeMask::clear_has_origin_entity_type() {
  _oneof_case_[0] = ORIGIN_ENTITY_TYPE_NOT_SET;
}
inline bool RelationshipTypeMask::has_dest_entity_type() const {
  return dest_entity_type_case() != DEST_ENTITY_TYPE_NOT_SET;
}
inline void RelationshipTypeMask::clear_has_dest_entity_type() {
  _oneof_case_[1] = DEST_ENTITY_TYPE_NOT_SET;
}
inline RelationshipTypeMask::OriginEntityTypeCase RelationshipTypeMask::origin_entity_type_case() const {
  return RelationshipTypeMask::OriginEntityTypeCase(_oneof_case_[0]);
}
inline RelationshipTypeMask::DestEntityTypeCase RelationshipTypeMask::dest_entity_type_case() const {
  return RelationshipTypeMask::DestEntityTypeCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// GraphRelationshipTypeUpdate

// .esriPBuffer.graph.RelationshipTypeMask mask = 1;
inline bool GraphRelationshipTypeUpdate::_internal_has_mask() const {
  return this != internal_default_instance() && mask_ != nullptr;
}
inline bool GraphRelationshipTypeUpdate::has_mask() const {
  return _internal_has_mask();
}
inline void GraphRelationshipTypeUpdate::clear_mask() {
  if (GetArena() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
inline const ::esriPBuffer::graph::RelationshipTypeMask& GraphRelationshipTypeUpdate::_internal_mask() const {
  const ::esriPBuffer::graph::RelationshipTypeMask* p = mask_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::RelationshipTypeMask*>(
      &::esriPBuffer::graph::_RelationshipTypeMask_default_instance_);
}
inline const ::esriPBuffer::graph::RelationshipTypeMask& GraphRelationshipTypeUpdate::mask() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphRelationshipTypeUpdate.mask)
  return _internal_mask();
}
inline void GraphRelationshipTypeUpdate::unsafe_arena_set_allocated_mask(
    ::esriPBuffer::graph::RelationshipTypeMask* mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  mask_ = mask;
  if (mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphRelationshipTypeUpdate.mask)
}
inline ::esriPBuffer::graph::RelationshipTypeMask* GraphRelationshipTypeUpdate::release_mask() {
  
  ::esriPBuffer::graph::RelationshipTypeMask* temp = mask_;
  mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::RelationshipTypeMask* GraphRelationshipTypeUpdate::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphRelationshipTypeUpdate.mask)
  
  ::esriPBuffer::graph::RelationshipTypeMask* temp = mask_;
  mask_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::RelationshipTypeMask* GraphRelationshipTypeUpdate::_internal_mutable_mask() {
  
  if (mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::RelationshipTypeMask>(GetArena());
    mask_ = p;
  }
  return mask_;
}
inline ::esriPBuffer::graph::RelationshipTypeMask* GraphRelationshipTypeUpdate::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphRelationshipTypeUpdate.mask)
  return _internal_mutable_mask();
}
inline void GraphRelationshipTypeUpdate::set_allocated_mask(::esriPBuffer::graph::RelationshipTypeMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mask_;
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mask);
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    
  } else {
    
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphRelationshipTypeUpdate.mask)
}

// .esriPBuffer.graph.RelationshipType relationship_type = 2;
inline bool GraphRelationshipTypeUpdate::_internal_has_relationship_type() const {
  return this != internal_default_instance() && relationship_type_ != nullptr;
}
inline bool GraphRelationshipTypeUpdate::has_relationship_type() const {
  return _internal_has_relationship_type();
}
inline const ::esriPBuffer::graph::RelationshipType& GraphRelationshipTypeUpdate::_internal_relationship_type() const {
  const ::esriPBuffer::graph::RelationshipType* p = relationship_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::graph::RelationshipType*>(
      &::esriPBuffer::graph::_RelationshipType_default_instance_);
}
inline const ::esriPBuffer::graph::RelationshipType& GraphRelationshipTypeUpdate::relationship_type() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.graph.GraphRelationshipTypeUpdate.relationship_type)
  return _internal_relationship_type();
}
inline void GraphRelationshipTypeUpdate::unsafe_arena_set_allocated_relationship_type(
    ::esriPBuffer::graph::RelationshipType* relationship_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relationship_type_);
  }
  relationship_type_ = relationship_type;
  if (relationship_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.graph.GraphRelationshipTypeUpdate.relationship_type)
}
inline ::esriPBuffer::graph::RelationshipType* GraphRelationshipTypeUpdate::release_relationship_type() {
  
  ::esriPBuffer::graph::RelationshipType* temp = relationship_type_;
  relationship_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::graph::RelationshipType* GraphRelationshipTypeUpdate::unsafe_arena_release_relationship_type() {
  // @@protoc_insertion_point(field_release:esriPBuffer.graph.GraphRelationshipTypeUpdate.relationship_type)
  
  ::esriPBuffer::graph::RelationshipType* temp = relationship_type_;
  relationship_type_ = nullptr;
  return temp;
}
inline ::esriPBuffer::graph::RelationshipType* GraphRelationshipTypeUpdate::_internal_mutable_relationship_type() {
  
  if (relationship_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::graph::RelationshipType>(GetArena());
    relationship_type_ = p;
  }
  return relationship_type_;
}
inline ::esriPBuffer::graph::RelationshipType* GraphRelationshipTypeUpdate::mutable_relationship_type() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.graph.GraphRelationshipTypeUpdate.relationship_type)
  return _internal_mutable_relationship_type();
}
inline void GraphRelationshipTypeUpdate::set_allocated_relationship_type(::esriPBuffer::graph::RelationshipType* relationship_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(relationship_type_);
  }
  if (relationship_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relationship_type)->GetArena();
    if (message_arena != submessage_arena) {
      relationship_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relationship_type, submessage_arena);
    }
    
  } else {
    
  }
  relationship_type_ = relationship_type;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.graph.GraphRelationshipTypeUpdate.relationship_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace esriPBuffer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fgraph_2fUpdateNamedTypeRequest_2eproto
