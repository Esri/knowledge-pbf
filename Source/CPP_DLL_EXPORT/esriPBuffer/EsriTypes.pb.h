// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/EsriTypes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fEsriTypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fEsriTypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "esriPBuffer/EsriExtendedTypes/EsriExtendedTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fEsriTypes_2eproto EXT_CLASS
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct EXT_CLASS TableStruct_esriPBuffer_2fEsriTypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace esriPBuffer {
class EsriTypes;
class EsriTypesDefaultTypeInternal;
EXT_CLASS extern EsriTypesDefaultTypeInternal _EsriTypes_default_instance_;
class EsriTypes_CodedValue;
class EsriTypes_CodedValueDefaultTypeInternal;
EXT_CLASS extern EsriTypes_CodedValueDefaultTypeInternal _EsriTypes_CodedValue_default_instance_;
class EsriTypes_CodedValueDomain;
class EsriTypes_CodedValueDomainDefaultTypeInternal;
EXT_CLASS extern EsriTypes_CodedValueDomainDefaultTypeInternal _EsriTypes_CodedValueDomain_default_instance_;
class EsriTypes_DatumTransformation;
class EsriTypes_DatumTransformationDefaultTypeInternal;
EXT_CLASS extern EsriTypes_DatumTransformationDefaultTypeInternal _EsriTypes_DatumTransformation_default_instance_;
class EsriTypes_Domain;
class EsriTypes_DomainDefaultTypeInternal;
EXT_CLASS extern EsriTypes_DomainDefaultTypeInternal _EsriTypes_Domain_default_instance_;
class EsriTypes_Envelope;
class EsriTypes_EnvelopeDefaultTypeInternal;
EXT_CLASS extern EsriTypes_EnvelopeDefaultTypeInternal _EsriTypes_Envelope_default_instance_;
class EsriTypes_FieldIndex;
class EsriTypes_FieldIndexDefaultTypeInternal;
EXT_CLASS extern EsriTypes_FieldIndexDefaultTypeInternal _EsriTypes_FieldIndex_default_instance_;
class EsriTypes_QuantizationParameters;
class EsriTypes_QuantizationParametersDefaultTypeInternal;
EXT_CLASS extern EsriTypes_QuantizationParametersDefaultTypeInternal _EsriTypes_QuantizationParameters_default_instance_;
class EsriTypes_RangeDomain;
class EsriTypes_RangeDomainDefaultTypeInternal;
EXT_CLASS extern EsriTypes_RangeDomainDefaultTypeInternal _EsriTypes_RangeDomain_default_instance_;
class EsriTypes_Scale;
class EsriTypes_ScaleDefaultTypeInternal;
EXT_CLASS extern EsriTypes_ScaleDefaultTypeInternal _EsriTypes_Scale_default_instance_;
class EsriTypes_SpatialReference;
class EsriTypes_SpatialReferenceDefaultTypeInternal;
EXT_CLASS extern EsriTypes_SpatialReferenceDefaultTypeInternal _EsriTypes_SpatialReference_default_instance_;
class EsriTypes_Transform;
class EsriTypes_TransformDefaultTypeInternal;
EXT_CLASS extern EsriTypes_TransformDefaultTypeInternal _EsriTypes_Transform_default_instance_;
class EsriTypes_Translate;
class EsriTypes_TranslateDefaultTypeInternal;
EXT_CLASS extern EsriTypes_TranslateDefaultTypeInternal _EsriTypes_Translate_default_instance_;
class EsriTypes_Value;
class EsriTypes_ValueDefaultTypeInternal;
EXT_CLASS extern EsriTypes_ValueDefaultTypeInternal _EsriTypes_Value_default_instance_;
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> EXT_CLASS ::esriPBuffer::EsriTypes* Arena::CreateMaybeMessage<::esriPBuffer::EsriTypes>(Arena*);
template<> EXT_CLASS ::esriPBuffer::EsriTypes_CodedValue* Arena::CreateMaybeMessage<::esriPBuffer::EsriTypes_CodedValue>(Arena*);
template<> EXT_CLASS ::esriPBuffer::EsriTypes_CodedValueDomain* Arena::CreateMaybeMessage<::esriPBuffer::EsriTypes_CodedValueDomain>(Arena*);
template<> EXT_CLASS ::esriPBuffer::EsriTypes_DatumTransformation* Arena::CreateMaybeMessage<::esriPBuffer::EsriTypes_DatumTransformation>(Arena*);
template<> EXT_CLASS ::esriPBuffer::EsriTypes_Domain* Arena::CreateMaybeMessage<::esriPBuffer::EsriTypes_Domain>(Arena*);
template<> EXT_CLASS ::esriPBuffer::EsriTypes_Envelope* Arena::CreateMaybeMessage<::esriPBuffer::EsriTypes_Envelope>(Arena*);
template<> EXT_CLASS ::esriPBuffer::EsriTypes_FieldIndex* Arena::CreateMaybeMessage<::esriPBuffer::EsriTypes_FieldIndex>(Arena*);
template<> EXT_CLASS ::esriPBuffer::EsriTypes_QuantizationParameters* Arena::CreateMaybeMessage<::esriPBuffer::EsriTypes_QuantizationParameters>(Arena*);
template<> EXT_CLASS ::esriPBuffer::EsriTypes_RangeDomain* Arena::CreateMaybeMessage<::esriPBuffer::EsriTypes_RangeDomain>(Arena*);
template<> EXT_CLASS ::esriPBuffer::EsriTypes_Scale* Arena::CreateMaybeMessage<::esriPBuffer::EsriTypes_Scale>(Arena*);
template<> EXT_CLASS ::esriPBuffer::EsriTypes_SpatialReference* Arena::CreateMaybeMessage<::esriPBuffer::EsriTypes_SpatialReference>(Arena*);
template<> EXT_CLASS ::esriPBuffer::EsriTypes_Transform* Arena::CreateMaybeMessage<::esriPBuffer::EsriTypes_Transform>(Arena*);
template<> EXT_CLASS ::esriPBuffer::EsriTypes_Translate* Arena::CreateMaybeMessage<::esriPBuffer::EsriTypes_Translate>(Arena*);
template<> EXT_CLASS ::esriPBuffer::EsriTypes_Value* Arena::CreateMaybeMessage<::esriPBuffer::EsriTypes_Value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace esriPBuffer {

enum EsriTypes_GeometryType : int {
  EsriTypes_GeometryType_esriGeometryTypePoint = 0,
  EsriTypes_GeometryType_esriGeometryTypeMultipoint = 1,
  EsriTypes_GeometryType_esriGeometryTypePolyline = 2,
  EsriTypes_GeometryType_esriGeometryTypePolygon = 3,
  EsriTypes_GeometryType_esriGeometryTypeMultipatch = 4,
  EsriTypes_GeometryType_esriGeometryTypeEnvelope = 5,
  EsriTypes_GeometryType_EsriTypes_GeometryType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EsriTypes_GeometryType_EsriTypes_GeometryType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
EXT_CLASS bool EsriTypes_GeometryType_IsValid(int value);
constexpr EsriTypes_GeometryType EsriTypes_GeometryType_GeometryType_MIN = EsriTypes_GeometryType_esriGeometryTypePoint;
constexpr EsriTypes_GeometryType EsriTypes_GeometryType_GeometryType_MAX = EsriTypes_GeometryType_esriGeometryTypeEnvelope;
constexpr int EsriTypes_GeometryType_GeometryType_ARRAYSIZE = EsriTypes_GeometryType_GeometryType_MAX + 1;

const std::string& EsriTypes_GeometryType_Name(EsriTypes_GeometryType value);
template<typename T>
inline const std::string& EsriTypes_GeometryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EsriTypes_GeometryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EsriTypes_GeometryType_Name.");
  return EsriTypes_GeometryType_Name(static_cast<EsriTypes_GeometryType>(enum_t_value));
}
bool EsriTypes_GeometryType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EsriTypes_GeometryType* value);
enum EsriTypes_esriSpatialRel : int {
  EsriTypes_esriSpatialRel_esriSpatialRelIntersects = 0,
  EsriTypes_esriSpatialRel_esriSpatialRelContains = 1,
  EsriTypes_esriSpatialRel_esriSpatialRelCrosses = 2,
  EsriTypes_esriSpatialRel_esriSpatialRelEnvelopeIntersects = 3,
  EsriTypes_esriSpatialRel_esriSpatialRelIndexIntersects = 4,
  EsriTypes_esriSpatialRel_esriSpatialRelOverlaps = 5,
  EsriTypes_esriSpatialRel_esriSpatialRelTouches = 6,
  EsriTypes_esriSpatialRel_esriSpatialRelWithin = 7,
  EsriTypes_esriSpatialRel_EsriTypes_esriSpatialRel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EsriTypes_esriSpatialRel_EsriTypes_esriSpatialRel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
EXT_CLASS bool EsriTypes_esriSpatialRel_IsValid(int value);
constexpr EsriTypes_esriSpatialRel EsriTypes_esriSpatialRel_esriSpatialRel_MIN = EsriTypes_esriSpatialRel_esriSpatialRelIntersects;
constexpr EsriTypes_esriSpatialRel EsriTypes_esriSpatialRel_esriSpatialRel_MAX = EsriTypes_esriSpatialRel_esriSpatialRelWithin;
constexpr int EsriTypes_esriSpatialRel_esriSpatialRel_ARRAYSIZE = EsriTypes_esriSpatialRel_esriSpatialRel_MAX + 1;

const std::string& EsriTypes_esriSpatialRel_Name(EsriTypes_esriSpatialRel value);
template<typename T>
inline const std::string& EsriTypes_esriSpatialRel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EsriTypes_esriSpatialRel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EsriTypes_esriSpatialRel_Name.");
  return EsriTypes_esriSpatialRel_Name(static_cast<EsriTypes_esriSpatialRel>(enum_t_value));
}
bool EsriTypes_esriSpatialRel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EsriTypes_esriSpatialRel* value);
enum EsriTypes_esriFeatureEncoding : int {
  EsriTypes_esriFeatureEncoding_esriFeatureEncoding_UNSPECIFIED = 0,
  EsriTypes_esriFeatureEncoding_esriDefault = 1,
  EsriTypes_esriFeatureEncoding_esriCompressedShapeBuffer = 2,
  EsriTypes_esriFeatureEncoding_EsriTypes_esriFeatureEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EsriTypes_esriFeatureEncoding_EsriTypes_esriFeatureEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
EXT_CLASS bool EsriTypes_esriFeatureEncoding_IsValid(int value);
constexpr EsriTypes_esriFeatureEncoding EsriTypes_esriFeatureEncoding_esriFeatureEncoding_MIN = EsriTypes_esriFeatureEncoding_esriFeatureEncoding_UNSPECIFIED;
constexpr EsriTypes_esriFeatureEncoding EsriTypes_esriFeatureEncoding_esriFeatureEncoding_MAX = EsriTypes_esriFeatureEncoding_esriCompressedShapeBuffer;
constexpr int EsriTypes_esriFeatureEncoding_esriFeatureEncoding_ARRAYSIZE = EsriTypes_esriFeatureEncoding_esriFeatureEncoding_MAX + 1;

const std::string& EsriTypes_esriFeatureEncoding_Name(EsriTypes_esriFeatureEncoding value);
template<typename T>
inline const std::string& EsriTypes_esriFeatureEncoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EsriTypes_esriFeatureEncoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EsriTypes_esriFeatureEncoding_Name.");
  return EsriTypes_esriFeatureEncoding_Name(static_cast<EsriTypes_esriFeatureEncoding>(enum_t_value));
}
bool EsriTypes_esriFeatureEncoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EsriTypes_esriFeatureEncoding* value);
enum EsriTypes_MergePolicyType : int {
  EsriTypes_MergePolicyType_esriMergePolicyType_UNSPECIFIED = 0,
  EsriTypes_MergePolicyType_esriMergePolicyTypeSumValues = 1,
  EsriTypes_MergePolicyType_esriMergePolicyTypeAreaWeighted = 2,
  EsriTypes_MergePolicyType_esriMergePolicyTypeDefaultValue = 3,
  EsriTypes_MergePolicyType_EsriTypes_MergePolicyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EsriTypes_MergePolicyType_EsriTypes_MergePolicyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
EXT_CLASS bool EsriTypes_MergePolicyType_IsValid(int value);
constexpr EsriTypes_MergePolicyType EsriTypes_MergePolicyType_MergePolicyType_MIN = EsriTypes_MergePolicyType_esriMergePolicyType_UNSPECIFIED;
constexpr EsriTypes_MergePolicyType EsriTypes_MergePolicyType_MergePolicyType_MAX = EsriTypes_MergePolicyType_esriMergePolicyTypeDefaultValue;
constexpr int EsriTypes_MergePolicyType_MergePolicyType_ARRAYSIZE = EsriTypes_MergePolicyType_MergePolicyType_MAX + 1;

const std::string& EsriTypes_MergePolicyType_Name(EsriTypes_MergePolicyType value);
template<typename T>
inline const std::string& EsriTypes_MergePolicyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EsriTypes_MergePolicyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EsriTypes_MergePolicyType_Name.");
  return EsriTypes_MergePolicyType_Name(static_cast<EsriTypes_MergePolicyType>(enum_t_value));
}
bool EsriTypes_MergePolicyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EsriTypes_MergePolicyType* value);
enum EsriTypes_SplitPolicyType : int {
  EsriTypes_SplitPolicyType_esriSplitPolicyType_UNSPECIFIED = 0,
  EsriTypes_SplitPolicyType_esriSplitPolicyTypeGeometryRatio = 1,
  EsriTypes_SplitPolicyType_esriSplitPolicyTypeDuplicate = 2,
  EsriTypes_SplitPolicyType_esriSplitPolicyTypeDefaultValue = 3,
  EsriTypes_SplitPolicyType_EsriTypes_SplitPolicyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EsriTypes_SplitPolicyType_EsriTypes_SplitPolicyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
EXT_CLASS bool EsriTypes_SplitPolicyType_IsValid(int value);
constexpr EsriTypes_SplitPolicyType EsriTypes_SplitPolicyType_SplitPolicyType_MIN = EsriTypes_SplitPolicyType_esriSplitPolicyType_UNSPECIFIED;
constexpr EsriTypes_SplitPolicyType EsriTypes_SplitPolicyType_SplitPolicyType_MAX = EsriTypes_SplitPolicyType_esriSplitPolicyTypeDefaultValue;
constexpr int EsriTypes_SplitPolicyType_SplitPolicyType_ARRAYSIZE = EsriTypes_SplitPolicyType_SplitPolicyType_MAX + 1;

const std::string& EsriTypes_SplitPolicyType_Name(EsriTypes_SplitPolicyType value);
template<typename T>
inline const std::string& EsriTypes_SplitPolicyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EsriTypes_SplitPolicyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EsriTypes_SplitPolicyType_Name.");
  return EsriTypes_SplitPolicyType_Name(static_cast<EsriTypes_SplitPolicyType>(enum_t_value));
}
bool EsriTypes_SplitPolicyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EsriTypes_SplitPolicyType* value);
enum EsriTypes_QuantizeOriginPostion : int {
  EsriTypes_QuantizeOriginPostion_upperLeft = 0,
  EsriTypes_QuantizeOriginPostion_lowerLeft = 1,
  EsriTypes_QuantizeOriginPostion_EsriTypes_QuantizeOriginPostion_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EsriTypes_QuantizeOriginPostion_EsriTypes_QuantizeOriginPostion_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
EXT_CLASS bool EsriTypes_QuantizeOriginPostion_IsValid(int value);
constexpr EsriTypes_QuantizeOriginPostion EsriTypes_QuantizeOriginPostion_QuantizeOriginPostion_MIN = EsriTypes_QuantizeOriginPostion_upperLeft;
constexpr EsriTypes_QuantizeOriginPostion EsriTypes_QuantizeOriginPostion_QuantizeOriginPostion_MAX = EsriTypes_QuantizeOriginPostion_lowerLeft;
constexpr int EsriTypes_QuantizeOriginPostion_QuantizeOriginPostion_ARRAYSIZE = EsriTypes_QuantizeOriginPostion_QuantizeOriginPostion_MAX + 1;

const std::string& EsriTypes_QuantizeOriginPostion_Name(EsriTypes_QuantizeOriginPostion value);
template<typename T>
inline const std::string& EsriTypes_QuantizeOriginPostion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EsriTypes_QuantizeOriginPostion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EsriTypes_QuantizeOriginPostion_Name.");
  return EsriTypes_QuantizeOriginPostion_Name(static_cast<EsriTypes_QuantizeOriginPostion>(enum_t_value));
}
bool EsriTypes_QuantizeOriginPostion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EsriTypes_QuantizeOriginPostion* value);
enum EsriTypes_QuantizeMode : int {
  EsriTypes_QuantizeMode_view = 0,
  EsriTypes_QuantizeMode_edit = 1,
  EsriTypes_QuantizeMode_EsriTypes_QuantizeMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EsriTypes_QuantizeMode_EsriTypes_QuantizeMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
EXT_CLASS bool EsriTypes_QuantizeMode_IsValid(int value);
constexpr EsriTypes_QuantizeMode EsriTypes_QuantizeMode_QuantizeMode_MIN = EsriTypes_QuantizeMode_view;
constexpr EsriTypes_QuantizeMode EsriTypes_QuantizeMode_QuantizeMode_MAX = EsriTypes_QuantizeMode_edit;
constexpr int EsriTypes_QuantizeMode_QuantizeMode_ARRAYSIZE = EsriTypes_QuantizeMode_QuantizeMode_MAX + 1;

const std::string& EsriTypes_QuantizeMode_Name(EsriTypes_QuantizeMode value);
template<typename T>
inline const std::string& EsriTypes_QuantizeMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EsriTypes_QuantizeMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EsriTypes_QuantizeMode_Name.");
  return EsriTypes_QuantizeMode_Name(static_cast<EsriTypes_QuantizeMode>(enum_t_value));
}
bool EsriTypes_QuantizeMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EsriTypes_QuantizeMode* value);
// ===================================================================

class EXT_CLASS EsriTypes_Scale PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.EsriTypes.Scale) */ {
 public:
  inline EsriTypes_Scale() : EsriTypes_Scale(nullptr) {}
  virtual ~EsriTypes_Scale();

  EsriTypes_Scale(const EsriTypes_Scale& from);
  EsriTypes_Scale(EsriTypes_Scale&& from) noexcept
    : EsriTypes_Scale() {
    *this = ::std::move(from);
  }

  inline EsriTypes_Scale& operator=(const EsriTypes_Scale& from) {
    CopyFrom(from);
    return *this;
  }
  inline EsriTypes_Scale& operator=(EsriTypes_Scale&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EsriTypes_Scale& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EsriTypes_Scale* internal_default_instance() {
    return reinterpret_cast<const EsriTypes_Scale*>(
               &_EsriTypes_Scale_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EsriTypes_Scale& a, EsriTypes_Scale& b) {
    a.Swap(&b);
  }
  inline void Swap(EsriTypes_Scale* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EsriTypes_Scale* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EsriTypes_Scale* New() const final {
    return CreateMaybeMessage<EsriTypes_Scale>(nullptr);
  }

  EsriTypes_Scale* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EsriTypes_Scale>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EsriTypes_Scale& from);
  void MergeFrom(const EsriTypes_Scale& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EsriTypes_Scale* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.EsriTypes.Scale";
  }
  protected:
  explicit EsriTypes_Scale(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXScaleFieldNumber = 1,
    kYScaleFieldNumber = 2,
    kMScaleFieldNumber = 3,
    kZScaleFieldNumber = 4,
  };
  // double xScale = 1;
  void clear_xscale();
  double xscale() const;
  void set_xscale(double value);
  private:
  double _internal_xscale() const;
  void _internal_set_xscale(double value);
  public:

  // double yScale = 2;
  void clear_yscale();
  double yscale() const;
  void set_yscale(double value);
  private:
  double _internal_yscale() const;
  void _internal_set_yscale(double value);
  public:

  // double mScale = 3;
  void clear_mscale();
  double mscale() const;
  void set_mscale(double value);
  private:
  double _internal_mscale() const;
  void _internal_set_mscale(double value);
  public:

  // double zScale = 4;
  void clear_zscale();
  double zscale() const;
  void set_zscale(double value);
  private:
  double _internal_zscale() const;
  void _internal_set_zscale(double value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.EsriTypes.Scale)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double xscale_;
  double yscale_;
  double mscale_;
  double zscale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fEsriTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS EsriTypes_Translate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.EsriTypes.Translate) */ {
 public:
  inline EsriTypes_Translate() : EsriTypes_Translate(nullptr) {}
  virtual ~EsriTypes_Translate();

  EsriTypes_Translate(const EsriTypes_Translate& from);
  EsriTypes_Translate(EsriTypes_Translate&& from) noexcept
    : EsriTypes_Translate() {
    *this = ::std::move(from);
  }

  inline EsriTypes_Translate& operator=(const EsriTypes_Translate& from) {
    CopyFrom(from);
    return *this;
  }
  inline EsriTypes_Translate& operator=(EsriTypes_Translate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EsriTypes_Translate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EsriTypes_Translate* internal_default_instance() {
    return reinterpret_cast<const EsriTypes_Translate*>(
               &_EsriTypes_Translate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EsriTypes_Translate& a, EsriTypes_Translate& b) {
    a.Swap(&b);
  }
  inline void Swap(EsriTypes_Translate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EsriTypes_Translate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EsriTypes_Translate* New() const final {
    return CreateMaybeMessage<EsriTypes_Translate>(nullptr);
  }

  EsriTypes_Translate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EsriTypes_Translate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EsriTypes_Translate& from);
  void MergeFrom(const EsriTypes_Translate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EsriTypes_Translate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.EsriTypes.Translate";
  }
  protected:
  explicit EsriTypes_Translate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXTranslateFieldNumber = 1,
    kYTranslateFieldNumber = 2,
    kMTranslateFieldNumber = 3,
    kZTranslateFieldNumber = 4,
  };
  // double xTranslate = 1;
  void clear_xtranslate();
  double xtranslate() const;
  void set_xtranslate(double value);
  private:
  double _internal_xtranslate() const;
  void _internal_set_xtranslate(double value);
  public:

  // double yTranslate = 2;
  void clear_ytranslate();
  double ytranslate() const;
  void set_ytranslate(double value);
  private:
  double _internal_ytranslate() const;
  void _internal_set_ytranslate(double value);
  public:

  // double mTranslate = 3;
  void clear_mtranslate();
  double mtranslate() const;
  void set_mtranslate(double value);
  private:
  double _internal_mtranslate() const;
  void _internal_set_mtranslate(double value);
  public:

  // double zTranslate = 4;
  void clear_ztranslate();
  double ztranslate() const;
  void set_ztranslate(double value);
  private:
  double _internal_ztranslate() const;
  void _internal_set_ztranslate(double value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.EsriTypes.Translate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double xtranslate_;
  double ytranslate_;
  double mtranslate_;
  double ztranslate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fEsriTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS EsriTypes_Transform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.EsriTypes.Transform) */ {
 public:
  inline EsriTypes_Transform() : EsriTypes_Transform(nullptr) {}
  virtual ~EsriTypes_Transform();

  EsriTypes_Transform(const EsriTypes_Transform& from);
  EsriTypes_Transform(EsriTypes_Transform&& from) noexcept
    : EsriTypes_Transform() {
    *this = ::std::move(from);
  }

  inline EsriTypes_Transform& operator=(const EsriTypes_Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline EsriTypes_Transform& operator=(EsriTypes_Transform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EsriTypes_Transform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EsriTypes_Transform* internal_default_instance() {
    return reinterpret_cast<const EsriTypes_Transform*>(
               &_EsriTypes_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EsriTypes_Transform& a, EsriTypes_Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(EsriTypes_Transform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EsriTypes_Transform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EsriTypes_Transform* New() const final {
    return CreateMaybeMessage<EsriTypes_Transform>(nullptr);
  }

  EsriTypes_Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EsriTypes_Transform>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EsriTypes_Transform& from);
  void MergeFrom(const EsriTypes_Transform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EsriTypes_Transform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.EsriTypes.Transform";
  }
  protected:
  explicit EsriTypes_Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFieldNumber = 2,
    kTranslateFieldNumber = 3,
    kQuantizeOriginPostionFieldNumber = 1,
  };
  // .esriPBuffer.EsriTypes.Scale scale = 2;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::esriPBuffer::EsriTypes_Scale& scale() const;
  ::esriPBuffer::EsriTypes_Scale* release_scale();
  ::esriPBuffer::EsriTypes_Scale* mutable_scale();
  void set_allocated_scale(::esriPBuffer::EsriTypes_Scale* scale);
  private:
  const ::esriPBuffer::EsriTypes_Scale& _internal_scale() const;
  ::esriPBuffer::EsriTypes_Scale* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::esriPBuffer::EsriTypes_Scale* scale);
  ::esriPBuffer::EsriTypes_Scale* unsafe_arena_release_scale();

  // .esriPBuffer.EsriTypes.Translate translate = 3;
  bool has_translate() const;
  private:
  bool _internal_has_translate() const;
  public:
  void clear_translate();
  const ::esriPBuffer::EsriTypes_Translate& translate() const;
  ::esriPBuffer::EsriTypes_Translate* release_translate();
  ::esriPBuffer::EsriTypes_Translate* mutable_translate();
  void set_allocated_translate(::esriPBuffer::EsriTypes_Translate* translate);
  private:
  const ::esriPBuffer::EsriTypes_Translate& _internal_translate() const;
  ::esriPBuffer::EsriTypes_Translate* _internal_mutable_translate();
  public:
  void unsafe_arena_set_allocated_translate(
      ::esriPBuffer::EsriTypes_Translate* translate);
  ::esriPBuffer::EsriTypes_Translate* unsafe_arena_release_translate();

  // .esriPBuffer.EsriTypes.QuantizeOriginPostion quantizeOriginPostion = 1;
  void clear_quantizeoriginpostion();
  ::esriPBuffer::EsriTypes_QuantizeOriginPostion quantizeoriginpostion() const;
  void set_quantizeoriginpostion(::esriPBuffer::EsriTypes_QuantizeOriginPostion value);
  private:
  ::esriPBuffer::EsriTypes_QuantizeOriginPostion _internal_quantizeoriginpostion() const;
  void _internal_set_quantizeoriginpostion(::esriPBuffer::EsriTypes_QuantizeOriginPostion value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.EsriTypes.Transform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::esriPBuffer::EsriTypes_Scale* scale_;
  ::esriPBuffer::EsriTypes_Translate* translate_;
  int quantizeoriginpostion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fEsriTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS EsriTypes_QuantizationParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.EsriTypes.QuantizationParameters) */ {
 public:
  inline EsriTypes_QuantizationParameters() : EsriTypes_QuantizationParameters(nullptr) {}
  virtual ~EsriTypes_QuantizationParameters();

  EsriTypes_QuantizationParameters(const EsriTypes_QuantizationParameters& from);
  EsriTypes_QuantizationParameters(EsriTypes_QuantizationParameters&& from) noexcept
    : EsriTypes_QuantizationParameters() {
    *this = ::std::move(from);
  }

  inline EsriTypes_QuantizationParameters& operator=(const EsriTypes_QuantizationParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline EsriTypes_QuantizationParameters& operator=(EsriTypes_QuantizationParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EsriTypes_QuantizationParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EsriTypes_QuantizationParameters* internal_default_instance() {
    return reinterpret_cast<const EsriTypes_QuantizationParameters*>(
               &_EsriTypes_QuantizationParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EsriTypes_QuantizationParameters& a, EsriTypes_QuantizationParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(EsriTypes_QuantizationParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EsriTypes_QuantizationParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EsriTypes_QuantizationParameters* New() const final {
    return CreateMaybeMessage<EsriTypes_QuantizationParameters>(nullptr);
  }

  EsriTypes_QuantizationParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EsriTypes_QuantizationParameters>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EsriTypes_QuantizationParameters& from);
  void MergeFrom(const EsriTypes_QuantizationParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EsriTypes_QuantizationParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.EsriTypes.QuantizationParameters";
  }
  protected:
  explicit EsriTypes_QuantizationParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtentFieldNumber = 1,
    kModeFieldNumber = 2,
    kQuantizeOriginPostionFieldNumber = 3,
    kToleranceFieldNumber = 4,
  };
  // .esriPBuffer.EsriTypes.Envelope extent = 1;
  bool has_extent() const;
  private:
  bool _internal_has_extent() const;
  public:
  void clear_extent();
  const ::esriPBuffer::EsriTypes_Envelope& extent() const;
  ::esriPBuffer::EsriTypes_Envelope* release_extent();
  ::esriPBuffer::EsriTypes_Envelope* mutable_extent();
  void set_allocated_extent(::esriPBuffer::EsriTypes_Envelope* extent);
  private:
  const ::esriPBuffer::EsriTypes_Envelope& _internal_extent() const;
  ::esriPBuffer::EsriTypes_Envelope* _internal_mutable_extent();
  public:
  void unsafe_arena_set_allocated_extent(
      ::esriPBuffer::EsriTypes_Envelope* extent);
  ::esriPBuffer::EsriTypes_Envelope* unsafe_arena_release_extent();

  // .esriPBuffer.EsriTypes.QuantizeMode mode = 2;
  void clear_mode();
  ::esriPBuffer::EsriTypes_QuantizeMode mode() const;
  void set_mode(::esriPBuffer::EsriTypes_QuantizeMode value);
  private:
  ::esriPBuffer::EsriTypes_QuantizeMode _internal_mode() const;
  void _internal_set_mode(::esriPBuffer::EsriTypes_QuantizeMode value);
  public:

  // .esriPBuffer.EsriTypes.QuantizeOriginPostion quantizeOriginPostion = 3;
  void clear_quantizeoriginpostion();
  ::esriPBuffer::EsriTypes_QuantizeOriginPostion quantizeoriginpostion() const;
  void set_quantizeoriginpostion(::esriPBuffer::EsriTypes_QuantizeOriginPostion value);
  private:
  ::esriPBuffer::EsriTypes_QuantizeOriginPostion _internal_quantizeoriginpostion() const;
  void _internal_set_quantizeoriginpostion(::esriPBuffer::EsriTypes_QuantizeOriginPostion value);
  public:

  // double tolerance = 4;
  void clear_tolerance();
  double tolerance() const;
  void set_tolerance(double value);
  private:
  double _internal_tolerance() const;
  void _internal_set_tolerance(double value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.EsriTypes.QuantizationParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::esriPBuffer::EsriTypes_Envelope* extent_;
  int mode_;
  int quantizeoriginpostion_;
  double tolerance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fEsriTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS EsriTypes_SpatialReference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.EsriTypes.SpatialReference) */ {
 public:
  inline EsriTypes_SpatialReference() : EsriTypes_SpatialReference(nullptr) {}
  virtual ~EsriTypes_SpatialReference();

  EsriTypes_SpatialReference(const EsriTypes_SpatialReference& from);
  EsriTypes_SpatialReference(EsriTypes_SpatialReference&& from) noexcept
    : EsriTypes_SpatialReference() {
    *this = ::std::move(from);
  }

  inline EsriTypes_SpatialReference& operator=(const EsriTypes_SpatialReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline EsriTypes_SpatialReference& operator=(EsriTypes_SpatialReference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EsriTypes_SpatialReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EsriTypes_SpatialReference* internal_default_instance() {
    return reinterpret_cast<const EsriTypes_SpatialReference*>(
               &_EsriTypes_SpatialReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EsriTypes_SpatialReference& a, EsriTypes_SpatialReference& b) {
    a.Swap(&b);
  }
  inline void Swap(EsriTypes_SpatialReference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EsriTypes_SpatialReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EsriTypes_SpatialReference* New() const final {
    return CreateMaybeMessage<EsriTypes_SpatialReference>(nullptr);
  }

  EsriTypes_SpatialReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EsriTypes_SpatialReference>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EsriTypes_SpatialReference& from);
  void MergeFrom(const EsriTypes_SpatialReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EsriTypes_SpatialReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.EsriTypes.SpatialReference";
  }
  protected:
  explicit EsriTypes_SpatialReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWktFieldNumber = 5,
    kWkidFieldNumber = 1,
    kLastestWkidFieldNumber = 2,
    kVcsWkidFieldNumber = 3,
    kLatestVcsWkidFieldNumber = 4,
    kSdesridFieldNumber = 6,
  };
  // string wkt = 5;
  void clear_wkt();
  const std::string& wkt() const;
  void set_wkt(const std::string& value);
  void set_wkt(std::string&& value);
  void set_wkt(const char* value);
  void set_wkt(const char* value, size_t size);
  std::string* mutable_wkt();
  std::string* release_wkt();
  void set_allocated_wkt(std::string* wkt);
  private:
  const std::string& _internal_wkt() const;
  void _internal_set_wkt(const std::string& value);
  std::string* _internal_mutable_wkt();
  public:

  // uint32 wkid = 1;
  void clear_wkid();
  ::PROTOBUF_NAMESPACE_ID::uint32 wkid() const;
  void set_wkid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wkid() const;
  void _internal_set_wkid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lastestWkid = 2;
  void clear_lastestwkid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lastestwkid() const;
  void set_lastestwkid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lastestwkid() const;
  void _internal_set_lastestwkid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 vcsWkid = 3;
  void clear_vcswkid();
  ::PROTOBUF_NAMESPACE_ID::uint32 vcswkid() const;
  void set_vcswkid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vcswkid() const;
  void _internal_set_vcswkid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 latestVcsWkid = 4;
  void clear_latestvcswkid();
  ::PROTOBUF_NAMESPACE_ID::uint32 latestvcswkid() const;
  void set_latestvcswkid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_latestvcswkid() const;
  void _internal_set_latestvcswkid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sdesrid = 6;
  void clear_sdesrid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sdesrid() const;
  void set_sdesrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sdesrid() const;
  void _internal_set_sdesrid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.EsriTypes.SpatialReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wkt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wkid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lastestwkid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vcswkid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 latestvcswkid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sdesrid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fEsriTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS EsriTypes_FieldIndex PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.EsriTypes.FieldIndex) */ {
 public:
  inline EsriTypes_FieldIndex() : EsriTypes_FieldIndex(nullptr) {}
  virtual ~EsriTypes_FieldIndex();

  EsriTypes_FieldIndex(const EsriTypes_FieldIndex& from);
  EsriTypes_FieldIndex(EsriTypes_FieldIndex&& from) noexcept
    : EsriTypes_FieldIndex() {
    *this = ::std::move(from);
  }

  inline EsriTypes_FieldIndex& operator=(const EsriTypes_FieldIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline EsriTypes_FieldIndex& operator=(EsriTypes_FieldIndex&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EsriTypes_FieldIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EsriTypes_FieldIndex* internal_default_instance() {
    return reinterpret_cast<const EsriTypes_FieldIndex*>(
               &_EsriTypes_FieldIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EsriTypes_FieldIndex& a, EsriTypes_FieldIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(EsriTypes_FieldIndex* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EsriTypes_FieldIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EsriTypes_FieldIndex* New() const final {
    return CreateMaybeMessage<EsriTypes_FieldIndex>(nullptr);
  }

  EsriTypes_FieldIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EsriTypes_FieldIndex>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EsriTypes_FieldIndex& from);
  void MergeFrom(const EsriTypes_FieldIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EsriTypes_FieldIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.EsriTypes.FieldIndex";
  }
  protected:
  explicit EsriTypes_FieldIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFieldsFieldNumber = 2,
    kDescriptionFieldNumber = 5,
    kIsAscendingFieldNumber = 3,
    kIsUniqueFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string fields = 2;
  void clear_fields();
  const std::string& fields() const;
  void set_fields(const std::string& value);
  void set_fields(std::string&& value);
  void set_fields(const char* value);
  void set_fields(const char* value, size_t size);
  std::string* mutable_fields();
  std::string* release_fields();
  void set_allocated_fields(std::string* fields);
  private:
  const std::string& _internal_fields() const;
  void _internal_set_fields(const std::string& value);
  std::string* _internal_mutable_fields();
  public:

  // string description = 5;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bool isAscending = 3;
  void clear_isascending();
  bool isascending() const;
  void set_isascending(bool value);
  private:
  bool _internal_isascending() const;
  void _internal_set_isascending(bool value);
  public:

  // bool isUnique = 4;
  void clear_isunique();
  bool isunique() const;
  void set_isunique(bool value);
  private:
  bool _internal_isunique() const;
  void _internal_set_isunique(bool value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.EsriTypes.FieldIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  bool isascending_;
  bool isunique_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fEsriTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS EsriTypes_Value PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.EsriTypes.Value) */ {
 public:
  inline EsriTypes_Value() : EsriTypes_Value(nullptr) {}
  virtual ~EsriTypes_Value();

  EsriTypes_Value(const EsriTypes_Value& from);
  EsriTypes_Value(EsriTypes_Value&& from) noexcept
    : EsriTypes_Value() {
    *this = ::std::move(from);
  }

  inline EsriTypes_Value& operator=(const EsriTypes_Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline EsriTypes_Value& operator=(EsriTypes_Value&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EsriTypes_Value& default_instance();

  enum ValueTypeCase {
    kStringValue = 1,
    kFloatValue = 2,
    kDoubleValue = 3,
    kSintValue = 4,
    kUintValue = 5,
    kInt64Value = 6,
    kUint64Value = 7,
    kSint64Value = 8,
    kBoolValue = 9,
    VALUE_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EsriTypes_Value* internal_default_instance() {
    return reinterpret_cast<const EsriTypes_Value*>(
               &_EsriTypes_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EsriTypes_Value& a, EsriTypes_Value& b) {
    a.Swap(&b);
  }
  inline void Swap(EsriTypes_Value* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EsriTypes_Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EsriTypes_Value* New() const final {
    return CreateMaybeMessage<EsriTypes_Value>(nullptr);
  }

  EsriTypes_Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EsriTypes_Value>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EsriTypes_Value& from);
  void MergeFrom(const EsriTypes_Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EsriTypes_Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.EsriTypes.Value";
  }
  protected:
  explicit EsriTypes_Value(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 1,
    kFloatValueFieldNumber = 2,
    kDoubleValueFieldNumber = 3,
    kSintValueFieldNumber = 4,
    kUintValueFieldNumber = 5,
    kInt64ValueFieldNumber = 6,
    kUint64ValueFieldNumber = 7,
    kSint64ValueFieldNumber = 8,
    kBoolValueFieldNumber = 9,
  };
  // string string_value = 1;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // float float_value = 2;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // double double_value = 3;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // sint32 sint_value = 4;
  private:
  bool _internal_has_sint_value() const;
  public:
  void clear_sint_value();
  ::PROTOBUF_NAMESPACE_ID::int32 sint_value() const;
  void set_sint_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sint_value() const;
  void _internal_set_sint_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 uint_value = 5;
  private:
  bool _internal_has_uint_value() const;
  public:
  void clear_uint_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint_value() const;
  void set_uint_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint_value() const;
  void _internal_set_uint_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 int64_value = 6;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value() const;
  void set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_value() const;
  void _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 uint64_value = 7;
  private:
  bool _internal_has_uint64_value() const;
  public:
  void clear_uint64_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value() const;
  void set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64_value() const;
  void _internal_set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint64 sint64_value = 8;
  private:
  bool _internal_has_sint64_value() const;
  public:
  void clear_sint64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 sint64_value() const;
  void set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64_value() const;
  void _internal_set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool bool_value = 9;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  void clear_value_type();
  ValueTypeCase value_type_case() const;
  // @@protoc_insertion_point(class_scope:esriPBuffer.EsriTypes.Value)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_float_value();
  void set_has_double_value();
  void set_has_sint_value();
  void set_has_uint_value();
  void set_has_int64_value();
  void set_has_uint64_value();
  void set_has_sint64_value();
  void set_has_bool_value();

  inline bool has_value_type() const;
  inline void clear_has_value_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueTypeUnion {
    ValueTypeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    float float_value_;
    double double_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 sint_value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 uint_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int64_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 sint64_value_;
    bool bool_value_;
  } value_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_esriPBuffer_2fEsriTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS EsriTypes_Envelope PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.EsriTypes.Envelope) */ {
 public:
  inline EsriTypes_Envelope() : EsriTypes_Envelope(nullptr) {}
  virtual ~EsriTypes_Envelope();

  EsriTypes_Envelope(const EsriTypes_Envelope& from);
  EsriTypes_Envelope(EsriTypes_Envelope&& from) noexcept
    : EsriTypes_Envelope() {
    *this = ::std::move(from);
  }

  inline EsriTypes_Envelope& operator=(const EsriTypes_Envelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline EsriTypes_Envelope& operator=(EsriTypes_Envelope&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EsriTypes_Envelope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EsriTypes_Envelope* internal_default_instance() {
    return reinterpret_cast<const EsriTypes_Envelope*>(
               &_EsriTypes_Envelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EsriTypes_Envelope& a, EsriTypes_Envelope& b) {
    a.Swap(&b);
  }
  inline void Swap(EsriTypes_Envelope* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EsriTypes_Envelope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EsriTypes_Envelope* New() const final {
    return CreateMaybeMessage<EsriTypes_Envelope>(nullptr);
  }

  EsriTypes_Envelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EsriTypes_Envelope>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EsriTypes_Envelope& from);
  void MergeFrom(const EsriTypes_Envelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EsriTypes_Envelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.EsriTypes.Envelope";
  }
  protected:
  explicit EsriTypes_Envelope(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpatialReferenceFieldNumber = 5,
    kXMinFieldNumber = 1,
    kYMinFieldNumber = 2,
    kXMaxFieldNumber = 3,
    kYMaxFieldNumber = 4,
  };
  // .esriPBuffer.EsriTypes.SpatialReference SpatialReference = 5;
  bool has_spatialreference() const;
  private:
  bool _internal_has_spatialreference() const;
  public:
  void clear_spatialreference();
  const ::esriPBuffer::EsriTypes_SpatialReference& spatialreference() const;
  ::esriPBuffer::EsriTypes_SpatialReference* release_spatialreference();
  ::esriPBuffer::EsriTypes_SpatialReference* mutable_spatialreference();
  void set_allocated_spatialreference(::esriPBuffer::EsriTypes_SpatialReference* spatialreference);
  private:
  const ::esriPBuffer::EsriTypes_SpatialReference& _internal_spatialreference() const;
  ::esriPBuffer::EsriTypes_SpatialReference* _internal_mutable_spatialreference();
  public:
  void unsafe_arena_set_allocated_spatialreference(
      ::esriPBuffer::EsriTypes_SpatialReference* spatialreference);
  ::esriPBuffer::EsriTypes_SpatialReference* unsafe_arena_release_spatialreference();

  // double XMin = 1;
  void clear_xmin();
  double xmin() const;
  void set_xmin(double value);
  private:
  double _internal_xmin() const;
  void _internal_set_xmin(double value);
  public:

  // double YMin = 2;
  void clear_ymin();
  double ymin() const;
  void set_ymin(double value);
  private:
  double _internal_ymin() const;
  void _internal_set_ymin(double value);
  public:

  // double XMax = 3;
  void clear_xmax();
  double xmax() const;
  void set_xmax(double value);
  private:
  double _internal_xmax() const;
  void _internal_set_xmax(double value);
  public:

  // double YMax = 4;
  void clear_ymax();
  double ymax() const;
  void set_ymax(double value);
  private:
  double _internal_ymax() const;
  void _internal_set_ymax(double value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.EsriTypes.Envelope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::esriPBuffer::EsriTypes_SpatialReference* spatialreference_;
  double xmin_;
  double ymin_;
  double xmax_;
  double ymax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fEsriTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS EsriTypes_CodedValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.EsriTypes.CodedValue) */ {
 public:
  inline EsriTypes_CodedValue() : EsriTypes_CodedValue(nullptr) {}
  virtual ~EsriTypes_CodedValue();

  EsriTypes_CodedValue(const EsriTypes_CodedValue& from);
  EsriTypes_CodedValue(EsriTypes_CodedValue&& from) noexcept
    : EsriTypes_CodedValue() {
    *this = ::std::move(from);
  }

  inline EsriTypes_CodedValue& operator=(const EsriTypes_CodedValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline EsriTypes_CodedValue& operator=(EsriTypes_CodedValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EsriTypes_CodedValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EsriTypes_CodedValue* internal_default_instance() {
    return reinterpret_cast<const EsriTypes_CodedValue*>(
               &_EsriTypes_CodedValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EsriTypes_CodedValue& a, EsriTypes_CodedValue& b) {
    a.Swap(&b);
  }
  inline void Swap(EsriTypes_CodedValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EsriTypes_CodedValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EsriTypes_CodedValue* New() const final {
    return CreateMaybeMessage<EsriTypes_CodedValue>(nullptr);
  }

  EsriTypes_CodedValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EsriTypes_CodedValue>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EsriTypes_CodedValue& from);
  void MergeFrom(const EsriTypes_CodedValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EsriTypes_CodedValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.EsriTypes.CodedValue";
  }
  protected:
  explicit EsriTypes_CodedValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .esriPBuffer.EsriTypes.Value code = 2;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const ::esriPBuffer::EsriTypes_Value& code() const;
  ::esriPBuffer::EsriTypes_Value* release_code();
  ::esriPBuffer::EsriTypes_Value* mutable_code();
  void set_allocated_code(::esriPBuffer::EsriTypes_Value* code);
  private:
  const ::esriPBuffer::EsriTypes_Value& _internal_code() const;
  ::esriPBuffer::EsriTypes_Value* _internal_mutable_code();
  public:
  void unsafe_arena_set_allocated_code(
      ::esriPBuffer::EsriTypes_Value* code);
  ::esriPBuffer::EsriTypes_Value* unsafe_arena_release_code();

  // @@protoc_insertion_point(class_scope:esriPBuffer.EsriTypes.CodedValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::esriPBuffer::EsriTypes_Value* code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fEsriTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS EsriTypes_CodedValueDomain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.EsriTypes.CodedValueDomain) */ {
 public:
  inline EsriTypes_CodedValueDomain() : EsriTypes_CodedValueDomain(nullptr) {}
  virtual ~EsriTypes_CodedValueDomain();

  EsriTypes_CodedValueDomain(const EsriTypes_CodedValueDomain& from);
  EsriTypes_CodedValueDomain(EsriTypes_CodedValueDomain&& from) noexcept
    : EsriTypes_CodedValueDomain() {
    *this = ::std::move(from);
  }

  inline EsriTypes_CodedValueDomain& operator=(const EsriTypes_CodedValueDomain& from) {
    CopyFrom(from);
    return *this;
  }
  inline EsriTypes_CodedValueDomain& operator=(EsriTypes_CodedValueDomain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EsriTypes_CodedValueDomain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EsriTypes_CodedValueDomain* internal_default_instance() {
    return reinterpret_cast<const EsriTypes_CodedValueDomain*>(
               &_EsriTypes_CodedValueDomain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EsriTypes_CodedValueDomain& a, EsriTypes_CodedValueDomain& b) {
    a.Swap(&b);
  }
  inline void Swap(EsriTypes_CodedValueDomain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EsriTypes_CodedValueDomain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EsriTypes_CodedValueDomain* New() const final {
    return CreateMaybeMessage<EsriTypes_CodedValueDomain>(nullptr);
  }

  EsriTypes_CodedValueDomain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EsriTypes_CodedValueDomain>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EsriTypes_CodedValueDomain& from);
  void MergeFrom(const EsriTypes_CodedValueDomain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EsriTypes_CodedValueDomain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.EsriTypes.CodedValueDomain";
  }
  protected:
  explicit EsriTypes_CodedValueDomain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodesValuesFieldNumber = 3,
  };
  // repeated .esriPBuffer.EsriTypes.CodedValue codesValues = 3;
  int codesvalues_size() const;
  private:
  int _internal_codesvalues_size() const;
  public:
  void clear_codesvalues();
  ::esriPBuffer::EsriTypes_CodedValue* mutable_codesvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_CodedValue >*
      mutable_codesvalues();
  private:
  const ::esriPBuffer::EsriTypes_CodedValue& _internal_codesvalues(int index) const;
  ::esriPBuffer::EsriTypes_CodedValue* _internal_add_codesvalues();
  public:
  const ::esriPBuffer::EsriTypes_CodedValue& codesvalues(int index) const;
  ::esriPBuffer::EsriTypes_CodedValue* add_codesvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_CodedValue >&
      codesvalues() const;

  // @@protoc_insertion_point(class_scope:esriPBuffer.EsriTypes.CodedValueDomain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_CodedValue > codesvalues_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fEsriTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS EsriTypes_RangeDomain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.EsriTypes.RangeDomain) */ {
 public:
  inline EsriTypes_RangeDomain() : EsriTypes_RangeDomain(nullptr) {}
  virtual ~EsriTypes_RangeDomain();

  EsriTypes_RangeDomain(const EsriTypes_RangeDomain& from);
  EsriTypes_RangeDomain(EsriTypes_RangeDomain&& from) noexcept
    : EsriTypes_RangeDomain() {
    *this = ::std::move(from);
  }

  inline EsriTypes_RangeDomain& operator=(const EsriTypes_RangeDomain& from) {
    CopyFrom(from);
    return *this;
  }
  inline EsriTypes_RangeDomain& operator=(EsriTypes_RangeDomain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EsriTypes_RangeDomain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EsriTypes_RangeDomain* internal_default_instance() {
    return reinterpret_cast<const EsriTypes_RangeDomain*>(
               &_EsriTypes_RangeDomain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EsriTypes_RangeDomain& a, EsriTypes_RangeDomain& b) {
    a.Swap(&b);
  }
  inline void Swap(EsriTypes_RangeDomain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EsriTypes_RangeDomain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EsriTypes_RangeDomain* New() const final {
    return CreateMaybeMessage<EsriTypes_RangeDomain>(nullptr);
  }

  EsriTypes_RangeDomain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EsriTypes_RangeDomain>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EsriTypes_RangeDomain& from);
  void MergeFrom(const EsriTypes_RangeDomain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EsriTypes_RangeDomain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.EsriTypes.RangeDomain";
  }
  protected:
  explicit EsriTypes_RangeDomain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 3,
  };
  // repeated .esriPBuffer.EsriTypes.Value range = 3;
  int range_size() const;
  private:
  int _internal_range_size() const;
  public:
  void clear_range();
  ::esriPBuffer::EsriTypes_Value* mutable_range(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_Value >*
      mutable_range();
  private:
  const ::esriPBuffer::EsriTypes_Value& _internal_range(int index) const;
  ::esriPBuffer::EsriTypes_Value* _internal_add_range();
  public:
  const ::esriPBuffer::EsriTypes_Value& range(int index) const;
  ::esriPBuffer::EsriTypes_Value* add_range();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_Value >&
      range() const;

  // @@protoc_insertion_point(class_scope:esriPBuffer.EsriTypes.RangeDomain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_Value > range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fEsriTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS EsriTypes_Domain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.EsriTypes.Domain) */ {
 public:
  inline EsriTypes_Domain() : EsriTypes_Domain(nullptr) {}
  virtual ~EsriTypes_Domain();

  EsriTypes_Domain(const EsriTypes_Domain& from);
  EsriTypes_Domain(EsriTypes_Domain&& from) noexcept
    : EsriTypes_Domain() {
    *this = ::std::move(from);
  }

  inline EsriTypes_Domain& operator=(const EsriTypes_Domain& from) {
    CopyFrom(from);
    return *this;
  }
  inline EsriTypes_Domain& operator=(EsriTypes_Domain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EsriTypes_Domain& default_instance();

  enum OfCase {
    kCodedValueDomain = 3,
    kRangeDomain = 4,
    OF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EsriTypes_Domain* internal_default_instance() {
    return reinterpret_cast<const EsriTypes_Domain*>(
               &_EsriTypes_Domain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EsriTypes_Domain& a, EsriTypes_Domain& b) {
    a.Swap(&b);
  }
  inline void Swap(EsriTypes_Domain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EsriTypes_Domain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EsriTypes_Domain* New() const final {
    return CreateMaybeMessage<EsriTypes_Domain>(nullptr);
  }

  EsriTypes_Domain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EsriTypes_Domain>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EsriTypes_Domain& from);
  void MergeFrom(const EsriTypes_Domain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EsriTypes_Domain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.EsriTypes.Domain";
  }
  protected:
  explicit EsriTypes_Domain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNameFieldNumber = 2,
    kFieldTypeFieldNumber = 5,
    kMergePolicyTypeFieldNumber = 6,
    kSplitPolicyTypeFieldNumber = 7,
    kCodedValueDomainFieldNumber = 3,
    kRangeDomainFieldNumber = 4,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .esriPBuffer.EsriExtendedTypes.FieldType fieldType = 5;
  void clear_fieldtype();
  ::esriPBuffer::EsriExtendedTypes::FieldType fieldtype() const;
  void set_fieldtype(::esriPBuffer::EsriExtendedTypes::FieldType value);
  private:
  ::esriPBuffer::EsriExtendedTypes::FieldType _internal_fieldtype() const;
  void _internal_set_fieldtype(::esriPBuffer::EsriExtendedTypes::FieldType value);
  public:

  // .esriPBuffer.EsriTypes.MergePolicyType mergePolicyType = 6;
  void clear_mergepolicytype();
  ::esriPBuffer::EsriTypes_MergePolicyType mergepolicytype() const;
  void set_mergepolicytype(::esriPBuffer::EsriTypes_MergePolicyType value);
  private:
  ::esriPBuffer::EsriTypes_MergePolicyType _internal_mergepolicytype() const;
  void _internal_set_mergepolicytype(::esriPBuffer::EsriTypes_MergePolicyType value);
  public:

  // .esriPBuffer.EsriTypes.SplitPolicyType splitPolicyType = 7;
  void clear_splitpolicytype();
  ::esriPBuffer::EsriTypes_SplitPolicyType splitpolicytype() const;
  void set_splitpolicytype(::esriPBuffer::EsriTypes_SplitPolicyType value);
  private:
  ::esriPBuffer::EsriTypes_SplitPolicyType _internal_splitpolicytype() const;
  void _internal_set_splitpolicytype(::esriPBuffer::EsriTypes_SplitPolicyType value);
  public:

  // .esriPBuffer.EsriTypes.CodedValueDomain codedValueDomain = 3;
  bool has_codedvaluedomain() const;
  private:
  bool _internal_has_codedvaluedomain() const;
  public:
  void clear_codedvaluedomain();
  const ::esriPBuffer::EsriTypes_CodedValueDomain& codedvaluedomain() const;
  ::esriPBuffer::EsriTypes_CodedValueDomain* release_codedvaluedomain();
  ::esriPBuffer::EsriTypes_CodedValueDomain* mutable_codedvaluedomain();
  void set_allocated_codedvaluedomain(::esriPBuffer::EsriTypes_CodedValueDomain* codedvaluedomain);
  private:
  const ::esriPBuffer::EsriTypes_CodedValueDomain& _internal_codedvaluedomain() const;
  ::esriPBuffer::EsriTypes_CodedValueDomain* _internal_mutable_codedvaluedomain();
  public:
  void unsafe_arena_set_allocated_codedvaluedomain(
      ::esriPBuffer::EsriTypes_CodedValueDomain* codedvaluedomain);
  ::esriPBuffer::EsriTypes_CodedValueDomain* unsafe_arena_release_codedvaluedomain();

  // .esriPBuffer.EsriTypes.RangeDomain rangeDomain = 4;
  bool has_rangedomain() const;
  private:
  bool _internal_has_rangedomain() const;
  public:
  void clear_rangedomain();
  const ::esriPBuffer::EsriTypes_RangeDomain& rangedomain() const;
  ::esriPBuffer::EsriTypes_RangeDomain* release_rangedomain();
  ::esriPBuffer::EsriTypes_RangeDomain* mutable_rangedomain();
  void set_allocated_rangedomain(::esriPBuffer::EsriTypes_RangeDomain* rangedomain);
  private:
  const ::esriPBuffer::EsriTypes_RangeDomain& _internal_rangedomain() const;
  ::esriPBuffer::EsriTypes_RangeDomain* _internal_mutable_rangedomain();
  public:
  void unsafe_arena_set_allocated_rangedomain(
      ::esriPBuffer::EsriTypes_RangeDomain* rangedomain);
  ::esriPBuffer::EsriTypes_RangeDomain* unsafe_arena_release_rangedomain();

  void clear_of();
  OfCase of_case() const;
  // @@protoc_insertion_point(class_scope:esriPBuffer.EsriTypes.Domain)
 private:
  class _Internal;
  void set_has_codedvaluedomain();
  void set_has_rangedomain();

  inline bool has_of() const;
  inline void clear_has_of();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int fieldtype_;
  int mergepolicytype_;
  int splitpolicytype_;
  union OfUnion {
    OfUnion() {}
    ::esriPBuffer::EsriTypes_CodedValueDomain* codedvaluedomain_;
    ::esriPBuffer::EsriTypes_RangeDomain* rangedomain_;
  } of_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_esriPBuffer_2fEsriTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS EsriTypes_DatumTransformation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.EsriTypes.DatumTransformation) */ {
 public:
  inline EsriTypes_DatumTransformation() : EsriTypes_DatumTransformation(nullptr) {}
  virtual ~EsriTypes_DatumTransformation();

  EsriTypes_DatumTransformation(const EsriTypes_DatumTransformation& from);
  EsriTypes_DatumTransformation(EsriTypes_DatumTransformation&& from) noexcept
    : EsriTypes_DatumTransformation() {
    *this = ::std::move(from);
  }

  inline EsriTypes_DatumTransformation& operator=(const EsriTypes_DatumTransformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline EsriTypes_DatumTransformation& operator=(EsriTypes_DatumTransformation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EsriTypes_DatumTransformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EsriTypes_DatumTransformation* internal_default_instance() {
    return reinterpret_cast<const EsriTypes_DatumTransformation*>(
               &_EsriTypes_DatumTransformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EsriTypes_DatumTransformation& a, EsriTypes_DatumTransformation& b) {
    a.Swap(&b);
  }
  inline void Swap(EsriTypes_DatumTransformation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EsriTypes_DatumTransformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EsriTypes_DatumTransformation* New() const final {
    return CreateMaybeMessage<EsriTypes_DatumTransformation>(nullptr);
  }

  EsriTypes_DatumTransformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EsriTypes_DatumTransformation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EsriTypes_DatumTransformation& from);
  void MergeFrom(const EsriTypes_DatumTransformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EsriTypes_DatumTransformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.EsriTypes.DatumTransformation";
  }
  protected:
  explicit EsriTypes_DatumTransformation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWktFieldNumber = 2,
    kTransformDirectionFieldNumber = 3,
    kTransformJsonFieldNumber = 4,
    kFromSRFieldNumber = 5,
    kToSRFieldNumber = 6,
    kWkidFieldNumber = 1,
  };
  // string wkt = 2;
  void clear_wkt();
  const std::string& wkt() const;
  void set_wkt(const std::string& value);
  void set_wkt(std::string&& value);
  void set_wkt(const char* value);
  void set_wkt(const char* value, size_t size);
  std::string* mutable_wkt();
  std::string* release_wkt();
  void set_allocated_wkt(std::string* wkt);
  private:
  const std::string& _internal_wkt() const;
  void _internal_set_wkt(const std::string& value);
  std::string* _internal_mutable_wkt();
  public:

  // string transformDirection = 3;
  void clear_transformdirection();
  const std::string& transformdirection() const;
  void set_transformdirection(const std::string& value);
  void set_transformdirection(std::string&& value);
  void set_transformdirection(const char* value);
  void set_transformdirection(const char* value, size_t size);
  std::string* mutable_transformdirection();
  std::string* release_transformdirection();
  void set_allocated_transformdirection(std::string* transformdirection);
  private:
  const std::string& _internal_transformdirection() const;
  void _internal_set_transformdirection(const std::string& value);
  std::string* _internal_mutable_transformdirection();
  public:

  // string transformJson = 4;
  void clear_transformjson();
  const std::string& transformjson() const;
  void set_transformjson(const std::string& value);
  void set_transformjson(std::string&& value);
  void set_transformjson(const char* value);
  void set_transformjson(const char* value, size_t size);
  std::string* mutable_transformjson();
  std::string* release_transformjson();
  void set_allocated_transformjson(std::string* transformjson);
  private:
  const std::string& _internal_transformjson() const;
  void _internal_set_transformjson(const std::string& value);
  std::string* _internal_mutable_transformjson();
  public:

  // .esriPBuffer.EsriTypes.SpatialReference fromSR = 5;
  bool has_fromsr() const;
  private:
  bool _internal_has_fromsr() const;
  public:
  void clear_fromsr();
  const ::esriPBuffer::EsriTypes_SpatialReference& fromsr() const;
  ::esriPBuffer::EsriTypes_SpatialReference* release_fromsr();
  ::esriPBuffer::EsriTypes_SpatialReference* mutable_fromsr();
  void set_allocated_fromsr(::esriPBuffer::EsriTypes_SpatialReference* fromsr);
  private:
  const ::esriPBuffer::EsriTypes_SpatialReference& _internal_fromsr() const;
  ::esriPBuffer::EsriTypes_SpatialReference* _internal_mutable_fromsr();
  public:
  void unsafe_arena_set_allocated_fromsr(
      ::esriPBuffer::EsriTypes_SpatialReference* fromsr);
  ::esriPBuffer::EsriTypes_SpatialReference* unsafe_arena_release_fromsr();

  // .esriPBuffer.EsriTypes.SpatialReference toSR = 6;
  bool has_tosr() const;
  private:
  bool _internal_has_tosr() const;
  public:
  void clear_tosr();
  const ::esriPBuffer::EsriTypes_SpatialReference& tosr() const;
  ::esriPBuffer::EsriTypes_SpatialReference* release_tosr();
  ::esriPBuffer::EsriTypes_SpatialReference* mutable_tosr();
  void set_allocated_tosr(::esriPBuffer::EsriTypes_SpatialReference* tosr);
  private:
  const ::esriPBuffer::EsriTypes_SpatialReference& _internal_tosr() const;
  ::esriPBuffer::EsriTypes_SpatialReference* _internal_mutable_tosr();
  public:
  void unsafe_arena_set_allocated_tosr(
      ::esriPBuffer::EsriTypes_SpatialReference* tosr);
  ::esriPBuffer::EsriTypes_SpatialReference* unsafe_arena_release_tosr();

  // uint32 wkid = 1;
  void clear_wkid();
  ::PROTOBUF_NAMESPACE_ID::uint32 wkid() const;
  void set_wkid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wkid() const;
  void _internal_set_wkid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:esriPBuffer.EsriTypes.DatumTransformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wkt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transformdirection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transformjson_;
  ::esriPBuffer::EsriTypes_SpatialReference* fromsr_;
  ::esriPBuffer::EsriTypes_SpatialReference* tosr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wkid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fEsriTypes_2eproto;
};
// -------------------------------------------------------------------

class EXT_CLASS EsriTypes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:esriPBuffer.EsriTypes) */ {
 public:
  inline EsriTypes() : EsriTypes(nullptr) {}
  virtual ~EsriTypes();

  EsriTypes(const EsriTypes& from);
  EsriTypes(EsriTypes&& from) noexcept
    : EsriTypes() {
    *this = ::std::move(from);
  }

  inline EsriTypes& operator=(const EsriTypes& from) {
    CopyFrom(from);
    return *this;
  }
  inline EsriTypes& operator=(EsriTypes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EsriTypes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EsriTypes* internal_default_instance() {
    return reinterpret_cast<const EsriTypes*>(
               &_EsriTypes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EsriTypes& a, EsriTypes& b) {
    a.Swap(&b);
  }
  inline void Swap(EsriTypes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EsriTypes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EsriTypes* New() const final {
    return CreateMaybeMessage<EsriTypes>(nullptr);
  }

  EsriTypes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EsriTypes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EsriTypes& from);
  void MergeFrom(const EsriTypes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EsriTypes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "esriPBuffer.EsriTypes";
  }
  protected:
  explicit EsriTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef EsriTypes_Scale Scale;
  typedef EsriTypes_Translate Translate;
  typedef EsriTypes_Transform Transform;
  typedef EsriTypes_QuantizationParameters QuantizationParameters;
  typedef EsriTypes_SpatialReference SpatialReference;
  typedef EsriTypes_FieldIndex FieldIndex;
  typedef EsriTypes_Value Value;
  typedef EsriTypes_Envelope Envelope;
  typedef EsriTypes_CodedValue CodedValue;
  typedef EsriTypes_CodedValueDomain CodedValueDomain;
  typedef EsriTypes_RangeDomain RangeDomain;
  typedef EsriTypes_Domain Domain;
  typedef EsriTypes_DatumTransformation DatumTransformation;

  typedef EsriTypes_GeometryType GeometryType;
  static constexpr GeometryType esriGeometryTypePoint =
    EsriTypes_GeometryType_esriGeometryTypePoint;
  static constexpr GeometryType esriGeometryTypeMultipoint =
    EsriTypes_GeometryType_esriGeometryTypeMultipoint;
  static constexpr GeometryType esriGeometryTypePolyline =
    EsriTypes_GeometryType_esriGeometryTypePolyline;
  static constexpr GeometryType esriGeometryTypePolygon =
    EsriTypes_GeometryType_esriGeometryTypePolygon;
  static constexpr GeometryType esriGeometryTypeMultipatch =
    EsriTypes_GeometryType_esriGeometryTypeMultipatch;
  static constexpr GeometryType esriGeometryTypeEnvelope =
    EsriTypes_GeometryType_esriGeometryTypeEnvelope;
  static inline bool GeometryType_IsValid(int value) {
    return EsriTypes_GeometryType_IsValid(value);
  }
  static constexpr GeometryType GeometryType_MIN =
    EsriTypes_GeometryType_GeometryType_MIN;
  static constexpr GeometryType GeometryType_MAX =
    EsriTypes_GeometryType_GeometryType_MAX;
  static constexpr int GeometryType_ARRAYSIZE =
    EsriTypes_GeometryType_GeometryType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& GeometryType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GeometryType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GeometryType_Name.");
    return EsriTypes_GeometryType_Name(enum_t_value);
  }
  static inline bool GeometryType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GeometryType* value) {
    return EsriTypes_GeometryType_Parse(name, value);
  }

  typedef EsriTypes_esriSpatialRel esriSpatialRel;
  static constexpr esriSpatialRel esriSpatialRelIntersects =
    EsriTypes_esriSpatialRel_esriSpatialRelIntersects;
  static constexpr esriSpatialRel esriSpatialRelContains =
    EsriTypes_esriSpatialRel_esriSpatialRelContains;
  static constexpr esriSpatialRel esriSpatialRelCrosses =
    EsriTypes_esriSpatialRel_esriSpatialRelCrosses;
  static constexpr esriSpatialRel esriSpatialRelEnvelopeIntersects =
    EsriTypes_esriSpatialRel_esriSpatialRelEnvelopeIntersects;
  static constexpr esriSpatialRel esriSpatialRelIndexIntersects =
    EsriTypes_esriSpatialRel_esriSpatialRelIndexIntersects;
  static constexpr esriSpatialRel esriSpatialRelOverlaps =
    EsriTypes_esriSpatialRel_esriSpatialRelOverlaps;
  static constexpr esriSpatialRel esriSpatialRelTouches =
    EsriTypes_esriSpatialRel_esriSpatialRelTouches;
  static constexpr esriSpatialRel esriSpatialRelWithin =
    EsriTypes_esriSpatialRel_esriSpatialRelWithin;
  static inline bool esriSpatialRel_IsValid(int value) {
    return EsriTypes_esriSpatialRel_IsValid(value);
  }
  static constexpr esriSpatialRel esriSpatialRel_MIN =
    EsriTypes_esriSpatialRel_esriSpatialRel_MIN;
  static constexpr esriSpatialRel esriSpatialRel_MAX =
    EsriTypes_esriSpatialRel_esriSpatialRel_MAX;
  static constexpr int esriSpatialRel_ARRAYSIZE =
    EsriTypes_esriSpatialRel_esriSpatialRel_ARRAYSIZE;
  template<typename T>
  static inline const std::string& esriSpatialRel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, esriSpatialRel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function esriSpatialRel_Name.");
    return EsriTypes_esriSpatialRel_Name(enum_t_value);
  }
  static inline bool esriSpatialRel_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      esriSpatialRel* value) {
    return EsriTypes_esriSpatialRel_Parse(name, value);
  }

  typedef EsriTypes_esriFeatureEncoding esriFeatureEncoding;
  static constexpr esriFeatureEncoding esriFeatureEncoding_UNSPECIFIED =
    EsriTypes_esriFeatureEncoding_esriFeatureEncoding_UNSPECIFIED;
  static constexpr esriFeatureEncoding esriDefault =
    EsriTypes_esriFeatureEncoding_esriDefault;
  static constexpr esriFeatureEncoding esriCompressedShapeBuffer =
    EsriTypes_esriFeatureEncoding_esriCompressedShapeBuffer;
  static inline bool esriFeatureEncoding_IsValid(int value) {
    return EsriTypes_esriFeatureEncoding_IsValid(value);
  }
  static constexpr esriFeatureEncoding esriFeatureEncoding_MIN =
    EsriTypes_esriFeatureEncoding_esriFeatureEncoding_MIN;
  static constexpr esriFeatureEncoding esriFeatureEncoding_MAX =
    EsriTypes_esriFeatureEncoding_esriFeatureEncoding_MAX;
  static constexpr int esriFeatureEncoding_ARRAYSIZE =
    EsriTypes_esriFeatureEncoding_esriFeatureEncoding_ARRAYSIZE;
  template<typename T>
  static inline const std::string& esriFeatureEncoding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, esriFeatureEncoding>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function esriFeatureEncoding_Name.");
    return EsriTypes_esriFeatureEncoding_Name(enum_t_value);
  }
  static inline bool esriFeatureEncoding_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      esriFeatureEncoding* value) {
    return EsriTypes_esriFeatureEncoding_Parse(name, value);
  }

  typedef EsriTypes_MergePolicyType MergePolicyType;
  static constexpr MergePolicyType esriMergePolicyType_UNSPECIFIED =
    EsriTypes_MergePolicyType_esriMergePolicyType_UNSPECIFIED;
  static constexpr MergePolicyType esriMergePolicyTypeSumValues =
    EsriTypes_MergePolicyType_esriMergePolicyTypeSumValues;
  static constexpr MergePolicyType esriMergePolicyTypeAreaWeighted =
    EsriTypes_MergePolicyType_esriMergePolicyTypeAreaWeighted;
  static constexpr MergePolicyType esriMergePolicyTypeDefaultValue =
    EsriTypes_MergePolicyType_esriMergePolicyTypeDefaultValue;
  static inline bool MergePolicyType_IsValid(int value) {
    return EsriTypes_MergePolicyType_IsValid(value);
  }
  static constexpr MergePolicyType MergePolicyType_MIN =
    EsriTypes_MergePolicyType_MergePolicyType_MIN;
  static constexpr MergePolicyType MergePolicyType_MAX =
    EsriTypes_MergePolicyType_MergePolicyType_MAX;
  static constexpr int MergePolicyType_ARRAYSIZE =
    EsriTypes_MergePolicyType_MergePolicyType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MergePolicyType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MergePolicyType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MergePolicyType_Name.");
    return EsriTypes_MergePolicyType_Name(enum_t_value);
  }
  static inline bool MergePolicyType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MergePolicyType* value) {
    return EsriTypes_MergePolicyType_Parse(name, value);
  }

  typedef EsriTypes_SplitPolicyType SplitPolicyType;
  static constexpr SplitPolicyType esriSplitPolicyType_UNSPECIFIED =
    EsriTypes_SplitPolicyType_esriSplitPolicyType_UNSPECIFIED;
  static constexpr SplitPolicyType esriSplitPolicyTypeGeometryRatio =
    EsriTypes_SplitPolicyType_esriSplitPolicyTypeGeometryRatio;
  static constexpr SplitPolicyType esriSplitPolicyTypeDuplicate =
    EsriTypes_SplitPolicyType_esriSplitPolicyTypeDuplicate;
  static constexpr SplitPolicyType esriSplitPolicyTypeDefaultValue =
    EsriTypes_SplitPolicyType_esriSplitPolicyTypeDefaultValue;
  static inline bool SplitPolicyType_IsValid(int value) {
    return EsriTypes_SplitPolicyType_IsValid(value);
  }
  static constexpr SplitPolicyType SplitPolicyType_MIN =
    EsriTypes_SplitPolicyType_SplitPolicyType_MIN;
  static constexpr SplitPolicyType SplitPolicyType_MAX =
    EsriTypes_SplitPolicyType_SplitPolicyType_MAX;
  static constexpr int SplitPolicyType_ARRAYSIZE =
    EsriTypes_SplitPolicyType_SplitPolicyType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SplitPolicyType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SplitPolicyType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SplitPolicyType_Name.");
    return EsriTypes_SplitPolicyType_Name(enum_t_value);
  }
  static inline bool SplitPolicyType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SplitPolicyType* value) {
    return EsriTypes_SplitPolicyType_Parse(name, value);
  }

  typedef EsriTypes_QuantizeOriginPostion QuantizeOriginPostion;
  static constexpr QuantizeOriginPostion upperLeft =
    EsriTypes_QuantizeOriginPostion_upperLeft;
  static constexpr QuantizeOriginPostion lowerLeft =
    EsriTypes_QuantizeOriginPostion_lowerLeft;
  static inline bool QuantizeOriginPostion_IsValid(int value) {
    return EsriTypes_QuantizeOriginPostion_IsValid(value);
  }
  static constexpr QuantizeOriginPostion QuantizeOriginPostion_MIN =
    EsriTypes_QuantizeOriginPostion_QuantizeOriginPostion_MIN;
  static constexpr QuantizeOriginPostion QuantizeOriginPostion_MAX =
    EsriTypes_QuantizeOriginPostion_QuantizeOriginPostion_MAX;
  static constexpr int QuantizeOriginPostion_ARRAYSIZE =
    EsriTypes_QuantizeOriginPostion_QuantizeOriginPostion_ARRAYSIZE;
  template<typename T>
  static inline const std::string& QuantizeOriginPostion_Name(T enum_t_value) {
    static_assert(::std::is_same<T, QuantizeOriginPostion>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function QuantizeOriginPostion_Name.");
    return EsriTypes_QuantizeOriginPostion_Name(enum_t_value);
  }
  static inline bool QuantizeOriginPostion_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      QuantizeOriginPostion* value) {
    return EsriTypes_QuantizeOriginPostion_Parse(name, value);
  }

  typedef EsriTypes_QuantizeMode QuantizeMode;
  static constexpr QuantizeMode view =
    EsriTypes_QuantizeMode_view;
  static constexpr QuantizeMode edit =
    EsriTypes_QuantizeMode_edit;
  static inline bool QuantizeMode_IsValid(int value) {
    return EsriTypes_QuantizeMode_IsValid(value);
  }
  static constexpr QuantizeMode QuantizeMode_MIN =
    EsriTypes_QuantizeMode_QuantizeMode_MIN;
  static constexpr QuantizeMode QuantizeMode_MAX =
    EsriTypes_QuantizeMode_QuantizeMode_MAX;
  static constexpr int QuantizeMode_ARRAYSIZE =
    EsriTypes_QuantizeMode_QuantizeMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& QuantizeMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, QuantizeMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function QuantizeMode_Name.");
    return EsriTypes_QuantizeMode_Name(enum_t_value);
  }
  static inline bool QuantizeMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      QuantizeMode* value) {
    return EsriTypes_QuantizeMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:esriPBuffer.EsriTypes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_esriPBuffer_2fEsriTypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EsriTypes_Scale

// double xScale = 1;
inline void EsriTypes_Scale::clear_xscale() {
  xscale_ = 0;
}
inline double EsriTypes_Scale::_internal_xscale() const {
  return xscale_;
}
inline double EsriTypes_Scale::xscale() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Scale.xScale)
  return _internal_xscale();
}
inline void EsriTypes_Scale::_internal_set_xscale(double value) {
  
  xscale_ = value;
}
inline void EsriTypes_Scale::set_xscale(double value) {
  _internal_set_xscale(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Scale.xScale)
}

// double yScale = 2;
inline void EsriTypes_Scale::clear_yscale() {
  yscale_ = 0;
}
inline double EsriTypes_Scale::_internal_yscale() const {
  return yscale_;
}
inline double EsriTypes_Scale::yscale() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Scale.yScale)
  return _internal_yscale();
}
inline void EsriTypes_Scale::_internal_set_yscale(double value) {
  
  yscale_ = value;
}
inline void EsriTypes_Scale::set_yscale(double value) {
  _internal_set_yscale(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Scale.yScale)
}

// double mScale = 3;
inline void EsriTypes_Scale::clear_mscale() {
  mscale_ = 0;
}
inline double EsriTypes_Scale::_internal_mscale() const {
  return mscale_;
}
inline double EsriTypes_Scale::mscale() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Scale.mScale)
  return _internal_mscale();
}
inline void EsriTypes_Scale::_internal_set_mscale(double value) {
  
  mscale_ = value;
}
inline void EsriTypes_Scale::set_mscale(double value) {
  _internal_set_mscale(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Scale.mScale)
}

// double zScale = 4;
inline void EsriTypes_Scale::clear_zscale() {
  zscale_ = 0;
}
inline double EsriTypes_Scale::_internal_zscale() const {
  return zscale_;
}
inline double EsriTypes_Scale::zscale() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Scale.zScale)
  return _internal_zscale();
}
inline void EsriTypes_Scale::_internal_set_zscale(double value) {
  
  zscale_ = value;
}
inline void EsriTypes_Scale::set_zscale(double value) {
  _internal_set_zscale(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Scale.zScale)
}

// -------------------------------------------------------------------

// EsriTypes_Translate

// double xTranslate = 1;
inline void EsriTypes_Translate::clear_xtranslate() {
  xtranslate_ = 0;
}
inline double EsriTypes_Translate::_internal_xtranslate() const {
  return xtranslate_;
}
inline double EsriTypes_Translate::xtranslate() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Translate.xTranslate)
  return _internal_xtranslate();
}
inline void EsriTypes_Translate::_internal_set_xtranslate(double value) {
  
  xtranslate_ = value;
}
inline void EsriTypes_Translate::set_xtranslate(double value) {
  _internal_set_xtranslate(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Translate.xTranslate)
}

// double yTranslate = 2;
inline void EsriTypes_Translate::clear_ytranslate() {
  ytranslate_ = 0;
}
inline double EsriTypes_Translate::_internal_ytranslate() const {
  return ytranslate_;
}
inline double EsriTypes_Translate::ytranslate() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Translate.yTranslate)
  return _internal_ytranslate();
}
inline void EsriTypes_Translate::_internal_set_ytranslate(double value) {
  
  ytranslate_ = value;
}
inline void EsriTypes_Translate::set_ytranslate(double value) {
  _internal_set_ytranslate(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Translate.yTranslate)
}

// double mTranslate = 3;
inline void EsriTypes_Translate::clear_mtranslate() {
  mtranslate_ = 0;
}
inline double EsriTypes_Translate::_internal_mtranslate() const {
  return mtranslate_;
}
inline double EsriTypes_Translate::mtranslate() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Translate.mTranslate)
  return _internal_mtranslate();
}
inline void EsriTypes_Translate::_internal_set_mtranslate(double value) {
  
  mtranslate_ = value;
}
inline void EsriTypes_Translate::set_mtranslate(double value) {
  _internal_set_mtranslate(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Translate.mTranslate)
}

// double zTranslate = 4;
inline void EsriTypes_Translate::clear_ztranslate() {
  ztranslate_ = 0;
}
inline double EsriTypes_Translate::_internal_ztranslate() const {
  return ztranslate_;
}
inline double EsriTypes_Translate::ztranslate() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Translate.zTranslate)
  return _internal_ztranslate();
}
inline void EsriTypes_Translate::_internal_set_ztranslate(double value) {
  
  ztranslate_ = value;
}
inline void EsriTypes_Translate::set_ztranslate(double value) {
  _internal_set_ztranslate(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Translate.zTranslate)
}

// -------------------------------------------------------------------

// EsriTypes_Transform

// .esriPBuffer.EsriTypes.QuantizeOriginPostion quantizeOriginPostion = 1;
inline void EsriTypes_Transform::clear_quantizeoriginpostion() {
  quantizeoriginpostion_ = 0;
}
inline ::esriPBuffer::EsriTypes_QuantizeOriginPostion EsriTypes_Transform::_internal_quantizeoriginpostion() const {
  return static_cast< ::esriPBuffer::EsriTypes_QuantizeOriginPostion >(quantizeoriginpostion_);
}
inline ::esriPBuffer::EsriTypes_QuantizeOriginPostion EsriTypes_Transform::quantizeoriginpostion() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Transform.quantizeOriginPostion)
  return _internal_quantizeoriginpostion();
}
inline void EsriTypes_Transform::_internal_set_quantizeoriginpostion(::esriPBuffer::EsriTypes_QuantizeOriginPostion value) {
  
  quantizeoriginpostion_ = value;
}
inline void EsriTypes_Transform::set_quantizeoriginpostion(::esriPBuffer::EsriTypes_QuantizeOriginPostion value) {
  _internal_set_quantizeoriginpostion(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Transform.quantizeOriginPostion)
}

// .esriPBuffer.EsriTypes.Scale scale = 2;
inline bool EsriTypes_Transform::_internal_has_scale() const {
  return this != internal_default_instance() && scale_ != nullptr;
}
inline bool EsriTypes_Transform::has_scale() const {
  return _internal_has_scale();
}
inline void EsriTypes_Transform::clear_scale() {
  if (GetArena() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
}
inline const ::esriPBuffer::EsriTypes_Scale& EsriTypes_Transform::_internal_scale() const {
  const ::esriPBuffer::EsriTypes_Scale* p = scale_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_Scale*>(
      &::esriPBuffer::_EsriTypes_Scale_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_Scale& EsriTypes_Transform::scale() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Transform.scale)
  return _internal_scale();
}
inline void EsriTypes_Transform::unsafe_arena_set_allocated_scale(
    ::esriPBuffer::EsriTypes_Scale* scale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.EsriTypes.Transform.scale)
}
inline ::esriPBuffer::EsriTypes_Scale* EsriTypes_Transform::release_scale() {
  
  ::esriPBuffer::EsriTypes_Scale* temp = scale_;
  scale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_Scale* EsriTypes_Transform::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.Transform.scale)
  
  ::esriPBuffer::EsriTypes_Scale* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_Scale* EsriTypes_Transform::_internal_mutable_scale() {
  
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_Scale>(GetArena());
    scale_ = p;
  }
  return scale_;
}
inline ::esriPBuffer::EsriTypes_Scale* EsriTypes_Transform::mutable_scale() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.Transform.scale)
  return _internal_mutable_scale();
}
inline void EsriTypes_Transform::set_allocated_scale(::esriPBuffer::EsriTypes_Scale* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scale_;
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scale);
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.Transform.scale)
}

// .esriPBuffer.EsriTypes.Translate translate = 3;
inline bool EsriTypes_Transform::_internal_has_translate() const {
  return this != internal_default_instance() && translate_ != nullptr;
}
inline bool EsriTypes_Transform::has_translate() const {
  return _internal_has_translate();
}
inline void EsriTypes_Transform::clear_translate() {
  if (GetArena() == nullptr && translate_ != nullptr) {
    delete translate_;
  }
  translate_ = nullptr;
}
inline const ::esriPBuffer::EsriTypes_Translate& EsriTypes_Transform::_internal_translate() const {
  const ::esriPBuffer::EsriTypes_Translate* p = translate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_Translate*>(
      &::esriPBuffer::_EsriTypes_Translate_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_Translate& EsriTypes_Transform::translate() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Transform.translate)
  return _internal_translate();
}
inline void EsriTypes_Transform::unsafe_arena_set_allocated_translate(
    ::esriPBuffer::EsriTypes_Translate* translate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translate_);
  }
  translate_ = translate;
  if (translate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.EsriTypes.Transform.translate)
}
inline ::esriPBuffer::EsriTypes_Translate* EsriTypes_Transform::release_translate() {
  
  ::esriPBuffer::EsriTypes_Translate* temp = translate_;
  translate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_Translate* EsriTypes_Transform::unsafe_arena_release_translate() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.Transform.translate)
  
  ::esriPBuffer::EsriTypes_Translate* temp = translate_;
  translate_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_Translate* EsriTypes_Transform::_internal_mutable_translate() {
  
  if (translate_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_Translate>(GetArena());
    translate_ = p;
  }
  return translate_;
}
inline ::esriPBuffer::EsriTypes_Translate* EsriTypes_Transform::mutable_translate() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.Transform.translate)
  return _internal_mutable_translate();
}
inline void EsriTypes_Transform::set_allocated_translate(::esriPBuffer::EsriTypes_Translate* translate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete translate_;
  }
  if (translate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(translate);
    if (message_arena != submessage_arena) {
      translate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translate, submessage_arena);
    }
    
  } else {
    
  }
  translate_ = translate;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.Transform.translate)
}

// -------------------------------------------------------------------

// EsriTypes_QuantizationParameters

// .esriPBuffer.EsriTypes.Envelope extent = 1;
inline bool EsriTypes_QuantizationParameters::_internal_has_extent() const {
  return this != internal_default_instance() && extent_ != nullptr;
}
inline bool EsriTypes_QuantizationParameters::has_extent() const {
  return _internal_has_extent();
}
inline void EsriTypes_QuantizationParameters::clear_extent() {
  if (GetArena() == nullptr && extent_ != nullptr) {
    delete extent_;
  }
  extent_ = nullptr;
}
inline const ::esriPBuffer::EsriTypes_Envelope& EsriTypes_QuantizationParameters::_internal_extent() const {
  const ::esriPBuffer::EsriTypes_Envelope* p = extent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_Envelope*>(
      &::esriPBuffer::_EsriTypes_Envelope_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_Envelope& EsriTypes_QuantizationParameters::extent() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.QuantizationParameters.extent)
  return _internal_extent();
}
inline void EsriTypes_QuantizationParameters::unsafe_arena_set_allocated_extent(
    ::esriPBuffer::EsriTypes_Envelope* extent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extent_);
  }
  extent_ = extent;
  if (extent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.EsriTypes.QuantizationParameters.extent)
}
inline ::esriPBuffer::EsriTypes_Envelope* EsriTypes_QuantizationParameters::release_extent() {
  
  ::esriPBuffer::EsriTypes_Envelope* temp = extent_;
  extent_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_Envelope* EsriTypes_QuantizationParameters::unsafe_arena_release_extent() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.QuantizationParameters.extent)
  
  ::esriPBuffer::EsriTypes_Envelope* temp = extent_;
  extent_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_Envelope* EsriTypes_QuantizationParameters::_internal_mutable_extent() {
  
  if (extent_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_Envelope>(GetArena());
    extent_ = p;
  }
  return extent_;
}
inline ::esriPBuffer::EsriTypes_Envelope* EsriTypes_QuantizationParameters::mutable_extent() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.QuantizationParameters.extent)
  return _internal_mutable_extent();
}
inline void EsriTypes_QuantizationParameters::set_allocated_extent(::esriPBuffer::EsriTypes_Envelope* extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete extent_;
  }
  if (extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extent);
    if (message_arena != submessage_arena) {
      extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extent, submessage_arena);
    }
    
  } else {
    
  }
  extent_ = extent;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.QuantizationParameters.extent)
}

// .esriPBuffer.EsriTypes.QuantizeMode mode = 2;
inline void EsriTypes_QuantizationParameters::clear_mode() {
  mode_ = 0;
}
inline ::esriPBuffer::EsriTypes_QuantizeMode EsriTypes_QuantizationParameters::_internal_mode() const {
  return static_cast< ::esriPBuffer::EsriTypes_QuantizeMode >(mode_);
}
inline ::esriPBuffer::EsriTypes_QuantizeMode EsriTypes_QuantizationParameters::mode() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.QuantizationParameters.mode)
  return _internal_mode();
}
inline void EsriTypes_QuantizationParameters::_internal_set_mode(::esriPBuffer::EsriTypes_QuantizeMode value) {
  
  mode_ = value;
}
inline void EsriTypes_QuantizationParameters::set_mode(::esriPBuffer::EsriTypes_QuantizeMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.QuantizationParameters.mode)
}

// .esriPBuffer.EsriTypes.QuantizeOriginPostion quantizeOriginPostion = 3;
inline void EsriTypes_QuantizationParameters::clear_quantizeoriginpostion() {
  quantizeoriginpostion_ = 0;
}
inline ::esriPBuffer::EsriTypes_QuantizeOriginPostion EsriTypes_QuantizationParameters::_internal_quantizeoriginpostion() const {
  return static_cast< ::esriPBuffer::EsriTypes_QuantizeOriginPostion >(quantizeoriginpostion_);
}
inline ::esriPBuffer::EsriTypes_QuantizeOriginPostion EsriTypes_QuantizationParameters::quantizeoriginpostion() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.QuantizationParameters.quantizeOriginPostion)
  return _internal_quantizeoriginpostion();
}
inline void EsriTypes_QuantizationParameters::_internal_set_quantizeoriginpostion(::esriPBuffer::EsriTypes_QuantizeOriginPostion value) {
  
  quantizeoriginpostion_ = value;
}
inline void EsriTypes_QuantizationParameters::set_quantizeoriginpostion(::esriPBuffer::EsriTypes_QuantizeOriginPostion value) {
  _internal_set_quantizeoriginpostion(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.QuantizationParameters.quantizeOriginPostion)
}

// double tolerance = 4;
inline void EsriTypes_QuantizationParameters::clear_tolerance() {
  tolerance_ = 0;
}
inline double EsriTypes_QuantizationParameters::_internal_tolerance() const {
  return tolerance_;
}
inline double EsriTypes_QuantizationParameters::tolerance() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.QuantizationParameters.tolerance)
  return _internal_tolerance();
}
inline void EsriTypes_QuantizationParameters::_internal_set_tolerance(double value) {
  
  tolerance_ = value;
}
inline void EsriTypes_QuantizationParameters::set_tolerance(double value) {
  _internal_set_tolerance(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.QuantizationParameters.tolerance)
}

// -------------------------------------------------------------------

// EsriTypes_SpatialReference

// uint32 wkid = 1;
inline void EsriTypes_SpatialReference::clear_wkid() {
  wkid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EsriTypes_SpatialReference::_internal_wkid() const {
  return wkid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EsriTypes_SpatialReference::wkid() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.SpatialReference.wkid)
  return _internal_wkid();
}
inline void EsriTypes_SpatialReference::_internal_set_wkid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  wkid_ = value;
}
inline void EsriTypes_SpatialReference::set_wkid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wkid(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.SpatialReference.wkid)
}

// uint32 lastestWkid = 2;
inline void EsriTypes_SpatialReference::clear_lastestwkid() {
  lastestwkid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EsriTypes_SpatialReference::_internal_lastestwkid() const {
  return lastestwkid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EsriTypes_SpatialReference::lastestwkid() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.SpatialReference.lastestWkid)
  return _internal_lastestwkid();
}
inline void EsriTypes_SpatialReference::_internal_set_lastestwkid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lastestwkid_ = value;
}
inline void EsriTypes_SpatialReference::set_lastestwkid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lastestwkid(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.SpatialReference.lastestWkid)
}

// uint32 vcsWkid = 3;
inline void EsriTypes_SpatialReference::clear_vcswkid() {
  vcswkid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EsriTypes_SpatialReference::_internal_vcswkid() const {
  return vcswkid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EsriTypes_SpatialReference::vcswkid() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.SpatialReference.vcsWkid)
  return _internal_vcswkid();
}
inline void EsriTypes_SpatialReference::_internal_set_vcswkid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vcswkid_ = value;
}
inline void EsriTypes_SpatialReference::set_vcswkid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vcswkid(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.SpatialReference.vcsWkid)
}

// uint32 latestVcsWkid = 4;
inline void EsriTypes_SpatialReference::clear_latestvcswkid() {
  latestvcswkid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EsriTypes_SpatialReference::_internal_latestvcswkid() const {
  return latestvcswkid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EsriTypes_SpatialReference::latestvcswkid() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.SpatialReference.latestVcsWkid)
  return _internal_latestvcswkid();
}
inline void EsriTypes_SpatialReference::_internal_set_latestvcswkid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  latestvcswkid_ = value;
}
inline void EsriTypes_SpatialReference::set_latestvcswkid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_latestvcswkid(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.SpatialReference.latestVcsWkid)
}

// string wkt = 5;
inline void EsriTypes_SpatialReference::clear_wkt() {
  wkt_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EsriTypes_SpatialReference::wkt() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.SpatialReference.wkt)
  return _internal_wkt();
}
inline void EsriTypes_SpatialReference::set_wkt(const std::string& value) {
  _internal_set_wkt(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.SpatialReference.wkt)
}
inline std::string* EsriTypes_SpatialReference::mutable_wkt() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.SpatialReference.wkt)
  return _internal_mutable_wkt();
}
inline const std::string& EsriTypes_SpatialReference::_internal_wkt() const {
  return wkt_.Get();
}
inline void EsriTypes_SpatialReference::_internal_set_wkt(const std::string& value) {
  
  wkt_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EsriTypes_SpatialReference::set_wkt(std::string&& value) {
  
  wkt_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.EsriTypes.SpatialReference.wkt)
}
inline void EsriTypes_SpatialReference::set_wkt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wkt_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.EsriTypes.SpatialReference.wkt)
}
inline void EsriTypes_SpatialReference::set_wkt(const char* value,
    size_t size) {
  
  wkt_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.EsriTypes.SpatialReference.wkt)
}
inline std::string* EsriTypes_SpatialReference::_internal_mutable_wkt() {
  
  return wkt_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EsriTypes_SpatialReference::release_wkt() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.SpatialReference.wkt)
  return wkt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EsriTypes_SpatialReference::set_allocated_wkt(std::string* wkt) {
  if (wkt != nullptr) {
    
  } else {
    
  }
  wkt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wkt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.SpatialReference.wkt)
}

// uint32 sdesrid = 6;
inline void EsriTypes_SpatialReference::clear_sdesrid() {
  sdesrid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EsriTypes_SpatialReference::_internal_sdesrid() const {
  return sdesrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EsriTypes_SpatialReference::sdesrid() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.SpatialReference.sdesrid)
  return _internal_sdesrid();
}
inline void EsriTypes_SpatialReference::_internal_set_sdesrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sdesrid_ = value;
}
inline void EsriTypes_SpatialReference::set_sdesrid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sdesrid(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.SpatialReference.sdesrid)
}

// -------------------------------------------------------------------

// EsriTypes_FieldIndex

// string name = 1;
inline void EsriTypes_FieldIndex::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EsriTypes_FieldIndex::name() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.FieldIndex.name)
  return _internal_name();
}
inline void EsriTypes_FieldIndex::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.FieldIndex.name)
}
inline std::string* EsriTypes_FieldIndex::mutable_name() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.FieldIndex.name)
  return _internal_mutable_name();
}
inline const std::string& EsriTypes_FieldIndex::_internal_name() const {
  return name_.Get();
}
inline void EsriTypes_FieldIndex::_internal_set_name(const std::string& value) {
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EsriTypes_FieldIndex::set_name(std::string&& value) {
  
  name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.EsriTypes.FieldIndex.name)
}
inline void EsriTypes_FieldIndex::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.EsriTypes.FieldIndex.name)
}
inline void EsriTypes_FieldIndex::set_name(const char* value,
    size_t size) {
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.EsriTypes.FieldIndex.name)
}
inline std::string* EsriTypes_FieldIndex::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EsriTypes_FieldIndex::release_name() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.FieldIndex.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EsriTypes_FieldIndex::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.FieldIndex.name)
}

// string fields = 2;
inline void EsriTypes_FieldIndex::clear_fields() {
  fields_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EsriTypes_FieldIndex::fields() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.FieldIndex.fields)
  return _internal_fields();
}
inline void EsriTypes_FieldIndex::set_fields(const std::string& value) {
  _internal_set_fields(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.FieldIndex.fields)
}
inline std::string* EsriTypes_FieldIndex::mutable_fields() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.FieldIndex.fields)
  return _internal_mutable_fields();
}
inline const std::string& EsriTypes_FieldIndex::_internal_fields() const {
  return fields_.Get();
}
inline void EsriTypes_FieldIndex::_internal_set_fields(const std::string& value) {
  
  fields_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EsriTypes_FieldIndex::set_fields(std::string&& value) {
  
  fields_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.EsriTypes.FieldIndex.fields)
}
inline void EsriTypes_FieldIndex::set_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fields_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.EsriTypes.FieldIndex.fields)
}
inline void EsriTypes_FieldIndex::set_fields(const char* value,
    size_t size) {
  
  fields_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.EsriTypes.FieldIndex.fields)
}
inline std::string* EsriTypes_FieldIndex::_internal_mutable_fields() {
  
  return fields_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EsriTypes_FieldIndex::release_fields() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.FieldIndex.fields)
  return fields_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EsriTypes_FieldIndex::set_allocated_fields(std::string* fields) {
  if (fields != nullptr) {
    
  } else {
    
  }
  fields_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fields,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.FieldIndex.fields)
}

// bool isAscending = 3;
inline void EsriTypes_FieldIndex::clear_isascending() {
  isascending_ = false;
}
inline bool EsriTypes_FieldIndex::_internal_isascending() const {
  return isascending_;
}
inline bool EsriTypes_FieldIndex::isascending() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.FieldIndex.isAscending)
  return _internal_isascending();
}
inline void EsriTypes_FieldIndex::_internal_set_isascending(bool value) {
  
  isascending_ = value;
}
inline void EsriTypes_FieldIndex::set_isascending(bool value) {
  _internal_set_isascending(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.FieldIndex.isAscending)
}

// bool isUnique = 4;
inline void EsriTypes_FieldIndex::clear_isunique() {
  isunique_ = false;
}
inline bool EsriTypes_FieldIndex::_internal_isunique() const {
  return isunique_;
}
inline bool EsriTypes_FieldIndex::isunique() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.FieldIndex.isUnique)
  return _internal_isunique();
}
inline void EsriTypes_FieldIndex::_internal_set_isunique(bool value) {
  
  isunique_ = value;
}
inline void EsriTypes_FieldIndex::set_isunique(bool value) {
  _internal_set_isunique(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.FieldIndex.isUnique)
}

// string description = 5;
inline void EsriTypes_FieldIndex::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EsriTypes_FieldIndex::description() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.FieldIndex.description)
  return _internal_description();
}
inline void EsriTypes_FieldIndex::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.FieldIndex.description)
}
inline std::string* EsriTypes_FieldIndex::mutable_description() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.FieldIndex.description)
  return _internal_mutable_description();
}
inline const std::string& EsriTypes_FieldIndex::_internal_description() const {
  return description_.Get();
}
inline void EsriTypes_FieldIndex::_internal_set_description(const std::string& value) {
  
  description_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EsriTypes_FieldIndex::set_description(std::string&& value) {
  
  description_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.EsriTypes.FieldIndex.description)
}
inline void EsriTypes_FieldIndex::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.EsriTypes.FieldIndex.description)
}
inline void EsriTypes_FieldIndex::set_description(const char* value,
    size_t size) {
  
  description_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.EsriTypes.FieldIndex.description)
}
inline std::string* EsriTypes_FieldIndex::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EsriTypes_FieldIndex::release_description() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.FieldIndex.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EsriTypes_FieldIndex::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.FieldIndex.description)
}

// -------------------------------------------------------------------

// EsriTypes_Value

// string string_value = 1;
inline bool EsriTypes_Value::_internal_has_string_value() const {
  return value_type_case() == kStringValue;
}
inline void EsriTypes_Value::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void EsriTypes_Value::clear_string_value() {
  if (_internal_has_string_value()) {
    value_type_.string_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value_type();
  }
}
inline const std::string& EsriTypes_Value::string_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Value.string_value)
  return _internal_string_value();
}
inline void EsriTypes_Value::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Value.string_value)
}
inline std::string* EsriTypes_Value::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.Value.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& EsriTypes_Value::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_type_.string_value_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EsriTypes_Value::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EsriTypes_Value::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Value.string_value)
  if (!_internal_has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_value_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.EsriTypes.Value.string_value)
}
inline void EsriTypes_Value::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_value_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.EsriTypes.Value.string_value)
}
inline void EsriTypes_Value::set_string_value(const char* value,
                             size_t size) {
  if (!_internal_has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_type_.string_value_.SetLite(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.EsriTypes.Value.string_value)
}
inline std::string* EsriTypes_Value::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value_type();
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_type_.string_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EsriTypes_Value::release_string_value() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.Value.string_value)
  if (_internal_has_string_value()) {
    clear_has_value_type();
    return value_type_.string_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void EsriTypes_Value::set_allocated_string_value(std::string* string_value) {
  if (has_value_type()) {
    clear_value_type();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_type_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.Value.string_value)
}

// float float_value = 2;
inline bool EsriTypes_Value::_internal_has_float_value() const {
  return value_type_case() == kFloatValue;
}
inline void EsriTypes_Value::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void EsriTypes_Value::clear_float_value() {
  if (_internal_has_float_value()) {
    value_type_.float_value_ = 0;
    clear_has_value_type();
  }
}
inline float EsriTypes_Value::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return value_type_.float_value_;
  }
  return 0;
}
inline void EsriTypes_Value::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_value_type();
    set_has_float_value();
  }
  value_type_.float_value_ = value;
}
inline float EsriTypes_Value::float_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Value.float_value)
  return _internal_float_value();
}
inline void EsriTypes_Value::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Value.float_value)
}

// double double_value = 3;
inline bool EsriTypes_Value::_internal_has_double_value() const {
  return value_type_case() == kDoubleValue;
}
inline void EsriTypes_Value::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void EsriTypes_Value::clear_double_value() {
  if (_internal_has_double_value()) {
    value_type_.double_value_ = 0;
    clear_has_value_type();
  }
}
inline double EsriTypes_Value::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return value_type_.double_value_;
  }
  return 0;
}
inline void EsriTypes_Value::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value_type();
    set_has_double_value();
  }
  value_type_.double_value_ = value;
}
inline double EsriTypes_Value::double_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Value.double_value)
  return _internal_double_value();
}
inline void EsriTypes_Value::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Value.double_value)
}

// sint32 sint_value = 4;
inline bool EsriTypes_Value::_internal_has_sint_value() const {
  return value_type_case() == kSintValue;
}
inline void EsriTypes_Value::set_has_sint_value() {
  _oneof_case_[0] = kSintValue;
}
inline void EsriTypes_Value::clear_sint_value() {
  if (_internal_has_sint_value()) {
    value_type_.sint_value_ = 0;
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EsriTypes_Value::_internal_sint_value() const {
  if (_internal_has_sint_value()) {
    return value_type_.sint_value_;
  }
  return 0;
}
inline void EsriTypes_Value::_internal_set_sint_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_sint_value()) {
    clear_value_type();
    set_has_sint_value();
  }
  value_type_.sint_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EsriTypes_Value::sint_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Value.sint_value)
  return _internal_sint_value();
}
inline void EsriTypes_Value::set_sint_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sint_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Value.sint_value)
}

// uint32 uint_value = 5;
inline bool EsriTypes_Value::_internal_has_uint_value() const {
  return value_type_case() == kUintValue;
}
inline void EsriTypes_Value::set_has_uint_value() {
  _oneof_case_[0] = kUintValue;
}
inline void EsriTypes_Value::clear_uint_value() {
  if (_internal_has_uint_value()) {
    value_type_.uint_value_ = 0u;
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EsriTypes_Value::_internal_uint_value() const {
  if (_internal_has_uint_value()) {
    return value_type_.uint_value_;
  }
  return 0u;
}
inline void EsriTypes_Value::_internal_set_uint_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_uint_value()) {
    clear_value_type();
    set_has_uint_value();
  }
  value_type_.uint_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EsriTypes_Value::uint_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Value.uint_value)
  return _internal_uint_value();
}
inline void EsriTypes_Value::set_uint_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Value.uint_value)
}

// int64 int64_value = 6;
inline bool EsriTypes_Value::_internal_has_int64_value() const {
  return value_type_case() == kInt64Value;
}
inline void EsriTypes_Value::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void EsriTypes_Value::clear_int64_value() {
  if (_internal_has_int64_value()) {
    value_type_.int64_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EsriTypes_Value::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return value_type_.int64_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void EsriTypes_Value::_internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int64_value()) {
    clear_value_type();
    set_has_int64_value();
  }
  value_type_.int64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EsriTypes_Value::int64_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Value.int64_value)
  return _internal_int64_value();
}
inline void EsriTypes_Value::set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Value.int64_value)
}

// uint64 uint64_value = 7;
inline bool EsriTypes_Value::_internal_has_uint64_value() const {
  return value_type_case() == kUint64Value;
}
inline void EsriTypes_Value::set_has_uint64_value() {
  _oneof_case_[0] = kUint64Value;
}
inline void EsriTypes_Value::clear_uint64_value() {
  if (_internal_has_uint64_value()) {
    value_type_.uint64_value_ = PROTOBUF_ULONGLONG(0);
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EsriTypes_Value::_internal_uint64_value() const {
  if (_internal_has_uint64_value()) {
    return value_type_.uint64_value_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void EsriTypes_Value::_internal_set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_uint64_value()) {
    clear_value_type();
    set_has_uint64_value();
  }
  value_type_.uint64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EsriTypes_Value::uint64_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Value.uint64_value)
  return _internal_uint64_value();
}
inline void EsriTypes_Value::set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint64_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Value.uint64_value)
}

// sint64 sint64_value = 8;
inline bool EsriTypes_Value::_internal_has_sint64_value() const {
  return value_type_case() == kSint64Value;
}
inline void EsriTypes_Value::set_has_sint64_value() {
  _oneof_case_[0] = kSint64Value;
}
inline void EsriTypes_Value::clear_sint64_value() {
  if (_internal_has_sint64_value()) {
    value_type_.sint64_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EsriTypes_Value::_internal_sint64_value() const {
  if (_internal_has_sint64_value()) {
    return value_type_.sint64_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void EsriTypes_Value::_internal_set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_sint64_value()) {
    clear_value_type();
    set_has_sint64_value();
  }
  value_type_.sint64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EsriTypes_Value::sint64_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Value.sint64_value)
  return _internal_sint64_value();
}
inline void EsriTypes_Value::set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sint64_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Value.sint64_value)
}

// bool bool_value = 9;
inline bool EsriTypes_Value::_internal_has_bool_value() const {
  return value_type_case() == kBoolValue;
}
inline void EsriTypes_Value::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void EsriTypes_Value::clear_bool_value() {
  if (_internal_has_bool_value()) {
    value_type_.bool_value_ = false;
    clear_has_value_type();
  }
}
inline bool EsriTypes_Value::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return value_type_.bool_value_;
  }
  return false;
}
inline void EsriTypes_Value::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value_type();
    set_has_bool_value();
  }
  value_type_.bool_value_ = value;
}
inline bool EsriTypes_Value::bool_value() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Value.bool_value)
  return _internal_bool_value();
}
inline void EsriTypes_Value::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Value.bool_value)
}

inline bool EsriTypes_Value::has_value_type() const {
  return value_type_case() != VALUE_TYPE_NOT_SET;
}
inline void EsriTypes_Value::clear_has_value_type() {
  _oneof_case_[0] = VALUE_TYPE_NOT_SET;
}
inline EsriTypes_Value::ValueTypeCase EsriTypes_Value::value_type_case() const {
  return EsriTypes_Value::ValueTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EsriTypes_Envelope

// double XMin = 1;
inline void EsriTypes_Envelope::clear_xmin() {
  xmin_ = 0;
}
inline double EsriTypes_Envelope::_internal_xmin() const {
  return xmin_;
}
inline double EsriTypes_Envelope::xmin() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Envelope.XMin)
  return _internal_xmin();
}
inline void EsriTypes_Envelope::_internal_set_xmin(double value) {
  
  xmin_ = value;
}
inline void EsriTypes_Envelope::set_xmin(double value) {
  _internal_set_xmin(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Envelope.XMin)
}

// double YMin = 2;
inline void EsriTypes_Envelope::clear_ymin() {
  ymin_ = 0;
}
inline double EsriTypes_Envelope::_internal_ymin() const {
  return ymin_;
}
inline double EsriTypes_Envelope::ymin() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Envelope.YMin)
  return _internal_ymin();
}
inline void EsriTypes_Envelope::_internal_set_ymin(double value) {
  
  ymin_ = value;
}
inline void EsriTypes_Envelope::set_ymin(double value) {
  _internal_set_ymin(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Envelope.YMin)
}

// double XMax = 3;
inline void EsriTypes_Envelope::clear_xmax() {
  xmax_ = 0;
}
inline double EsriTypes_Envelope::_internal_xmax() const {
  return xmax_;
}
inline double EsriTypes_Envelope::xmax() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Envelope.XMax)
  return _internal_xmax();
}
inline void EsriTypes_Envelope::_internal_set_xmax(double value) {
  
  xmax_ = value;
}
inline void EsriTypes_Envelope::set_xmax(double value) {
  _internal_set_xmax(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Envelope.XMax)
}

// double YMax = 4;
inline void EsriTypes_Envelope::clear_ymax() {
  ymax_ = 0;
}
inline double EsriTypes_Envelope::_internal_ymax() const {
  return ymax_;
}
inline double EsriTypes_Envelope::ymax() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Envelope.YMax)
  return _internal_ymax();
}
inline void EsriTypes_Envelope::_internal_set_ymax(double value) {
  
  ymax_ = value;
}
inline void EsriTypes_Envelope::set_ymax(double value) {
  _internal_set_ymax(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Envelope.YMax)
}

// .esriPBuffer.EsriTypes.SpatialReference SpatialReference = 5;
inline bool EsriTypes_Envelope::_internal_has_spatialreference() const {
  return this != internal_default_instance() && spatialreference_ != nullptr;
}
inline bool EsriTypes_Envelope::has_spatialreference() const {
  return _internal_has_spatialreference();
}
inline void EsriTypes_Envelope::clear_spatialreference() {
  if (GetArena() == nullptr && spatialreference_ != nullptr) {
    delete spatialreference_;
  }
  spatialreference_ = nullptr;
}
inline const ::esriPBuffer::EsriTypes_SpatialReference& EsriTypes_Envelope::_internal_spatialreference() const {
  const ::esriPBuffer::EsriTypes_SpatialReference* p = spatialreference_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_SpatialReference*>(
      &::esriPBuffer::_EsriTypes_SpatialReference_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_SpatialReference& EsriTypes_Envelope::spatialreference() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Envelope.SpatialReference)
  return _internal_spatialreference();
}
inline void EsriTypes_Envelope::unsafe_arena_set_allocated_spatialreference(
    ::esriPBuffer::EsriTypes_SpatialReference* spatialreference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatialreference_);
  }
  spatialreference_ = spatialreference;
  if (spatialreference) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.EsriTypes.Envelope.SpatialReference)
}
inline ::esriPBuffer::EsriTypes_SpatialReference* EsriTypes_Envelope::release_spatialreference() {
  
  ::esriPBuffer::EsriTypes_SpatialReference* temp = spatialreference_;
  spatialreference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* EsriTypes_Envelope::unsafe_arena_release_spatialreference() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.Envelope.SpatialReference)
  
  ::esriPBuffer::EsriTypes_SpatialReference* temp = spatialreference_;
  spatialreference_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* EsriTypes_Envelope::_internal_mutable_spatialreference() {
  
  if (spatialreference_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_SpatialReference>(GetArena());
    spatialreference_ = p;
  }
  return spatialreference_;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* EsriTypes_Envelope::mutable_spatialreference() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.Envelope.SpatialReference)
  return _internal_mutable_spatialreference();
}
inline void EsriTypes_Envelope::set_allocated_spatialreference(::esriPBuffer::EsriTypes_SpatialReference* spatialreference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spatialreference_;
  }
  if (spatialreference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spatialreference);
    if (message_arena != submessage_arena) {
      spatialreference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spatialreference, submessage_arena);
    }
    
  } else {
    
  }
  spatialreference_ = spatialreference;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.Envelope.SpatialReference)
}

// -------------------------------------------------------------------

// EsriTypes_CodedValue

// string name = 1;
inline void EsriTypes_CodedValue::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EsriTypes_CodedValue::name() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.CodedValue.name)
  return _internal_name();
}
inline void EsriTypes_CodedValue::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.CodedValue.name)
}
inline std::string* EsriTypes_CodedValue::mutable_name() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.CodedValue.name)
  return _internal_mutable_name();
}
inline const std::string& EsriTypes_CodedValue::_internal_name() const {
  return name_.Get();
}
inline void EsriTypes_CodedValue::_internal_set_name(const std::string& value) {
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EsriTypes_CodedValue::set_name(std::string&& value) {
  
  name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.EsriTypes.CodedValue.name)
}
inline void EsriTypes_CodedValue::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.EsriTypes.CodedValue.name)
}
inline void EsriTypes_CodedValue::set_name(const char* value,
    size_t size) {
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.EsriTypes.CodedValue.name)
}
inline std::string* EsriTypes_CodedValue::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EsriTypes_CodedValue::release_name() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.CodedValue.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EsriTypes_CodedValue::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.CodedValue.name)
}

// .esriPBuffer.EsriTypes.Value code = 2;
inline bool EsriTypes_CodedValue::_internal_has_code() const {
  return this != internal_default_instance() && code_ != nullptr;
}
inline bool EsriTypes_CodedValue::has_code() const {
  return _internal_has_code();
}
inline void EsriTypes_CodedValue::clear_code() {
  if (GetArena() == nullptr && code_ != nullptr) {
    delete code_;
  }
  code_ = nullptr;
}
inline const ::esriPBuffer::EsriTypes_Value& EsriTypes_CodedValue::_internal_code() const {
  const ::esriPBuffer::EsriTypes_Value* p = code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_Value*>(
      &::esriPBuffer::_EsriTypes_Value_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_Value& EsriTypes_CodedValue::code() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.CodedValue.code)
  return _internal_code();
}
inline void EsriTypes_CodedValue::unsafe_arena_set_allocated_code(
    ::esriPBuffer::EsriTypes_Value* code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(code_);
  }
  code_ = code;
  if (code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.EsriTypes.CodedValue.code)
}
inline ::esriPBuffer::EsriTypes_Value* EsriTypes_CodedValue::release_code() {
  
  ::esriPBuffer::EsriTypes_Value* temp = code_;
  code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_Value* EsriTypes_CodedValue::unsafe_arena_release_code() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.CodedValue.code)
  
  ::esriPBuffer::EsriTypes_Value* temp = code_;
  code_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_Value* EsriTypes_CodedValue::_internal_mutable_code() {
  
  if (code_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_Value>(GetArena());
    code_ = p;
  }
  return code_;
}
inline ::esriPBuffer::EsriTypes_Value* EsriTypes_CodedValue::mutable_code() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.CodedValue.code)
  return _internal_mutable_code();
}
inline void EsriTypes_CodedValue::set_allocated_code(::esriPBuffer::EsriTypes_Value* code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete code_;
  }
  if (code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(code);
    if (message_arena != submessage_arena) {
      code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.CodedValue.code)
}

// -------------------------------------------------------------------

// EsriTypes_CodedValueDomain

// repeated .esriPBuffer.EsriTypes.CodedValue codesValues = 3;
inline int EsriTypes_CodedValueDomain::_internal_codesvalues_size() const {
  return codesvalues_.size();
}
inline int EsriTypes_CodedValueDomain::codesvalues_size() const {
  return _internal_codesvalues_size();
}
inline void EsriTypes_CodedValueDomain::clear_codesvalues() {
  codesvalues_.Clear();
}
inline ::esriPBuffer::EsriTypes_CodedValue* EsriTypes_CodedValueDomain::mutable_codesvalues(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.CodedValueDomain.codesValues)
  return codesvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_CodedValue >*
EsriTypes_CodedValueDomain::mutable_codesvalues() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.EsriTypes.CodedValueDomain.codesValues)
  return &codesvalues_;
}
inline const ::esriPBuffer::EsriTypes_CodedValue& EsriTypes_CodedValueDomain::_internal_codesvalues(int index) const {
  return codesvalues_.Get(index);
}
inline const ::esriPBuffer::EsriTypes_CodedValue& EsriTypes_CodedValueDomain::codesvalues(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.CodedValueDomain.codesValues)
  return _internal_codesvalues(index);
}
inline ::esriPBuffer::EsriTypes_CodedValue* EsriTypes_CodedValueDomain::_internal_add_codesvalues() {
  return codesvalues_.Add();
}
inline ::esriPBuffer::EsriTypes_CodedValue* EsriTypes_CodedValueDomain::add_codesvalues() {
  // @@protoc_insertion_point(field_add:esriPBuffer.EsriTypes.CodedValueDomain.codesValues)
  return _internal_add_codesvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_CodedValue >&
EsriTypes_CodedValueDomain::codesvalues() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.EsriTypes.CodedValueDomain.codesValues)
  return codesvalues_;
}

// -------------------------------------------------------------------

// EsriTypes_RangeDomain

// repeated .esriPBuffer.EsriTypes.Value range = 3;
inline int EsriTypes_RangeDomain::_internal_range_size() const {
  return range_.size();
}
inline int EsriTypes_RangeDomain::range_size() const {
  return _internal_range_size();
}
inline void EsriTypes_RangeDomain::clear_range() {
  range_.Clear();
}
inline ::esriPBuffer::EsriTypes_Value* EsriTypes_RangeDomain::mutable_range(int index) {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.RangeDomain.range)
  return range_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_Value >*
EsriTypes_RangeDomain::mutable_range() {
  // @@protoc_insertion_point(field_mutable_list:esriPBuffer.EsriTypes.RangeDomain.range)
  return &range_;
}
inline const ::esriPBuffer::EsriTypes_Value& EsriTypes_RangeDomain::_internal_range(int index) const {
  return range_.Get(index);
}
inline const ::esriPBuffer::EsriTypes_Value& EsriTypes_RangeDomain::range(int index) const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.RangeDomain.range)
  return _internal_range(index);
}
inline ::esriPBuffer::EsriTypes_Value* EsriTypes_RangeDomain::_internal_add_range() {
  return range_.Add();
}
inline ::esriPBuffer::EsriTypes_Value* EsriTypes_RangeDomain::add_range() {
  // @@protoc_insertion_point(field_add:esriPBuffer.EsriTypes.RangeDomain.range)
  return _internal_add_range();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::esriPBuffer::EsriTypes_Value >&
EsriTypes_RangeDomain::range() const {
  // @@protoc_insertion_point(field_list:esriPBuffer.EsriTypes.RangeDomain.range)
  return range_;
}

// -------------------------------------------------------------------

// EsriTypes_Domain

// string type = 1;
inline void EsriTypes_Domain::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EsriTypes_Domain::type() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Domain.type)
  return _internal_type();
}
inline void EsriTypes_Domain::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Domain.type)
}
inline std::string* EsriTypes_Domain::mutable_type() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.Domain.type)
  return _internal_mutable_type();
}
inline const std::string& EsriTypes_Domain::_internal_type() const {
  return type_.Get();
}
inline void EsriTypes_Domain::_internal_set_type(const std::string& value) {
  
  type_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EsriTypes_Domain::set_type(std::string&& value) {
  
  type_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.EsriTypes.Domain.type)
}
inline void EsriTypes_Domain::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.EsriTypes.Domain.type)
}
inline void EsriTypes_Domain::set_type(const char* value,
    size_t size) {
  
  type_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.EsriTypes.Domain.type)
}
inline std::string* EsriTypes_Domain::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EsriTypes_Domain::release_type() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.Domain.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EsriTypes_Domain::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.Domain.type)
}

// string name = 2;
inline void EsriTypes_Domain::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EsriTypes_Domain::name() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Domain.name)
  return _internal_name();
}
inline void EsriTypes_Domain::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Domain.name)
}
inline std::string* EsriTypes_Domain::mutable_name() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.Domain.name)
  return _internal_mutable_name();
}
inline const std::string& EsriTypes_Domain::_internal_name() const {
  return name_.Get();
}
inline void EsriTypes_Domain::_internal_set_name(const std::string& value) {
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EsriTypes_Domain::set_name(std::string&& value) {
  
  name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.EsriTypes.Domain.name)
}
inline void EsriTypes_Domain::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.EsriTypes.Domain.name)
}
inline void EsriTypes_Domain::set_name(const char* value,
    size_t size) {
  
  name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.EsriTypes.Domain.name)
}
inline std::string* EsriTypes_Domain::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EsriTypes_Domain::release_name() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.Domain.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EsriTypes_Domain::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.Domain.name)
}

// .esriPBuffer.EsriTypes.CodedValueDomain codedValueDomain = 3;
inline bool EsriTypes_Domain::_internal_has_codedvaluedomain() const {
  return of_case() == kCodedValueDomain;
}
inline bool EsriTypes_Domain::has_codedvaluedomain() const {
  return _internal_has_codedvaluedomain();
}
inline void EsriTypes_Domain::set_has_codedvaluedomain() {
  _oneof_case_[0] = kCodedValueDomain;
}
inline void EsriTypes_Domain::clear_codedvaluedomain() {
  if (_internal_has_codedvaluedomain()) {
    if (GetArena() == nullptr) {
      delete of_.codedvaluedomain_;
    }
    clear_has_of();
  }
}
inline ::esriPBuffer::EsriTypes_CodedValueDomain* EsriTypes_Domain::release_codedvaluedomain() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.Domain.codedValueDomain)
  if (_internal_has_codedvaluedomain()) {
    clear_has_of();
      ::esriPBuffer::EsriTypes_CodedValueDomain* temp = of_.codedvaluedomain_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    of_.codedvaluedomain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::EsriTypes_CodedValueDomain& EsriTypes_Domain::_internal_codedvaluedomain() const {
  return _internal_has_codedvaluedomain()
      ? *of_.codedvaluedomain_
      : *reinterpret_cast< ::esriPBuffer::EsriTypes_CodedValueDomain*>(&::esriPBuffer::_EsriTypes_CodedValueDomain_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_CodedValueDomain& EsriTypes_Domain::codedvaluedomain() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Domain.codedValueDomain)
  return _internal_codedvaluedomain();
}
inline ::esriPBuffer::EsriTypes_CodedValueDomain* EsriTypes_Domain::unsafe_arena_release_codedvaluedomain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.EsriTypes.Domain.codedValueDomain)
  if (_internal_has_codedvaluedomain()) {
    clear_has_of();
    ::esriPBuffer::EsriTypes_CodedValueDomain* temp = of_.codedvaluedomain_;
    of_.codedvaluedomain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EsriTypes_Domain::unsafe_arena_set_allocated_codedvaluedomain(::esriPBuffer::EsriTypes_CodedValueDomain* codedvaluedomain) {
  clear_of();
  if (codedvaluedomain) {
    set_has_codedvaluedomain();
    of_.codedvaluedomain_ = codedvaluedomain;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.EsriTypes.Domain.codedValueDomain)
}
inline ::esriPBuffer::EsriTypes_CodedValueDomain* EsriTypes_Domain::_internal_mutable_codedvaluedomain() {
  if (!_internal_has_codedvaluedomain()) {
    clear_of();
    set_has_codedvaluedomain();
    of_.codedvaluedomain_ = CreateMaybeMessage< ::esriPBuffer::EsriTypes_CodedValueDomain >(GetArena());
  }
  return of_.codedvaluedomain_;
}
inline ::esriPBuffer::EsriTypes_CodedValueDomain* EsriTypes_Domain::mutable_codedvaluedomain() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.Domain.codedValueDomain)
  return _internal_mutable_codedvaluedomain();
}

// .esriPBuffer.EsriTypes.RangeDomain rangeDomain = 4;
inline bool EsriTypes_Domain::_internal_has_rangedomain() const {
  return of_case() == kRangeDomain;
}
inline bool EsriTypes_Domain::has_rangedomain() const {
  return _internal_has_rangedomain();
}
inline void EsriTypes_Domain::set_has_rangedomain() {
  _oneof_case_[0] = kRangeDomain;
}
inline void EsriTypes_Domain::clear_rangedomain() {
  if (_internal_has_rangedomain()) {
    if (GetArena() == nullptr) {
      delete of_.rangedomain_;
    }
    clear_has_of();
  }
}
inline ::esriPBuffer::EsriTypes_RangeDomain* EsriTypes_Domain::release_rangedomain() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.Domain.rangeDomain)
  if (_internal_has_rangedomain()) {
    clear_has_of();
      ::esriPBuffer::EsriTypes_RangeDomain* temp = of_.rangedomain_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    of_.rangedomain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::esriPBuffer::EsriTypes_RangeDomain& EsriTypes_Domain::_internal_rangedomain() const {
  return _internal_has_rangedomain()
      ? *of_.rangedomain_
      : *reinterpret_cast< ::esriPBuffer::EsriTypes_RangeDomain*>(&::esriPBuffer::_EsriTypes_RangeDomain_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_RangeDomain& EsriTypes_Domain::rangedomain() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Domain.rangeDomain)
  return _internal_rangedomain();
}
inline ::esriPBuffer::EsriTypes_RangeDomain* EsriTypes_Domain::unsafe_arena_release_rangedomain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:esriPBuffer.EsriTypes.Domain.rangeDomain)
  if (_internal_has_rangedomain()) {
    clear_has_of();
    ::esriPBuffer::EsriTypes_RangeDomain* temp = of_.rangedomain_;
    of_.rangedomain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EsriTypes_Domain::unsafe_arena_set_allocated_rangedomain(::esriPBuffer::EsriTypes_RangeDomain* rangedomain) {
  clear_of();
  if (rangedomain) {
    set_has_rangedomain();
    of_.rangedomain_ = rangedomain;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.EsriTypes.Domain.rangeDomain)
}
inline ::esriPBuffer::EsriTypes_RangeDomain* EsriTypes_Domain::_internal_mutable_rangedomain() {
  if (!_internal_has_rangedomain()) {
    clear_of();
    set_has_rangedomain();
    of_.rangedomain_ = CreateMaybeMessage< ::esriPBuffer::EsriTypes_RangeDomain >(GetArena());
  }
  return of_.rangedomain_;
}
inline ::esriPBuffer::EsriTypes_RangeDomain* EsriTypes_Domain::mutable_rangedomain() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.Domain.rangeDomain)
  return _internal_mutable_rangedomain();
}

// .esriPBuffer.EsriExtendedTypes.FieldType fieldType = 5;
inline void EsriTypes_Domain::clear_fieldtype() {
  fieldtype_ = 0;
}
inline ::esriPBuffer::EsriExtendedTypes::FieldType EsriTypes_Domain::_internal_fieldtype() const {
  return static_cast< ::esriPBuffer::EsriExtendedTypes::FieldType >(fieldtype_);
}
inline ::esriPBuffer::EsriExtendedTypes::FieldType EsriTypes_Domain::fieldtype() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Domain.fieldType)
  return _internal_fieldtype();
}
inline void EsriTypes_Domain::_internal_set_fieldtype(::esriPBuffer::EsriExtendedTypes::FieldType value) {
  
  fieldtype_ = value;
}
inline void EsriTypes_Domain::set_fieldtype(::esriPBuffer::EsriExtendedTypes::FieldType value) {
  _internal_set_fieldtype(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Domain.fieldType)
}

// .esriPBuffer.EsriTypes.MergePolicyType mergePolicyType = 6;
inline void EsriTypes_Domain::clear_mergepolicytype() {
  mergepolicytype_ = 0;
}
inline ::esriPBuffer::EsriTypes_MergePolicyType EsriTypes_Domain::_internal_mergepolicytype() const {
  return static_cast< ::esriPBuffer::EsriTypes_MergePolicyType >(mergepolicytype_);
}
inline ::esriPBuffer::EsriTypes_MergePolicyType EsriTypes_Domain::mergepolicytype() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Domain.mergePolicyType)
  return _internal_mergepolicytype();
}
inline void EsriTypes_Domain::_internal_set_mergepolicytype(::esriPBuffer::EsriTypes_MergePolicyType value) {
  
  mergepolicytype_ = value;
}
inline void EsriTypes_Domain::set_mergepolicytype(::esriPBuffer::EsriTypes_MergePolicyType value) {
  _internal_set_mergepolicytype(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Domain.mergePolicyType)
}

// .esriPBuffer.EsriTypes.SplitPolicyType splitPolicyType = 7;
inline void EsriTypes_Domain::clear_splitpolicytype() {
  splitpolicytype_ = 0;
}
inline ::esriPBuffer::EsriTypes_SplitPolicyType EsriTypes_Domain::_internal_splitpolicytype() const {
  return static_cast< ::esriPBuffer::EsriTypes_SplitPolicyType >(splitpolicytype_);
}
inline ::esriPBuffer::EsriTypes_SplitPolicyType EsriTypes_Domain::splitpolicytype() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.Domain.splitPolicyType)
  return _internal_splitpolicytype();
}
inline void EsriTypes_Domain::_internal_set_splitpolicytype(::esriPBuffer::EsriTypes_SplitPolicyType value) {
  
  splitpolicytype_ = value;
}
inline void EsriTypes_Domain::set_splitpolicytype(::esriPBuffer::EsriTypes_SplitPolicyType value) {
  _internal_set_splitpolicytype(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.Domain.splitPolicyType)
}

inline bool EsriTypes_Domain::has_of() const {
  return of_case() != OF_NOT_SET;
}
inline void EsriTypes_Domain::clear_has_of() {
  _oneof_case_[0] = OF_NOT_SET;
}
inline EsriTypes_Domain::OfCase EsriTypes_Domain::of_case() const {
  return EsriTypes_Domain::OfCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EsriTypes_DatumTransformation

// uint32 wkid = 1;
inline void EsriTypes_DatumTransformation::clear_wkid() {
  wkid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EsriTypes_DatumTransformation::_internal_wkid() const {
  return wkid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EsriTypes_DatumTransformation::wkid() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.DatumTransformation.wkid)
  return _internal_wkid();
}
inline void EsriTypes_DatumTransformation::_internal_set_wkid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  wkid_ = value;
}
inline void EsriTypes_DatumTransformation::set_wkid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wkid(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.DatumTransformation.wkid)
}

// string wkt = 2;
inline void EsriTypes_DatumTransformation::clear_wkt() {
  wkt_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EsriTypes_DatumTransformation::wkt() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.DatumTransformation.wkt)
  return _internal_wkt();
}
inline void EsriTypes_DatumTransformation::set_wkt(const std::string& value) {
  _internal_set_wkt(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.DatumTransformation.wkt)
}
inline std::string* EsriTypes_DatumTransformation::mutable_wkt() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.DatumTransformation.wkt)
  return _internal_mutable_wkt();
}
inline const std::string& EsriTypes_DatumTransformation::_internal_wkt() const {
  return wkt_.Get();
}
inline void EsriTypes_DatumTransformation::_internal_set_wkt(const std::string& value) {
  
  wkt_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EsriTypes_DatumTransformation::set_wkt(std::string&& value) {
  
  wkt_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.EsriTypes.DatumTransformation.wkt)
}
inline void EsriTypes_DatumTransformation::set_wkt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wkt_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.EsriTypes.DatumTransformation.wkt)
}
inline void EsriTypes_DatumTransformation::set_wkt(const char* value,
    size_t size) {
  
  wkt_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.EsriTypes.DatumTransformation.wkt)
}
inline std::string* EsriTypes_DatumTransformation::_internal_mutable_wkt() {
  
  return wkt_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EsriTypes_DatumTransformation::release_wkt() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.DatumTransformation.wkt)
  return wkt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EsriTypes_DatumTransformation::set_allocated_wkt(std::string* wkt) {
  if (wkt != nullptr) {
    
  } else {
    
  }
  wkt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wkt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.DatumTransformation.wkt)
}

// string transformDirection = 3;
inline void EsriTypes_DatumTransformation::clear_transformdirection() {
  transformdirection_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EsriTypes_DatumTransformation::transformdirection() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.DatumTransformation.transformDirection)
  return _internal_transformdirection();
}
inline void EsriTypes_DatumTransformation::set_transformdirection(const std::string& value) {
  _internal_set_transformdirection(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.DatumTransformation.transformDirection)
}
inline std::string* EsriTypes_DatumTransformation::mutable_transformdirection() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.DatumTransformation.transformDirection)
  return _internal_mutable_transformdirection();
}
inline const std::string& EsriTypes_DatumTransformation::_internal_transformdirection() const {
  return transformdirection_.Get();
}
inline void EsriTypes_DatumTransformation::_internal_set_transformdirection(const std::string& value) {
  
  transformdirection_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EsriTypes_DatumTransformation::set_transformdirection(std::string&& value) {
  
  transformdirection_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.EsriTypes.DatumTransformation.transformDirection)
}
inline void EsriTypes_DatumTransformation::set_transformdirection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transformdirection_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.EsriTypes.DatumTransformation.transformDirection)
}
inline void EsriTypes_DatumTransformation::set_transformdirection(const char* value,
    size_t size) {
  
  transformdirection_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.EsriTypes.DatumTransformation.transformDirection)
}
inline std::string* EsriTypes_DatumTransformation::_internal_mutable_transformdirection() {
  
  return transformdirection_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EsriTypes_DatumTransformation::release_transformdirection() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.DatumTransformation.transformDirection)
  return transformdirection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EsriTypes_DatumTransformation::set_allocated_transformdirection(std::string* transformdirection) {
  if (transformdirection != nullptr) {
    
  } else {
    
  }
  transformdirection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transformdirection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.DatumTransformation.transformDirection)
}

// string transformJson = 4;
inline void EsriTypes_DatumTransformation::clear_transformjson() {
  transformjson_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EsriTypes_DatumTransformation::transformjson() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.DatumTransformation.transformJson)
  return _internal_transformjson();
}
inline void EsriTypes_DatumTransformation::set_transformjson(const std::string& value) {
  _internal_set_transformjson(value);
  // @@protoc_insertion_point(field_set:esriPBuffer.EsriTypes.DatumTransformation.transformJson)
}
inline std::string* EsriTypes_DatumTransformation::mutable_transformjson() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.DatumTransformation.transformJson)
  return _internal_mutable_transformjson();
}
inline const std::string& EsriTypes_DatumTransformation::_internal_transformjson() const {
  return transformjson_.Get();
}
inline void EsriTypes_DatumTransformation::_internal_set_transformjson(const std::string& value) {
  
  transformjson_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EsriTypes_DatumTransformation::set_transformjson(std::string&& value) {
  
  transformjson_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:esriPBuffer.EsriTypes.DatumTransformation.transformJson)
}
inline void EsriTypes_DatumTransformation::set_transformjson(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transformjson_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:esriPBuffer.EsriTypes.DatumTransformation.transformJson)
}
inline void EsriTypes_DatumTransformation::set_transformjson(const char* value,
    size_t size) {
  
  transformjson_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:esriPBuffer.EsriTypes.DatumTransformation.transformJson)
}
inline std::string* EsriTypes_DatumTransformation::_internal_mutable_transformjson() {
  
  return transformjson_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EsriTypes_DatumTransformation::release_transformjson() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.DatumTransformation.transformJson)
  return transformjson_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EsriTypes_DatumTransformation::set_allocated_transformjson(std::string* transformjson) {
  if (transformjson != nullptr) {
    
  } else {
    
  }
  transformjson_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transformjson,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.DatumTransformation.transformJson)
}

// .esriPBuffer.EsriTypes.SpatialReference fromSR = 5;
inline bool EsriTypes_DatumTransformation::_internal_has_fromsr() const {
  return this != internal_default_instance() && fromsr_ != nullptr;
}
inline bool EsriTypes_DatumTransformation::has_fromsr() const {
  return _internal_has_fromsr();
}
inline void EsriTypes_DatumTransformation::clear_fromsr() {
  if (GetArena() == nullptr && fromsr_ != nullptr) {
    delete fromsr_;
  }
  fromsr_ = nullptr;
}
inline const ::esriPBuffer::EsriTypes_SpatialReference& EsriTypes_DatumTransformation::_internal_fromsr() const {
  const ::esriPBuffer::EsriTypes_SpatialReference* p = fromsr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_SpatialReference*>(
      &::esriPBuffer::_EsriTypes_SpatialReference_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_SpatialReference& EsriTypes_DatumTransformation::fromsr() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.DatumTransformation.fromSR)
  return _internal_fromsr();
}
inline void EsriTypes_DatumTransformation::unsafe_arena_set_allocated_fromsr(
    ::esriPBuffer::EsriTypes_SpatialReference* fromsr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fromsr_);
  }
  fromsr_ = fromsr;
  if (fromsr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.EsriTypes.DatumTransformation.fromSR)
}
inline ::esriPBuffer::EsriTypes_SpatialReference* EsriTypes_DatumTransformation::release_fromsr() {
  
  ::esriPBuffer::EsriTypes_SpatialReference* temp = fromsr_;
  fromsr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* EsriTypes_DatumTransformation::unsafe_arena_release_fromsr() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.DatumTransformation.fromSR)
  
  ::esriPBuffer::EsriTypes_SpatialReference* temp = fromsr_;
  fromsr_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* EsriTypes_DatumTransformation::_internal_mutable_fromsr() {
  
  if (fromsr_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_SpatialReference>(GetArena());
    fromsr_ = p;
  }
  return fromsr_;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* EsriTypes_DatumTransformation::mutable_fromsr() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.DatumTransformation.fromSR)
  return _internal_mutable_fromsr();
}
inline void EsriTypes_DatumTransformation::set_allocated_fromsr(::esriPBuffer::EsriTypes_SpatialReference* fromsr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fromsr_;
  }
  if (fromsr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fromsr);
    if (message_arena != submessage_arena) {
      fromsr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fromsr, submessage_arena);
    }
    
  } else {
    
  }
  fromsr_ = fromsr;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.DatumTransformation.fromSR)
}

// .esriPBuffer.EsriTypes.SpatialReference toSR = 6;
inline bool EsriTypes_DatumTransformation::_internal_has_tosr() const {
  return this != internal_default_instance() && tosr_ != nullptr;
}
inline bool EsriTypes_DatumTransformation::has_tosr() const {
  return _internal_has_tosr();
}
inline void EsriTypes_DatumTransformation::clear_tosr() {
  if (GetArena() == nullptr && tosr_ != nullptr) {
    delete tosr_;
  }
  tosr_ = nullptr;
}
inline const ::esriPBuffer::EsriTypes_SpatialReference& EsriTypes_DatumTransformation::_internal_tosr() const {
  const ::esriPBuffer::EsriTypes_SpatialReference* p = tosr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::esriPBuffer::EsriTypes_SpatialReference*>(
      &::esriPBuffer::_EsriTypes_SpatialReference_default_instance_);
}
inline const ::esriPBuffer::EsriTypes_SpatialReference& EsriTypes_DatumTransformation::tosr() const {
  // @@protoc_insertion_point(field_get:esriPBuffer.EsriTypes.DatumTransformation.toSR)
  return _internal_tosr();
}
inline void EsriTypes_DatumTransformation::unsafe_arena_set_allocated_tosr(
    ::esriPBuffer::EsriTypes_SpatialReference* tosr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tosr_);
  }
  tosr_ = tosr;
  if (tosr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esriPBuffer.EsriTypes.DatumTransformation.toSR)
}
inline ::esriPBuffer::EsriTypes_SpatialReference* EsriTypes_DatumTransformation::release_tosr() {
  
  ::esriPBuffer::EsriTypes_SpatialReference* temp = tosr_;
  tosr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* EsriTypes_DatumTransformation::unsafe_arena_release_tosr() {
  // @@protoc_insertion_point(field_release:esriPBuffer.EsriTypes.DatumTransformation.toSR)
  
  ::esriPBuffer::EsriTypes_SpatialReference* temp = tosr_;
  tosr_ = nullptr;
  return temp;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* EsriTypes_DatumTransformation::_internal_mutable_tosr() {
  
  if (tosr_ == nullptr) {
    auto* p = CreateMaybeMessage<::esriPBuffer::EsriTypes_SpatialReference>(GetArena());
    tosr_ = p;
  }
  return tosr_;
}
inline ::esriPBuffer::EsriTypes_SpatialReference* EsriTypes_DatumTransformation::mutable_tosr() {
  // @@protoc_insertion_point(field_mutable:esriPBuffer.EsriTypes.DatumTransformation.toSR)
  return _internal_mutable_tosr();
}
inline void EsriTypes_DatumTransformation::set_allocated_tosr(::esriPBuffer::EsriTypes_SpatialReference* tosr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tosr_;
  }
  if (tosr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tosr);
    if (message_arena != submessage_arena) {
      tosr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tosr, submessage_arena);
    }
    
  } else {
    
  }
  tosr_ = tosr;
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.EsriTypes.DatumTransformation.toSR)
}

// -------------------------------------------------------------------

// EsriTypes

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace esriPBuffer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::esriPBuffer::EsriTypes_GeometryType> : ::std::true_type {};
template <> struct is_proto_enum< ::esriPBuffer::EsriTypes_esriSpatialRel> : ::std::true_type {};
template <> struct is_proto_enum< ::esriPBuffer::EsriTypes_esriFeatureEncoding> : ::std::true_type {};
template <> struct is_proto_enum< ::esriPBuffer::EsriTypes_MergePolicyType> : ::std::true_type {};
template <> struct is_proto_enum< ::esriPBuffer::EsriTypes_SplitPolicyType> : ::std::true_type {};
template <> struct is_proto_enum< ::esriPBuffer::EsriTypes_QuantizeOriginPostion> : ::std::true_type {};
template <> struct is_proto_enum< ::esriPBuffer::EsriTypes_QuantizeMode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_esriPBuffer_2fEsriTypes_2eproto
