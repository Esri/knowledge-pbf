// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: esriPBuffer/ObjectIdentifierSet.proto

#include "esriPBuffer/ObjectIdentifierSet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_esriPBuffer_2fObjectIdentifierSet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectIdArray_esriPBuffer_2fObjectIdentifierSet_2eproto;
namespace esriPBuffer {
class ObjectIdArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectIdArray> _instance;
} _ObjectIdArray_default_instance_;
class ObjectIdentifierSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectIdentifierSet> _instance;
  const ::esriPBuffer::ObjectIdArray* oid_array_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr globalid_array_;
} _ObjectIdentifierSet_default_instance_;
}  // namespace esriPBuffer
static void InitDefaultsscc_info_ObjectIdArray_esriPBuffer_2fObjectIdentifierSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::_ObjectIdArray_default_instance_;
    new (ptr) ::esriPBuffer::ObjectIdArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::ObjectIdArray::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectIdArray_esriPBuffer_2fObjectIdentifierSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObjectIdArray_esriPBuffer_2fObjectIdentifierSet_2eproto}, {}};

static void InitDefaultsscc_info_ObjectIdentifierSet_esriPBuffer_2fObjectIdentifierSet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::esriPBuffer::_ObjectIdentifierSet_default_instance_;
    new (ptr) ::esriPBuffer::ObjectIdentifierSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::esriPBuffer::ObjectIdentifierSet::InitAsDefaultInstance();
}

EXT_CLASS ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectIdentifierSet_esriPBuffer_2fObjectIdentifierSet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjectIdentifierSet_esriPBuffer_2fObjectIdentifierSet_2eproto}, {
      &scc_info_ObjectIdArray_esriPBuffer_2fObjectIdentifierSet_2eproto.base,}};

namespace esriPBuffer {

// ===================================================================

void ObjectIdArray::InitAsDefaultInstance() {
}
class ObjectIdArray::_Internal {
 public:
};

ObjectIdArray::ObjectIdArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.ObjectIdArray)
}
ObjectIdArray::ObjectIdArray(const ObjectIdArray& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.ObjectIdArray)
}

void ObjectIdArray::SharedCtor() {
}

ObjectIdArray::~ObjectIdArray() {
  // @@protoc_insertion_point(destructor:esriPBuffer.ObjectIdArray)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ObjectIdArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObjectIdArray::ArenaDtor(void* object) {
  ObjectIdArray* _this = reinterpret_cast< ObjectIdArray* >(object);
  (void)_this;
}
void ObjectIdArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectIdArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectIdArray& ObjectIdArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectIdArray_esriPBuffer_2fObjectIdentifierSet_2eproto.base);
  return *internal_default_instance();
}


void ObjectIdArray::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.ObjectIdArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ObjectIdArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectIdArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.ObjectIdArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 value = 1 [packed = true];
  {
    int byte_size = _value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.ObjectIdArray)
  return target;
}

size_t ObjectIdArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.ObjectIdArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 value = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->value_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectIdArray::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ObjectIdArray*>(
      &from));
}

void ObjectIdArray::MergeFrom(const ObjectIdArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.ObjectIdArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void ObjectIdArray::CopyFrom(const ObjectIdArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.ObjectIdArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectIdArray::IsInitialized() const {
  return true;
}

void ObjectIdArray::InternalSwap(ObjectIdArray* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

std::string ObjectIdArray::GetTypeName() const {
  return "esriPBuffer.ObjectIdArray";
}


// ===================================================================

void ObjectIdentifierSet::InitAsDefaultInstance() {
}
class ObjectIdentifierSet::_Internal {
 public:
  static const ::esriPBuffer::ObjectIdArray& oid_array(const ObjectIdentifierSet* msg);
};

const ::esriPBuffer::ObjectIdArray&
ObjectIdentifierSet::_Internal::oid_array(const ObjectIdentifierSet* msg) {
  return *msg->id_array_.oid_array_;
}
void ObjectIdentifierSet::set_allocated_oid_array(::esriPBuffer::ObjectIdArray* oid_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_id_array();
  if (oid_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oid_array);
    if (message_arena != submessage_arena) {
      oid_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oid_array, submessage_arena);
    }
    set_has_oid_array();
    id_array_.oid_array_ = oid_array;
  }
  // @@protoc_insertion_point(field_set_allocated:esriPBuffer.ObjectIdentifierSet.oid_array)
}
ObjectIdentifierSet::ObjectIdentifierSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:esriPBuffer.ObjectIdentifierSet)
}
ObjectIdentifierSet::ObjectIdentifierSet(const ObjectIdentifierSet& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_id_array();
  switch (from.id_array_case()) {
    case kOidArray: {
      _internal_mutable_oid_array()->::esriPBuffer::ObjectIdArray::MergeFrom(from._internal_oid_array());
      break;
    }
    case kGlobalidArray: {
      _internal_set_globalid_array(from._internal_globalid_array());
      break;
    }
    case ID_ARRAY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:esriPBuffer.ObjectIdentifierSet)
}

void ObjectIdentifierSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectIdentifierSet_esriPBuffer_2fObjectIdentifierSet_2eproto.base);
  clear_has_id_array();
}

ObjectIdentifierSet::~ObjectIdentifierSet() {
  // @@protoc_insertion_point(destructor:esriPBuffer.ObjectIdentifierSet)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ObjectIdentifierSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_id_array()) {
    clear_id_array();
  }
}

void ObjectIdentifierSet::ArenaDtor(void* object) {
  ObjectIdentifierSet* _this = reinterpret_cast< ObjectIdentifierSet* >(object);
  (void)_this;
}
void ObjectIdentifierSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectIdentifierSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectIdentifierSet& ObjectIdentifierSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectIdentifierSet_esriPBuffer_2fObjectIdentifierSet_2eproto.base);
  return *internal_default_instance();
}


void ObjectIdentifierSet::clear_id_array() {
// @@protoc_insertion_point(one_of_clear_start:esriPBuffer.ObjectIdentifierSet)
  switch (id_array_case()) {
    case kOidArray: {
      if (GetArena() == nullptr) {
        delete id_array_.oid_array_;
      }
      break;
    }
    case kGlobalidArray: {
      id_array_.globalid_array_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case ID_ARRAY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ID_ARRAY_NOT_SET;
}


void ObjectIdentifierSet::Clear() {
// @@protoc_insertion_point(message_clear_start:esriPBuffer.ObjectIdentifierSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_id_array();
  _internal_metadata_.Clear<std::string>();
}

const char* ObjectIdentifierSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .esriPBuffer.ObjectIdArray oid_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_oid_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes globalid_array = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_globalid_array();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectIdentifierSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:esriPBuffer.ObjectIdentifierSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .esriPBuffer.ObjectIdArray oid_array = 1;
  if (_internal_has_oid_array()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::oid_array(this), target, stream);
  }

  // bytes globalid_array = 2;
  if (_internal_has_globalid_array()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_globalid_array(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:esriPBuffer.ObjectIdentifierSet)
  return target;
}

size_t ObjectIdentifierSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:esriPBuffer.ObjectIdentifierSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (id_array_case()) {
    // .esriPBuffer.ObjectIdArray oid_array = 1;
    case kOidArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *id_array_.oid_array_);
      break;
    }
    // bytes globalid_array = 2;
    case kGlobalidArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_globalid_array());
      break;
    }
    case ID_ARRAY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectIdentifierSet::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ObjectIdentifierSet*>(
      &from));
}

void ObjectIdentifierSet::MergeFrom(const ObjectIdentifierSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:esriPBuffer.ObjectIdentifierSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.id_array_case()) {
    case kOidArray: {
      _internal_mutable_oid_array()->::esriPBuffer::ObjectIdArray::MergeFrom(from._internal_oid_array());
      break;
    }
    case kGlobalidArray: {
      _internal_set_globalid_array(from._internal_globalid_array());
      break;
    }
    case ID_ARRAY_NOT_SET: {
      break;
    }
  }
}

void ObjectIdentifierSet::CopyFrom(const ObjectIdentifierSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:esriPBuffer.ObjectIdentifierSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectIdentifierSet::IsInitialized() const {
  return true;
}

void ObjectIdentifierSet::InternalSwap(ObjectIdentifierSet* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(id_array_, other->id_array_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string ObjectIdentifierSet::GetTypeName() const {
  return "esriPBuffer.ObjectIdentifierSet";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace esriPBuffer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::esriPBuffer::ObjectIdArray* Arena::CreateMaybeMessage< ::esriPBuffer::ObjectIdArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::ObjectIdArray >(arena);
}
template<> PROTOBUF_NOINLINE ::esriPBuffer::ObjectIdentifierSet* Arena::CreateMaybeMessage< ::esriPBuffer::ObjectIdentifierSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::esriPBuffer::ObjectIdentifierSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
